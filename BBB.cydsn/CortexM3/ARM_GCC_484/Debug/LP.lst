ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"LP.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	LP_initVar
  19              		.bss
  20              		.type	LP_initVar, %object
  21              		.size	LP_initVar, 1
  22              	LP_initVar:
  23 0000 00       		.space	1
  24              		.global	LP_errorStatus
  25              		.type	LP_errorStatus, %object
  26              		.size	LP_errorStatus, 1
  27              	LP_errorStatus:
  28 0001 00       		.space	1
  29              		.comm	LP_rxBuffer,200,4
  30              		.global	LP_rxBufferRead
  31              		.type	LP_rxBufferRead, %object
  32              		.size	LP_rxBufferRead, 1
  33              	LP_rxBufferRead:
  34 0002 00       		.space	1
  35              		.global	LP_rxBufferWrite
  36              		.type	LP_rxBufferWrite, %object
  37              		.size	LP_rxBufferWrite, 1
  38              	LP_rxBufferWrite:
  39 0003 00       		.space	1
  40              		.global	LP_rxBufferLoopDetect
  41              		.type	LP_rxBufferLoopDetect, %object
  42              		.size	LP_rxBufferLoopDetect, 1
  43              	LP_rxBufferLoopDetect:
  44 0004 00       		.space	1
  45              		.global	LP_rxBufferOverflow
  46              		.type	LP_rxBufferOverflow, %object
  47              		.size	LP_rxBufferOverflow, 1
  48              	LP_rxBufferOverflow:
  49 0005 00       		.space	1
  50              		.section	.text.LP_Start,"ax",%progbits
  51              		.align	2
  52              		.global	LP_Start
  53              		.thumb
  54              		.thumb_func
  55              		.type	LP_Start, %function
  56              	LP_Start:
  57              	.LFB0:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 2


  58              		.file 1 ".\\Generated_Source\\PSoC5\\LP.c"
   1:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/LP.c **** * File Name: LP.c
   3:.\Generated_Source\PSoC5/LP.c **** * Version 2.50
   4:.\Generated_Source\PSoC5/LP.c **** *
   5:.\Generated_Source\PSoC5/LP.c **** * Description:
   6:.\Generated_Source\PSoC5/LP.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC5/LP.c **** *
   8:.\Generated_Source\PSoC5/LP.c **** * Note:
   9:.\Generated_Source\PSoC5/LP.c **** *
  10:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
  11:.\Generated_Source\PSoC5/LP.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/LP.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/LP.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/LP.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/LP.c **** 
  17:.\Generated_Source\PSoC5/LP.c **** #include "LP.h"
  18:.\Generated_Source\PSoC5/LP.c **** #if (LP_INTERNAL_CLOCK_USED)
  19:.\Generated_Source\PSoC5/LP.c ****     #include "LP_IntClock.h"
  20:.\Generated_Source\PSoC5/LP.c **** #endif /* End LP_INTERNAL_CLOCK_USED */
  21:.\Generated_Source\PSoC5/LP.c **** 
  22:.\Generated_Source\PSoC5/LP.c **** 
  23:.\Generated_Source\PSoC5/LP.c **** /***************************************
  24:.\Generated_Source\PSoC5/LP.c **** * Global data allocation
  25:.\Generated_Source\PSoC5/LP.c **** ***************************************/
  26:.\Generated_Source\PSoC5/LP.c **** 
  27:.\Generated_Source\PSoC5/LP.c **** uint8 LP_initVar = 0u;
  28:.\Generated_Source\PSoC5/LP.c **** 
  29:.\Generated_Source\PSoC5/LP.c **** #if (LP_TX_INTERRUPT_ENABLED && LP_TX_ENABLED)
  30:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_txBuffer[LP_TX_BUFFER_SIZE];
  31:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_txBufferRead = 0u;
  32:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC5/LP.c **** #endif /* (LP_TX_INTERRUPT_ENABLED && LP_TX_ENABLED) */
  34:.\Generated_Source\PSoC5/LP.c **** 
  35:.\Generated_Source\PSoC5/LP.c **** #if (LP_RX_INTERRUPT_ENABLED && (LP_RX_ENABLED || LP_HD_ENABLED))
  36:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_errorStatus = 0u;
  37:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_rxBuffer[LP_RX_BUFFER_SIZE];
  38:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_rxBufferRead  = 0u;
  39:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_rxBufferWrite = 0u;
  40:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_rxBufferLoopDetect = 0u;
  41:.\Generated_Source\PSoC5/LP.c ****     volatile uint8 LP_rxBufferOverflow   = 0u;
  42:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RXHW_ADDRESS_ENABLED)
  43:.\Generated_Source\PSoC5/LP.c ****         volatile uint8 LP_rxAddressMode = LP_RX_ADDRESS_MODE;
  44:.\Generated_Source\PSoC5/LP.c ****         volatile uint8 LP_rxAddressDetected = 0u;
  45:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RXHW_ADDRESS_ENABLED) */
  46:.\Generated_Source\PSoC5/LP.c **** #endif /* (LP_RX_INTERRUPT_ENABLED && (LP_RX_ENABLED || LP_HD_ENABLED)) */
  47:.\Generated_Source\PSoC5/LP.c **** 
  48:.\Generated_Source\PSoC5/LP.c **** 
  49:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
  50:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_Start
  51:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
  52:.\Generated_Source\PSoC5/LP.c **** *
  53:.\Generated_Source\PSoC5/LP.c **** * Summary:
  54:.\Generated_Source\PSoC5/LP.c **** *  This is the preferred method to begin component operation.
  55:.\Generated_Source\PSoC5/LP.c **** *  LP_Start() sets the initVar variable, calls the
  56:.\Generated_Source\PSoC5/LP.c **** *  LP_Init() function, and then calls the
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 3


  57:.\Generated_Source\PSoC5/LP.c **** *  LP_Enable() function.
  58:.\Generated_Source\PSoC5/LP.c **** *
  59:.\Generated_Source\PSoC5/LP.c **** * Parameters:
  60:.\Generated_Source\PSoC5/LP.c **** *  None.
  61:.\Generated_Source\PSoC5/LP.c **** *
  62:.\Generated_Source\PSoC5/LP.c **** * Return:
  63:.\Generated_Source\PSoC5/LP.c **** *  None.
  64:.\Generated_Source\PSoC5/LP.c **** *
  65:.\Generated_Source\PSoC5/LP.c **** * Global variables:
  66:.\Generated_Source\PSoC5/LP.c **** *  The LP_intiVar variable is used to indicate initial
  67:.\Generated_Source\PSoC5/LP.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:.\Generated_Source\PSoC5/LP.c **** *  and set to one (1u) the first time LP_Start() is called. This
  69:.\Generated_Source\PSoC5/LP.c **** *  allows for component initialization without re-initialization in all
  70:.\Generated_Source\PSoC5/LP.c **** *  subsequent calls to the LP_Start() routine.
  71:.\Generated_Source\PSoC5/LP.c **** *
  72:.\Generated_Source\PSoC5/LP.c **** * Reentrant:
  73:.\Generated_Source\PSoC5/LP.c **** *  No.
  74:.\Generated_Source\PSoC5/LP.c **** *
  75:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
  76:.\Generated_Source\PSoC5/LP.c **** void LP_Start(void) 
  77:.\Generated_Source\PSoC5/LP.c **** {
  59              		.loc 1 77 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 80B5     		push	{r7, lr}
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  78:.\Generated_Source\PSoC5/LP.c ****     /* If not initialized then initialize all required hardware and software */
  79:.\Generated_Source\PSoC5/LP.c ****     if(LP_initVar == 0u)
  69              		.loc 1 79 0
  70 0004 054B     		ldr	r3, .L3
  71 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  72 0008 002B     		cmp	r3, #0
  73 000a 04D1     		bne	.L2
  80:.\Generated_Source\PSoC5/LP.c ****     {
  81:.\Generated_Source\PSoC5/LP.c ****         LP_Init();
  74              		.loc 1 81 0
  75 000c FFF7FEFF 		bl	LP_Init
  82:.\Generated_Source\PSoC5/LP.c ****         LP_initVar = 1u;
  76              		.loc 1 82 0
  77 0010 024B     		ldr	r3, .L3
  78 0012 0122     		movs	r2, #1
  79 0014 1A70     		strb	r2, [r3]
  80              	.L2:
  83:.\Generated_Source\PSoC5/LP.c ****     }
  84:.\Generated_Source\PSoC5/LP.c **** 
  85:.\Generated_Source\PSoC5/LP.c ****     LP_Enable();
  81              		.loc 1 85 0
  82 0016 FFF7FEFF 		bl	LP_Enable
  86:.\Generated_Source\PSoC5/LP.c **** }
  83              		.loc 1 86 0
  84 001a 80BD     		pop	{r7, pc}
  85              	.L4:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 4


  86              		.align	2
  87              	.L3:
  88 001c 00000000 		.word	LP_initVar
  89              		.cfi_endproc
  90              	.LFE0:
  91              		.size	LP_Start, .-LP_Start
  92              		.section	.text.LP_Init,"ax",%progbits
  93              		.align	2
  94              		.global	LP_Init
  95              		.thumb
  96              		.thumb_func
  97              		.type	LP_Init, %function
  98              	LP_Init:
  99              	.LFB1:
  87:.\Generated_Source\PSoC5/LP.c **** 
  88:.\Generated_Source\PSoC5/LP.c **** 
  89:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
  90:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_Init
  91:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
  92:.\Generated_Source\PSoC5/LP.c **** *
  93:.\Generated_Source\PSoC5/LP.c **** * Summary:
  94:.\Generated_Source\PSoC5/LP.c **** *  Initializes or restores the component according to the customizer Configure
  95:.\Generated_Source\PSoC5/LP.c **** *  dialog settings. It is not necessary to call LP_Init() because
  96:.\Generated_Source\PSoC5/LP.c **** *  the LP_Start() API calls this function and is the preferred
  97:.\Generated_Source\PSoC5/LP.c **** *  method to begin component operation.
  98:.\Generated_Source\PSoC5/LP.c **** *
  99:.\Generated_Source\PSoC5/LP.c **** * Parameters:
 100:.\Generated_Source\PSoC5/LP.c **** *  None.
 101:.\Generated_Source\PSoC5/LP.c **** *
 102:.\Generated_Source\PSoC5/LP.c **** * Return:
 103:.\Generated_Source\PSoC5/LP.c **** *  None.
 104:.\Generated_Source\PSoC5/LP.c **** *
 105:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
 106:.\Generated_Source\PSoC5/LP.c **** void LP_Init(void) 
 107:.\Generated_Source\PSoC5/LP.c **** {
 100              		.loc 1 107 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 80B5     		push	{r7, lr}
 105              		.cfi_def_cfa_offset 8
 106              		.cfi_offset 7, -8
 107              		.cfi_offset 14, -4
 108 0002 00AF     		add	r7, sp, #0
 109              		.cfi_def_cfa_register 7
 108:.\Generated_Source\PSoC5/LP.c ****     #if(LP_RX_ENABLED || LP_HD_ENABLED)
 109:.\Generated_Source\PSoC5/LP.c **** 
 110:.\Generated_Source\PSoC5/LP.c ****         #if (LP_RX_INTERRUPT_ENABLED)
 111:.\Generated_Source\PSoC5/LP.c ****             /* Set RX interrupt vector and priority */
 112:.\Generated_Source\PSoC5/LP.c ****             (void) CyIntSetVector(LP_RX_VECT_NUM, &LP_RXISR);
 110              		.loc 1 112 0
 111 0004 0320     		movs	r0, #3
 112 0006 0D49     		ldr	r1, .L6
 113 0008 FFF7FEFF 		bl	CyIntSetVector
 113:.\Generated_Source\PSoC5/LP.c ****             CyIntSetPriority(LP_RX_VECT_NUM, LP_RX_PRIOR_NUM);
 114              		.loc 1 113 0
 115 000c 0320     		movs	r0, #3
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 5


 116 000e 0721     		movs	r1, #7
 117 0010 FFF7FEFF 		bl	CyIntSetPriority
 114:.\Generated_Source\PSoC5/LP.c ****             LP_errorStatus = 0u;
 118              		.loc 1 114 0
 119 0014 0A4B     		ldr	r3, .L6+4
 120 0016 0022     		movs	r2, #0
 121 0018 1A70     		strb	r2, [r3]
 115:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_RX_INTERRUPT_ENABLED) */
 116:.\Generated_Source\PSoC5/LP.c **** 
 117:.\Generated_Source\PSoC5/LP.c ****         #if (LP_RXHW_ADDRESS_ENABLED)
 118:.\Generated_Source\PSoC5/LP.c ****             LP_SetRxAddressMode(LP_RX_ADDRESS_MODE);
 119:.\Generated_Source\PSoC5/LP.c ****             LP_SetRxAddress1(LP_RX_HW_ADDRESS1);
 120:.\Generated_Source\PSoC5/LP.c ****             LP_SetRxAddress2(LP_RX_HW_ADDRESS2);
 121:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_RXHW_ADDRESS_ENABLED */
 122:.\Generated_Source\PSoC5/LP.c **** 
 123:.\Generated_Source\PSoC5/LP.c ****         /* Init Count7 period */
 124:.\Generated_Source\PSoC5/LP.c ****         LP_RXBITCTR_PERIOD_REG = LP_RXBITCTR_INIT;
 122              		.loc 1 124 0
 123 001a 0A4B     		ldr	r3, .L6+8
 124 001c 7222     		movs	r2, #114
 125 001e 1A70     		strb	r2, [r3]
 125:.\Generated_Source\PSoC5/LP.c ****         /* Configure the Initial RX interrupt mask */
 126:.\Generated_Source\PSoC5/LP.c ****         LP_RXSTATUS_MASK_REG  = LP_INIT_RX_INTERRUPTS_MASK;
 126              		.loc 1 126 0
 127 0020 094B     		ldr	r3, .L6+12
 128 0022 2022     		movs	r2, #32
 129 0024 1A70     		strb	r2, [r3]
 127:.\Generated_Source\PSoC5/LP.c ****     #endif /* End LP_RX_ENABLED || LP_HD_ENABLED*/
 128:.\Generated_Source\PSoC5/LP.c **** 
 129:.\Generated_Source\PSoC5/LP.c ****     #if(LP_TX_ENABLED)
 130:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TX_INTERRUPT_ENABLED)
 131:.\Generated_Source\PSoC5/LP.c ****             /* Set TX interrupt vector and priority */
 132:.\Generated_Source\PSoC5/LP.c ****             (void) CyIntSetVector(LP_TX_VECT_NUM, &LP_TXISR);
 133:.\Generated_Source\PSoC5/LP.c ****             CyIntSetPriority(LP_TX_VECT_NUM, LP_TX_PRIOR_NUM);
 134:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_INTERRUPT_ENABLED) */
 135:.\Generated_Source\PSoC5/LP.c **** 
 136:.\Generated_Source\PSoC5/LP.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TXCLKGEN_DP)
 138:.\Generated_Source\PSoC5/LP.c ****             LP_TXBITCLKGEN_CTR_REG = LP_BIT_CENTER;
 130              		.loc 1 138 0
 131 0026 094B     		ldr	r3, .L6+16
 132 0028 0622     		movs	r2, #6
 133 002a 1A70     		strb	r2, [r3]
 139:.\Generated_Source\PSoC5/LP.c ****             LP_TXBITCLKTX_COMPLETE_REG = ((LP_NUMBER_OF_DATA_BITS +
 134              		.loc 1 139 0
 135 002c 084B     		ldr	r3, .L6+20
 136 002e 4722     		movs	r2, #71
 137 0030 1A70     		strb	r2, [r3]
 140:.\Generated_Source\PSoC5/LP.c ****                         LP_NUMBER_OF_START_BIT) * LP_OVER_SAMPLE_COUNT) - 1u;
 141:.\Generated_Source\PSoC5/LP.c ****         #else
 142:.\Generated_Source\PSoC5/LP.c ****             LP_TXBITCTR_PERIOD_REG = ((LP_NUMBER_OF_DATA_BITS +
 143:.\Generated_Source\PSoC5/LP.c ****                         LP_NUMBER_OF_START_BIT) * LP_OVER_SAMPLE_8) - 1u;
 144:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_TXCLKGEN_DP */
 145:.\Generated_Source\PSoC5/LP.c **** 
 146:.\Generated_Source\PSoC5/LP.c ****         /* Configure the Initial TX interrupt mask */
 147:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TX_INTERRUPT_ENABLED)
 148:.\Generated_Source\PSoC5/LP.c ****             LP_TXSTATUS_MASK_REG = LP_TX_STS_FIFO_EMPTY;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 6


 149:.\Generated_Source\PSoC5/LP.c ****         #else
 150:.\Generated_Source\PSoC5/LP.c ****             LP_TXSTATUS_MASK_REG = LP_INIT_TX_INTERRUPTS_MASK;
 138              		.loc 1 150 0
 139 0032 084B     		ldr	r3, .L6+24
 140 0034 0022     		movs	r2, #0
 141 0036 1A70     		strb	r2, [r3]
 151:.\Generated_Source\PSoC5/LP.c ****         #endif /*End LP_TX_INTERRUPT_ENABLED*/
 152:.\Generated_Source\PSoC5/LP.c **** 
 153:.\Generated_Source\PSoC5/LP.c ****     #endif /* End LP_TX_ENABLED */
 154:.\Generated_Source\PSoC5/LP.c **** 
 155:.\Generated_Source\PSoC5/LP.c ****     #if(LP_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:.\Generated_Source\PSoC5/LP.c ****         LP_WriteControlRegister( \
 157:.\Generated_Source\PSoC5/LP.c ****             (LP_ReadControlRegister() & (uint8)~LP_CTRL_PARITY_TYPE_MASK) | \
 158:.\Generated_Source\PSoC5/LP.c ****             (uint8)(LP_PARITY_TYPE << LP_CTRL_PARITY_TYPE0_SHIFT) );
 159:.\Generated_Source\PSoC5/LP.c ****     #endif /* End LP_PARITY_TYPE_SW */
 160:.\Generated_Source\PSoC5/LP.c **** }
 142              		.loc 1 160 0
 143 0038 80BD     		pop	{r7, pc}
 144              	.L7:
 145 003a 00BF     		.align	2
 146              	.L6:
 147 003c 00000000 		.word	LP_RXISR
 148 0040 00000000 		.word	LP_errorStatus
 149 0044 88650040 		.word	1073767816
 150 0048 8A640040 		.word	1073767562
 151 004c 2A640040 		.word	1073767466
 152 0050 3A640040 		.word	1073767482
 153 0054 8B640040 		.word	1073767563
 154              		.cfi_endproc
 155              	.LFE1:
 156              		.size	LP_Init, .-LP_Init
 157              		.section	.text.LP_Enable,"ax",%progbits
 158              		.align	2
 159              		.global	LP_Enable
 160              		.thumb
 161              		.thumb_func
 162              		.type	LP_Enable, %function
 163              	LP_Enable:
 164              	.LFB2:
 161:.\Generated_Source\PSoC5/LP.c **** 
 162:.\Generated_Source\PSoC5/LP.c **** 
 163:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
 164:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_Enable
 165:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
 166:.\Generated_Source\PSoC5/LP.c **** *
 167:.\Generated_Source\PSoC5/LP.c **** * Summary:
 168:.\Generated_Source\PSoC5/LP.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:.\Generated_Source\PSoC5/LP.c **** *  to call LP_Enable() because the LP_Start() API
 170:.\Generated_Source\PSoC5/LP.c **** *  calls this function, which is the preferred method to begin component
 171:.\Generated_Source\PSoC5/LP.c **** *  operation.
 172:.\Generated_Source\PSoC5/LP.c **** 
 173:.\Generated_Source\PSoC5/LP.c **** * Parameters:
 174:.\Generated_Source\PSoC5/LP.c **** *  None.
 175:.\Generated_Source\PSoC5/LP.c **** *
 176:.\Generated_Source\PSoC5/LP.c **** * Return:
 177:.\Generated_Source\PSoC5/LP.c **** *  None.
 178:.\Generated_Source\PSoC5/LP.c **** *
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 7


 179:.\Generated_Source\PSoC5/LP.c **** * Global Variables:
 180:.\Generated_Source\PSoC5/LP.c **** *  LP_rxAddressDetected - set to initial state (0).
 181:.\Generated_Source\PSoC5/LP.c **** *
 182:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
 183:.\Generated_Source\PSoC5/LP.c **** void LP_Enable(void) 
 184:.\Generated_Source\PSoC5/LP.c **** {
 165              		.loc 1 184 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 8
 168              		@ frame_needed = 1, uses_anonymous_args = 0
 169 0000 80B5     		push	{r7, lr}
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0002 82B0     		sub	sp, sp, #8
 174              		.cfi_def_cfa_offset 16
 175 0004 00AF     		add	r7, sp, #0
 176              		.cfi_def_cfa_register 7
 185:.\Generated_Source\PSoC5/LP.c ****     uint8 enableInterrupts;
 186:.\Generated_Source\PSoC5/LP.c ****     enableInterrupts = CyEnterCriticalSection();
 177              		.loc 1 186 0
 178 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 179 000a 0346     		mov	r3, r0
 180 000c FB71     		strb	r3, [r7, #7]
 187:.\Generated_Source\PSoC5/LP.c **** 
 188:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_ENABLED || LP_HD_ENABLED)
 189:.\Generated_Source\PSoC5/LP.c ****         /* RX Counter (Count7) Enable */
 190:.\Generated_Source\PSoC5/LP.c ****         LP_RXBITCTR_CONTROL_REG |= LP_CNTR_ENABLE;
 181              		.loc 1 190 0
 182 000e 114B     		ldr	r3, .L9
 183 0010 104A     		ldr	r2, .L9
 184 0012 1278     		ldrb	r2, [r2]
 185 0014 D2B2     		uxtb	r2, r2
 186 0016 42F02002 		orr	r2, r2, #32
 187 001a D2B2     		uxtb	r2, r2
 188 001c 1A70     		strb	r2, [r3]
 191:.\Generated_Source\PSoC5/LP.c **** 
 192:.\Generated_Source\PSoC5/LP.c ****         /* Enable the RX Interrupt */
 193:.\Generated_Source\PSoC5/LP.c ****         LP_RXSTATUS_ACTL_REG  |= LP_INT_ENABLE;
 189              		.loc 1 193 0
 190 001e 0E4B     		ldr	r3, .L9+4
 191 0020 0D4A     		ldr	r2, .L9+4
 192 0022 1278     		ldrb	r2, [r2]
 193 0024 D2B2     		uxtb	r2, r2
 194 0026 42F01002 		orr	r2, r2, #16
 195 002a D2B2     		uxtb	r2, r2
 196 002c 1A70     		strb	r2, [r3]
 194:.\Generated_Source\PSoC5/LP.c **** 
 195:.\Generated_Source\PSoC5/LP.c ****         #if (LP_RX_INTERRUPT_ENABLED)
 196:.\Generated_Source\PSoC5/LP.c ****             LP_EnableRxInt();
 197              		.loc 1 196 0
 198 002e 0B4B     		ldr	r3, .L9+8
 199 0030 0822     		movs	r2, #8
 200 0032 1A60     		str	r2, [r3]
 197:.\Generated_Source\PSoC5/LP.c **** 
 198:.\Generated_Source\PSoC5/LP.c ****             #if (LP_RXHW_ADDRESS_ENABLED)
 199:.\Generated_Source\PSoC5/LP.c ****                 LP_rxAddressDetected = 0u;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 8


 200:.\Generated_Source\PSoC5/LP.c ****             #endif /* (LP_RXHW_ADDRESS_ENABLED) */
 201:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_RX_INTERRUPT_ENABLED) */
 202:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_ENABLED || LP_HD_ENABLED) */
 203:.\Generated_Source\PSoC5/LP.c **** 
 204:.\Generated_Source\PSoC5/LP.c ****     #if(LP_TX_ENABLED)
 205:.\Generated_Source\PSoC5/LP.c ****         /* TX Counter (DP/Count7) Enable */
 206:.\Generated_Source\PSoC5/LP.c ****         #if(!LP_TXCLKGEN_DP)
 207:.\Generated_Source\PSoC5/LP.c ****             LP_TXBITCTR_CONTROL_REG |= LP_CNTR_ENABLE;
 208:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_TXCLKGEN_DP */
 209:.\Generated_Source\PSoC5/LP.c **** 
 210:.\Generated_Source\PSoC5/LP.c ****         /* Enable the TX Interrupt */
 211:.\Generated_Source\PSoC5/LP.c ****         LP_TXSTATUS_ACTL_REG |= LP_INT_ENABLE;
 201              		.loc 1 211 0
 202 0034 0A4B     		ldr	r3, .L9+12
 203 0036 0A4A     		ldr	r2, .L9+12
 204 0038 1278     		ldrb	r2, [r2]
 205 003a D2B2     		uxtb	r2, r2
 206 003c 42F01002 		orr	r2, r2, #16
 207 0040 D2B2     		uxtb	r2, r2
 208 0042 1A70     		strb	r2, [r3]
 212:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TX_INTERRUPT_ENABLED)
 213:.\Generated_Source\PSoC5/LP.c ****             LP_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:.\Generated_Source\PSoC5/LP.c ****             LP_EnableTxInt();
 215:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_INTERRUPT_ENABLED) */
 216:.\Generated_Source\PSoC5/LP.c ****      #endif /* (LP_TX_INTERRUPT_ENABLED) */
 217:.\Generated_Source\PSoC5/LP.c **** 
 218:.\Generated_Source\PSoC5/LP.c ****     #if (LP_INTERNAL_CLOCK_USED)
 219:.\Generated_Source\PSoC5/LP.c ****         LP_IntClock_Start();  /* Enable the clock */
 220:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_INTERNAL_CLOCK_USED) */
 221:.\Generated_Source\PSoC5/LP.c **** 
 222:.\Generated_Source\PSoC5/LP.c ****     CyExitCriticalSection(enableInterrupts);
 209              		.loc 1 222 0
 210 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 211 0046 1846     		mov	r0, r3
 212 0048 FFF7FEFF 		bl	CyExitCriticalSection
 223:.\Generated_Source\PSoC5/LP.c **** }
 213              		.loc 1 223 0
 214 004c 0837     		adds	r7, r7, #8
 215 004e BD46     		mov	sp, r7
 216              		@ sp needed
 217 0050 80BD     		pop	{r7, pc}
 218              	.L10:
 219 0052 00BF     		.align	2
 220              	.L9:
 221 0054 98650040 		.word	1073767832
 222 0058 9A640040 		.word	1073767578
 223 005c 00E100E0 		.word	-536813312
 224 0060 9B640040 		.word	1073767579
 225              		.cfi_endproc
 226              	.LFE2:
 227              		.size	LP_Enable, .-LP_Enable
 228              		.section	.text.LP_Stop,"ax",%progbits
 229              		.align	2
 230              		.global	LP_Stop
 231              		.thumb
 232              		.thumb_func
 233              		.type	LP_Stop, %function
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 9


 234              	LP_Stop:
 235              	.LFB3:
 224:.\Generated_Source\PSoC5/LP.c **** 
 225:.\Generated_Source\PSoC5/LP.c **** 
 226:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
 227:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_Stop
 228:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
 229:.\Generated_Source\PSoC5/LP.c **** *
 230:.\Generated_Source\PSoC5/LP.c **** * Summary:
 231:.\Generated_Source\PSoC5/LP.c **** *  Disables the UART operation.
 232:.\Generated_Source\PSoC5/LP.c **** *
 233:.\Generated_Source\PSoC5/LP.c **** * Parameters:
 234:.\Generated_Source\PSoC5/LP.c **** *  None.
 235:.\Generated_Source\PSoC5/LP.c **** *
 236:.\Generated_Source\PSoC5/LP.c **** * Return:
 237:.\Generated_Source\PSoC5/LP.c **** *  None.
 238:.\Generated_Source\PSoC5/LP.c **** *
 239:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
 240:.\Generated_Source\PSoC5/LP.c **** void LP_Stop(void) 
 241:.\Generated_Source\PSoC5/LP.c **** {
 236              		.loc 1 241 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 8
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240 0000 80B5     		push	{r7, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 82B0     		sub	sp, sp, #8
 245              		.cfi_def_cfa_offset 16
 246 0004 00AF     		add	r7, sp, #0
 247              		.cfi_def_cfa_register 7
 242:.\Generated_Source\PSoC5/LP.c ****     uint8 enableInterrupts;
 243:.\Generated_Source\PSoC5/LP.c ****     enableInterrupts = CyEnterCriticalSection();
 248              		.loc 1 243 0
 249 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 250 000a 0346     		mov	r3, r0
 251 000c FB71     		strb	r3, [r7, #7]
 244:.\Generated_Source\PSoC5/LP.c **** 
 245:.\Generated_Source\PSoC5/LP.c ****     /* Write Bit Counter Disable */
 246:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_ENABLED || LP_HD_ENABLED)
 247:.\Generated_Source\PSoC5/LP.c ****         LP_RXBITCTR_CONTROL_REG &= (uint8) ~LP_CNTR_ENABLE;
 252              		.loc 1 247 0
 253 000e 114B     		ldr	r3, .L12
 254 0010 104A     		ldr	r2, .L12
 255 0012 1278     		ldrb	r2, [r2]
 256 0014 D2B2     		uxtb	r2, r2
 257 0016 22F02002 		bic	r2, r2, #32
 258 001a D2B2     		uxtb	r2, r2
 259 001c 1A70     		strb	r2, [r3]
 248:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_ENABLED || LP_HD_ENABLED) */
 249:.\Generated_Source\PSoC5/LP.c **** 
 250:.\Generated_Source\PSoC5/LP.c ****     #if (LP_TX_ENABLED)
 251:.\Generated_Source\PSoC5/LP.c ****         #if(!LP_TXCLKGEN_DP)
 252:.\Generated_Source\PSoC5/LP.c ****             LP_TXBITCTR_CONTROL_REG &= (uint8) ~LP_CNTR_ENABLE;
 253:.\Generated_Source\PSoC5/LP.c ****         #endif /* (!LP_TXCLKGEN_DP) */
 254:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_TX_ENABLED) */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 10


 255:.\Generated_Source\PSoC5/LP.c **** 
 256:.\Generated_Source\PSoC5/LP.c ****     #if (LP_INTERNAL_CLOCK_USED)
 257:.\Generated_Source\PSoC5/LP.c ****         LP_IntClock_Stop();   /* Disable the clock */
 258:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_INTERNAL_CLOCK_USED) */
 259:.\Generated_Source\PSoC5/LP.c **** 
 260:.\Generated_Source\PSoC5/LP.c ****     /* Disable internal interrupt component */
 261:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_ENABLED || LP_HD_ENABLED)
 262:.\Generated_Source\PSoC5/LP.c ****         LP_RXSTATUS_ACTL_REG  &= (uint8) ~LP_INT_ENABLE;
 260              		.loc 1 262 0
 261 001e 0E4B     		ldr	r3, .L12+4
 262 0020 0D4A     		ldr	r2, .L12+4
 263 0022 1278     		ldrb	r2, [r2]
 264 0024 D2B2     		uxtb	r2, r2
 265 0026 22F01002 		bic	r2, r2, #16
 266 002a D2B2     		uxtb	r2, r2
 267 002c 1A70     		strb	r2, [r3]
 263:.\Generated_Source\PSoC5/LP.c **** 
 264:.\Generated_Source\PSoC5/LP.c ****         #if (LP_RX_INTERRUPT_ENABLED)
 265:.\Generated_Source\PSoC5/LP.c ****             LP_DisableRxInt();
 268              		.loc 1 265 0
 269 002e 0B4B     		ldr	r3, .L12+8
 270 0030 0822     		movs	r2, #8
 271 0032 1A60     		str	r2, [r3]
 266:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_RX_INTERRUPT_ENABLED) */
 267:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_ENABLED || LP_HD_ENABLED) */
 268:.\Generated_Source\PSoC5/LP.c **** 
 269:.\Generated_Source\PSoC5/LP.c ****     #if (LP_TX_ENABLED)
 270:.\Generated_Source\PSoC5/LP.c ****         LP_TXSTATUS_ACTL_REG &= (uint8) ~LP_INT_ENABLE;
 272              		.loc 1 270 0
 273 0034 0A4B     		ldr	r3, .L12+12
 274 0036 0A4A     		ldr	r2, .L12+12
 275 0038 1278     		ldrb	r2, [r2]
 276 003a D2B2     		uxtb	r2, r2
 277 003c 22F01002 		bic	r2, r2, #16
 278 0040 D2B2     		uxtb	r2, r2
 279 0042 1A70     		strb	r2, [r3]
 271:.\Generated_Source\PSoC5/LP.c **** 
 272:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TX_INTERRUPT_ENABLED)
 273:.\Generated_Source\PSoC5/LP.c ****             LP_DisableTxInt();
 274:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_INTERRUPT_ENABLED) */
 275:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_TX_ENABLED) */
 276:.\Generated_Source\PSoC5/LP.c **** 
 277:.\Generated_Source\PSoC5/LP.c ****     CyExitCriticalSection(enableInterrupts);
 280              		.loc 1 277 0
 281 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282 0046 1846     		mov	r0, r3
 283 0048 FFF7FEFF 		bl	CyExitCriticalSection
 278:.\Generated_Source\PSoC5/LP.c **** }
 284              		.loc 1 278 0
 285 004c 0837     		adds	r7, r7, #8
 286 004e BD46     		mov	sp, r7
 287              		@ sp needed
 288 0050 80BD     		pop	{r7, pc}
 289              	.L13:
 290 0052 00BF     		.align	2
 291              	.L12:
 292 0054 98650040 		.word	1073767832
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 11


 293 0058 9A640040 		.word	1073767578
 294 005c 80E100E0 		.word	-536813184
 295 0060 9B640040 		.word	1073767579
 296              		.cfi_endproc
 297              	.LFE3:
 298              		.size	LP_Stop, .-LP_Stop
 299              		.section	.text.LP_ReadControlRegister,"ax",%progbits
 300              		.align	2
 301              		.global	LP_ReadControlRegister
 302              		.thumb
 303              		.thumb_func
 304              		.type	LP_ReadControlRegister, %function
 305              	LP_ReadControlRegister:
 306              	.LFB4:
 279:.\Generated_Source\PSoC5/LP.c **** 
 280:.\Generated_Source\PSoC5/LP.c **** 
 281:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_ReadControlRegister
 283:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
 284:.\Generated_Source\PSoC5/LP.c **** *
 285:.\Generated_Source\PSoC5/LP.c **** * Summary:
 286:.\Generated_Source\PSoC5/LP.c **** *  Returns the current value of the control register.
 287:.\Generated_Source\PSoC5/LP.c **** *
 288:.\Generated_Source\PSoC5/LP.c **** * Parameters:
 289:.\Generated_Source\PSoC5/LP.c **** *  None.
 290:.\Generated_Source\PSoC5/LP.c **** *
 291:.\Generated_Source\PSoC5/LP.c **** * Return:
 292:.\Generated_Source\PSoC5/LP.c **** *  Contents of the control register.
 293:.\Generated_Source\PSoC5/LP.c **** *
 294:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC5/LP.c **** uint8 LP_ReadControlRegister(void) 
 296:.\Generated_Source\PSoC5/LP.c **** {
 307              		.loc 1 296 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              		.cfi_def_cfa_offset 4
 314              		.cfi_offset 7, -4
 315 0002 00AF     		add	r7, sp, #0
 316              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC5/LP.c ****     #if (LP_CONTROL_REG_REMOVED)
 298:.\Generated_Source\PSoC5/LP.c ****         return(0u);
 317              		.loc 1 298 0
 318 0004 0023     		movs	r3, #0
 299:.\Generated_Source\PSoC5/LP.c ****     #else
 300:.\Generated_Source\PSoC5/LP.c ****         return(LP_CONTROL_REG);
 301:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_CONTROL_REG_REMOVED) */
 302:.\Generated_Source\PSoC5/LP.c **** }
 319              		.loc 1 302 0
 320 0006 1846     		mov	r0, r3
 321 0008 BD46     		mov	sp, r7
 322              		@ sp needed
 323 000a 5DF8047B 		ldr	r7, [sp], #4
 324 000e 7047     		bx	lr
 325              		.cfi_endproc
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 12


 326              	.LFE4:
 327              		.size	LP_ReadControlRegister, .-LP_ReadControlRegister
 328              		.section	.text.LP_WriteControlRegister,"ax",%progbits
 329              		.align	2
 330              		.global	LP_WriteControlRegister
 331              		.thumb
 332              		.thumb_func
 333              		.type	LP_WriteControlRegister, %function
 334              	LP_WriteControlRegister:
 335              	.LFB5:
 303:.\Generated_Source\PSoC5/LP.c **** 
 304:.\Generated_Source\PSoC5/LP.c **** 
 305:.\Generated_Source\PSoC5/LP.c **** /*******************************************************************************
 306:.\Generated_Source\PSoC5/LP.c **** * Function Name: LP_WriteControlRegister
 307:.\Generated_Source\PSoC5/LP.c **** ********************************************************************************
 308:.\Generated_Source\PSoC5/LP.c **** *
 309:.\Generated_Source\PSoC5/LP.c **** * Summary:
 310:.\Generated_Source\PSoC5/LP.c **** *  Writes an 8-bit value into the control register
 311:.\Generated_Source\PSoC5/LP.c **** *
 312:.\Generated_Source\PSoC5/LP.c **** * Parameters:
 313:.\Generated_Source\PSoC5/LP.c **** *  control:  control register value
 314:.\Generated_Source\PSoC5/LP.c **** *
 315:.\Generated_Source\PSoC5/LP.c **** * Return:
 316:.\Generated_Source\PSoC5/LP.c **** *  None.
 317:.\Generated_Source\PSoC5/LP.c **** *
 318:.\Generated_Source\PSoC5/LP.c **** *******************************************************************************/
 319:.\Generated_Source\PSoC5/LP.c **** void  LP_WriteControlRegister(uint8 control) 
 320:.\Generated_Source\PSoC5/LP.c **** {
 336              		.loc 1 320 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 8
 339              		@ frame_needed = 1, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341 0000 80B4     		push	{r7}
 342              		.cfi_def_cfa_offset 4
 343              		.cfi_offset 7, -4
 344 0002 83B0     		sub	sp, sp, #12
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              		.cfi_def_cfa_register 7
 348 0006 0346     		mov	r3, r0
 349 0008 FB71     		strb	r3, [r7, #7]
 321:.\Generated_Source\PSoC5/LP.c ****     #if (LP_CONTROL_REG_REMOVED)
 322:.\Generated_Source\PSoC5/LP.c ****         if(0u != control)
 323:.\Generated_Source\PSoC5/LP.c ****         {
 324:.\Generated_Source\PSoC5/LP.c ****             /* Suppress compiler warning */
 325:.\Generated_Source\PSoC5/LP.c ****         }
 326:.\Generated_Source\PSoC5/LP.c ****     #else
 327:.\Generated_Source\PSoC5/LP.c ****        LP_CONTROL_REG = control;
 328:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_CONTROL_REG_REMOVED) */
 329:.\Generated_Source\PSoC5/LP.c **** }
 350              		.loc 1 329 0
 351 000a 0C37     		adds	r7, r7, #12
 352 000c BD46     		mov	sp, r7
 353              		@ sp needed
 354 000e 5DF8047B 		ldr	r7, [sp], #4
 355 0012 7047     		bx	lr
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 13


 356              		.cfi_endproc
 357              	.LFE5:
 358              		.size	LP_WriteControlRegister, .-LP_WriteControlRegister
 359              		.section	.text.LP_SetRxInterruptMode,"ax",%progbits
 360              		.align	2
 361              		.global	LP_SetRxInterruptMode
 362              		.thumb
 363              		.thumb_func
 364              		.type	LP_SetRxInterruptMode, %function
 365              	LP_SetRxInterruptMode:
 366              	.LFB6:
 330:.\Generated_Source\PSoC5/LP.c **** 
 331:.\Generated_Source\PSoC5/LP.c **** 
 332:.\Generated_Source\PSoC5/LP.c **** #if(LP_RX_ENABLED || LP_HD_ENABLED)
 333:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 334:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetRxInterruptMode
 335:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 336:.\Generated_Source\PSoC5/LP.c ****     *
 337:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 338:.\Generated_Source\PSoC5/LP.c ****     *  Configures the RX interrupt sources enabled.
 339:.\Generated_Source\PSoC5/LP.c ****     *
 340:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 341:.\Generated_Source\PSoC5/LP.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:.\Generated_Source\PSoC5/LP.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:.\Generated_Source\PSoC5/LP.c ****     *  combination of status register bit-masks shown below:
 344:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_BREAK            Interrupt on break.
 348:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_OVERRUN          Interrupt on overrun error.
 349:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:.\Generated_Source\PSoC5/LP.c ****     *      LP_RX_STS_MRKSPC           Interrupt on address detect.
 351:.\Generated_Source\PSoC5/LP.c ****     *
 352:.\Generated_Source\PSoC5/LP.c ****     * Return:
 353:.\Generated_Source\PSoC5/LP.c ****     *  None.
 354:.\Generated_Source\PSoC5/LP.c ****     *
 355:.\Generated_Source\PSoC5/LP.c ****     * Theory:
 356:.\Generated_Source\PSoC5/LP.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:.\Generated_Source\PSoC5/LP.c ****     *
 358:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 359:.\Generated_Source\PSoC5/LP.c ****     void LP_SetRxInterruptMode(uint8 intSrc) 
 360:.\Generated_Source\PSoC5/LP.c ****     {
 367              		.loc 1 360 0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 8
 370              		@ frame_needed = 1, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 372 0000 80B4     		push	{r7}
 373              		.cfi_def_cfa_offset 4
 374              		.cfi_offset 7, -4
 375 0002 83B0     		sub	sp, sp, #12
 376              		.cfi_def_cfa_offset 16
 377 0004 00AF     		add	r7, sp, #0
 378              		.cfi_def_cfa_register 7
 379 0006 0346     		mov	r3, r0
 380 0008 FB71     		strb	r3, [r7, #7]
 361:.\Generated_Source\PSoC5/LP.c ****         LP_RXSTATUS_MASK_REG  = intSrc;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 14


 381              		.loc 1 361 0
 382 000a 044B     		ldr	r3, .L18
 383 000c FA79     		ldrb	r2, [r7, #7]
 384 000e 1A70     		strb	r2, [r3]
 362:.\Generated_Source\PSoC5/LP.c ****     }
 385              		.loc 1 362 0
 386 0010 0C37     		adds	r7, r7, #12
 387 0012 BD46     		mov	sp, r7
 388              		@ sp needed
 389 0014 5DF8047B 		ldr	r7, [sp], #4
 390 0018 7047     		bx	lr
 391              	.L19:
 392 001a 00BF     		.align	2
 393              	.L18:
 394 001c 8A640040 		.word	1073767562
 395              		.cfi_endproc
 396              	.LFE6:
 397              		.size	LP_SetRxInterruptMode, .-LP_SetRxInterruptMode
 398              		.section	.text.LP_ReadRxData,"ax",%progbits
 399              		.align	2
 400              		.global	LP_ReadRxData
 401              		.thumb
 402              		.thumb_func
 403              		.type	LP_ReadRxData, %function
 404              	LP_ReadRxData:
 405              	.LFB7:
 363:.\Generated_Source\PSoC5/LP.c **** 
 364:.\Generated_Source\PSoC5/LP.c **** 
 365:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 366:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_ReadRxData
 367:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 368:.\Generated_Source\PSoC5/LP.c ****     *
 369:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 370:.\Generated_Source\PSoC5/LP.c ****     *  Returns the next byte of received data. This function returns data without
 371:.\Generated_Source\PSoC5/LP.c ****     *  checking the status. You must check the status separately.
 372:.\Generated_Source\PSoC5/LP.c ****     *
 373:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 374:.\Generated_Source\PSoC5/LP.c ****     *  None.
 375:.\Generated_Source\PSoC5/LP.c ****     *
 376:.\Generated_Source\PSoC5/LP.c ****     * Return:
 377:.\Generated_Source\PSoC5/LP.c ****     *  Received data from RX register
 378:.\Generated_Source\PSoC5/LP.c ****     *
 379:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 380:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBuffer - RAM buffer pointer for save received data.
 381:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferWrite - cyclic index for write to rxBuffer,
 382:.\Generated_Source\PSoC5/LP.c ****     *     checked to identify new data.
 383:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferRead - cyclic index for read from rxBuffer,
 384:.\Generated_Source\PSoC5/LP.c ****     *     incremented after each byte has been read from buffer.
 385:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferLoopDetect - cleared if loop condition was detected
 386:.\Generated_Source\PSoC5/LP.c ****     *     in RX ISR.
 387:.\Generated_Source\PSoC5/LP.c ****     *
 388:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 389:.\Generated_Source\PSoC5/LP.c ****     *  No.
 390:.\Generated_Source\PSoC5/LP.c ****     *
 391:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 392:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_ReadRxData(void) 
 393:.\Generated_Source\PSoC5/LP.c ****     {
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 15


 406              		.loc 1 393 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 8
 409              		@ frame_needed = 1, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411 0000 80B4     		push	{r7}
 412              		.cfi_def_cfa_offset 4
 413              		.cfi_offset 7, -4
 414 0002 83B0     		sub	sp, sp, #12
 415              		.cfi_def_cfa_offset 16
 416 0004 00AF     		add	r7, sp, #0
 417              		.cfi_def_cfa_register 7
 394:.\Generated_Source\PSoC5/LP.c ****         uint8 rxData;
 395:.\Generated_Source\PSoC5/LP.c **** 
 396:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 397:.\Generated_Source\PSoC5/LP.c **** 
 398:.\Generated_Source\PSoC5/LP.c ****         uint8 locRxBufferRead;
 399:.\Generated_Source\PSoC5/LP.c ****         uint8 locRxBufferWrite;
 400:.\Generated_Source\PSoC5/LP.c **** 
 401:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt */
 402:.\Generated_Source\PSoC5/LP.c ****         LP_DisableRxInt();
 418              		.loc 1 402 0
 419 0006 1C4B     		ldr	r3, .L27
 420 0008 0822     		movs	r2, #8
 421 000a 1A60     		str	r2, [r3]
 403:.\Generated_Source\PSoC5/LP.c **** 
 404:.\Generated_Source\PSoC5/LP.c ****         locRxBufferRead  = LP_rxBufferRead;
 422              		.loc 1 404 0
 423 000c 1B4B     		ldr	r3, .L27+4
 424 000e 1B78     		ldrb	r3, [r3]
 425 0010 BB71     		strb	r3, [r7, #6]
 405:.\Generated_Source\PSoC5/LP.c ****         locRxBufferWrite = LP_rxBufferWrite;
 426              		.loc 1 405 0
 427 0012 1B4B     		ldr	r3, .L27+8
 428 0014 1B78     		ldrb	r3, [r3]
 429 0016 7B71     		strb	r3, [r7, #5]
 406:.\Generated_Source\PSoC5/LP.c **** 
 407:.\Generated_Source\PSoC5/LP.c ****         if( (LP_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 430              		.loc 1 407 0
 431 0018 1A4B     		ldr	r3, .L27+12
 432 001a 1B78     		ldrb	r3, [r3]
 433 001c DBB2     		uxtb	r3, r3
 434 001e 002B     		cmp	r3, #0
 435 0020 03D1     		bne	.L21
 436              		.loc 1 407 0 is_stmt 0 discriminator 1
 437 0022 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 438 0024 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 439 0026 9A42     		cmp	r2, r3
 440 0028 18D0     		beq	.L22
 441              	.L21:
 408:.\Generated_Source\PSoC5/LP.c ****         {
 409:.\Generated_Source\PSoC5/LP.c ****             rxData = LP_rxBuffer[locRxBufferRead];
 442              		.loc 1 409 0 is_stmt 1
 443 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 444 002c 164A     		ldr	r2, .L27+16
 445 002e D35C     		ldrb	r3, [r2, r3]
 446 0030 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 16


 410:.\Generated_Source\PSoC5/LP.c ****             locRxBufferRead++;
 447              		.loc 1 410 0
 448 0032 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 449 0034 0133     		adds	r3, r3, #1
 450 0036 BB71     		strb	r3, [r7, #6]
 411:.\Generated_Source\PSoC5/LP.c **** 
 412:.\Generated_Source\PSoC5/LP.c ****             if(locRxBufferRead >= LP_RX_BUFFER_SIZE)
 451              		.loc 1 412 0
 452 0038 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 453 003a C72B     		cmp	r3, #199
 454 003c 01D9     		bls	.L23
 413:.\Generated_Source\PSoC5/LP.c ****             {
 414:.\Generated_Source\PSoC5/LP.c ****                 locRxBufferRead = 0u;
 455              		.loc 1 414 0
 456 003e 0023     		movs	r3, #0
 457 0040 BB71     		strb	r3, [r7, #6]
 458              	.L23:
 415:.\Generated_Source\PSoC5/LP.c ****             }
 416:.\Generated_Source\PSoC5/LP.c ****             /* Update the real pointer */
 417:.\Generated_Source\PSoC5/LP.c ****             LP_rxBufferRead = locRxBufferRead;
 459              		.loc 1 417 0
 460 0042 0E4B     		ldr	r3, .L27+4
 461 0044 BA79     		ldrb	r2, [r7, #6]
 462 0046 1A70     		strb	r2, [r3]
 418:.\Generated_Source\PSoC5/LP.c **** 
 419:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 463              		.loc 1 419 0
 464 0048 0E4B     		ldr	r3, .L27+12
 465 004a 1B78     		ldrb	r3, [r3]
 466 004c DBB2     		uxtb	r3, r3
 467 004e 002B     		cmp	r3, #0
 468 0050 03D0     		beq	.L24
 420:.\Generated_Source\PSoC5/LP.c ****             {
 421:.\Generated_Source\PSoC5/LP.c ****                 LP_rxBufferLoopDetect = 0u;
 469              		.loc 1 421 0
 470 0052 0C4B     		ldr	r3, .L27+12
 471 0054 0022     		movs	r2, #0
 472 0056 1A70     		strb	r2, [r3]
 419:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 473              		.loc 1 419 0
 474 0058 03E0     		b	.L25
 475              	.L24:
 419:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 476              		.loc 1 419 0 is_stmt 0 discriminator 1
 477 005a 02E0     		b	.L25
 478              	.L22:
 422:.\Generated_Source\PSoC5/LP.c ****                 #if ((LP_RX_INTERRUPT_ENABLED) && (LP_FLOW_CONTROL != 0u))
 423:.\Generated_Source\PSoC5/LP.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:.\Generated_Source\PSoC5/LP.c ****                     #if( LP_HD_ENABLED )
 425:.\Generated_Source\PSoC5/LP.c ****                         if((LP_CONTROL_REG & LP_CTRL_HD_SEND) == 0u)
 426:.\Generated_Source\PSoC5/LP.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:.\Generated_Source\PSoC5/LP.c ****                             *  configuration set, otherwise
 428:.\Generated_Source\PSoC5/LP.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:.\Generated_Source\PSoC5/LP.c ****                             */
 430:.\Generated_Source\PSoC5/LP.c ****                             LP_RXSTATUS_MASK_REG  |= LP_RX_STS_FIFO_NOTEMPTY;
 431:.\Generated_Source\PSoC5/LP.c ****                         }
 432:.\Generated_Source\PSoC5/LP.c ****                     #else
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 17


 433:.\Generated_Source\PSoC5/LP.c ****                         LP_RXSTATUS_MASK_REG  |= LP_RX_STS_FIFO_NOTEMPTY;
 434:.\Generated_Source\PSoC5/LP.c ****                     #endif /* end LP_HD_ENABLED */
 435:.\Generated_Source\PSoC5/LP.c ****                 #endif /* ((LP_RX_INTERRUPT_ENABLED) && (LP_FLOW_CONTROL != 0u)) */
 436:.\Generated_Source\PSoC5/LP.c ****             }
 437:.\Generated_Source\PSoC5/LP.c ****         }
 438:.\Generated_Source\PSoC5/LP.c ****         else
 439:.\Generated_Source\PSoC5/LP.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:.\Generated_Source\PSoC5/LP.c ****             rxData = LP_RXDATA_REG;
 479              		.loc 1 440 0 is_stmt 1
 480 005c 0B4B     		ldr	r3, .L27+20
 481 005e 1B78     		ldrb	r3, [r3]
 482 0060 FB71     		strb	r3, [r7, #7]
 483              	.L25:
 441:.\Generated_Source\PSoC5/LP.c ****         }
 442:.\Generated_Source\PSoC5/LP.c **** 
 443:.\Generated_Source\PSoC5/LP.c ****         LP_EnableRxInt();
 484              		.loc 1 443 0
 485 0062 0B4B     		ldr	r3, .L27+24
 486 0064 0822     		movs	r2, #8
 487 0066 1A60     		str	r2, [r3]
 444:.\Generated_Source\PSoC5/LP.c **** 
 445:.\Generated_Source\PSoC5/LP.c ****     #else
 446:.\Generated_Source\PSoC5/LP.c **** 
 447:.\Generated_Source\PSoC5/LP.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:.\Generated_Source\PSoC5/LP.c ****         rxData = LP_RXDATA_REG;
 449:.\Generated_Source\PSoC5/LP.c **** 
 450:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_INTERRUPT_ENABLED) */
 451:.\Generated_Source\PSoC5/LP.c **** 
 452:.\Generated_Source\PSoC5/LP.c ****         return(rxData);
 488              		.loc 1 452 0
 489 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453:.\Generated_Source\PSoC5/LP.c ****     }
 490              		.loc 1 453 0
 491 006a 1846     		mov	r0, r3
 492 006c 0C37     		adds	r7, r7, #12
 493 006e BD46     		mov	sp, r7
 494              		@ sp needed
 495 0070 5DF8047B 		ldr	r7, [sp], #4
 496 0074 7047     		bx	lr
 497              	.L28:
 498 0076 00BF     		.align	2
 499              	.L27:
 500 0078 80E100E0 		.word	-536813184
 501 007c 00000000 		.word	LP_rxBufferRead
 502 0080 00000000 		.word	LP_rxBufferWrite
 503 0084 00000000 		.word	LP_rxBufferLoopDetect
 504 0088 00000000 		.word	LP_rxBuffer
 505 008c 49650040 		.word	1073767753
 506 0090 00E100E0 		.word	-536813312
 507              		.cfi_endproc
 508              	.LFE7:
 509              		.size	LP_ReadRxData, .-LP_ReadRxData
 510              		.section	.text.LP_ReadRxStatus,"ax",%progbits
 511              		.align	2
 512              		.global	LP_ReadRxStatus
 513              		.thumb
 514              		.thumb_func
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 18


 515              		.type	LP_ReadRxStatus, %function
 516              	LP_ReadRxStatus:
 517              	.LFB8:
 454:.\Generated_Source\PSoC5/LP.c **** 
 455:.\Generated_Source\PSoC5/LP.c **** 
 456:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 457:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_ReadRxStatus
 458:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 459:.\Generated_Source\PSoC5/LP.c ****     *
 460:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 461:.\Generated_Source\PSoC5/LP.c ****     *  Returns the current state of the receiver status register and the software
 462:.\Generated_Source\PSoC5/LP.c ****     *  buffer overflow status.
 463:.\Generated_Source\PSoC5/LP.c ****     *
 464:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 465:.\Generated_Source\PSoC5/LP.c ****     *  None.
 466:.\Generated_Source\PSoC5/LP.c ****     *
 467:.\Generated_Source\PSoC5/LP.c ****     * Return:
 468:.\Generated_Source\PSoC5/LP.c ****     *  Current state of the status register.
 469:.\Generated_Source\PSoC5/LP.c ****     *
 470:.\Generated_Source\PSoC5/LP.c ****     * Side Effect:
 471:.\Generated_Source\PSoC5/LP.c ****     *  All status register bits are clear-on-read except
 472:.\Generated_Source\PSoC5/LP.c ****     *  LP_RX_STS_FIFO_NOTEMPTY.
 473:.\Generated_Source\PSoC5/LP.c ****     *  LP_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:.\Generated_Source\PSoC5/LP.c ****     *  register read.
 475:.\Generated_Source\PSoC5/LP.c ****     *
 476:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 477:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferOverflow - used to indicate overload condition.
 478:.\Generated_Source\PSoC5/LP.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:.\Generated_Source\PSoC5/LP.c ****     *   LP_rxBufferRead to write new data. This condition returned
 480:.\Generated_Source\PSoC5/LP.c ****     *   and cleared to zero by this API as an
 481:.\Generated_Source\PSoC5/LP.c ****     *   LP_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:.\Generated_Source\PSoC5/LP.c ****     *   bits.
 483:.\Generated_Source\PSoC5/LP.c ****     *
 484:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 485:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_ReadRxStatus(void) 
 486:.\Generated_Source\PSoC5/LP.c ****     {
 518              		.loc 1 486 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522              		@ link register save eliminated.
 523 0000 80B4     		push	{r7}
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 83B0     		sub	sp, sp, #12
 527              		.cfi_def_cfa_offset 16
 528 0004 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 487:.\Generated_Source\PSoC5/LP.c ****         uint8 status;
 488:.\Generated_Source\PSoC5/LP.c **** 
 489:.\Generated_Source\PSoC5/LP.c ****         status = LP_RXSTATUS_REG & LP_RX_HW_MASK;
 530              		.loc 1 489 0
 531 0006 0C4B     		ldr	r3, .L32
 532 0008 1B78     		ldrb	r3, [r3]
 533 000a DBB2     		uxtb	r3, r3
 534 000c 03F07F03 		and	r3, r3, #127
 535 0010 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 19


 490:.\Generated_Source\PSoC5/LP.c **** 
 491:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 492:.\Generated_Source\PSoC5/LP.c ****         if(LP_rxBufferOverflow != 0u)
 536              		.loc 1 492 0
 537 0012 0A4B     		ldr	r3, .L32+4
 538 0014 1B78     		ldrb	r3, [r3]
 539 0016 DBB2     		uxtb	r3, r3
 540 0018 002B     		cmp	r3, #0
 541 001a 06D0     		beq	.L30
 493:.\Generated_Source\PSoC5/LP.c ****         {
 494:.\Generated_Source\PSoC5/LP.c ****             status |= LP_RX_STS_SOFT_BUFF_OVER;
 542              		.loc 1 494 0
 543 001c FB79     		ldrb	r3, [r7, #7]
 544 001e 63F07F03 		orn	r3, r3, #127
 545 0022 FB71     		strb	r3, [r7, #7]
 495:.\Generated_Source\PSoC5/LP.c ****             LP_rxBufferOverflow = 0u;
 546              		.loc 1 495 0
 547 0024 054B     		ldr	r3, .L32+4
 548 0026 0022     		movs	r2, #0
 549 0028 1A70     		strb	r2, [r3]
 550              	.L30:
 496:.\Generated_Source\PSoC5/LP.c ****         }
 497:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_INTERRUPT_ENABLED) */
 498:.\Generated_Source\PSoC5/LP.c **** 
 499:.\Generated_Source\PSoC5/LP.c ****         return(status);
 551              		.loc 1 499 0
 552 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 500:.\Generated_Source\PSoC5/LP.c ****     }
 553              		.loc 1 500 0
 554 002c 1846     		mov	r0, r3
 555 002e 0C37     		adds	r7, r7, #12
 556 0030 BD46     		mov	sp, r7
 557              		@ sp needed
 558 0032 5DF8047B 		ldr	r7, [sp], #4
 559 0036 7047     		bx	lr
 560              	.L33:
 561              		.align	2
 562              	.L32:
 563 0038 6A640040 		.word	1073767530
 564 003c 00000000 		.word	LP_rxBufferOverflow
 565              		.cfi_endproc
 566              	.LFE8:
 567              		.size	LP_ReadRxStatus, .-LP_ReadRxStatus
 568              		.section	.text.LP_GetChar,"ax",%progbits
 569              		.align	2
 570              		.global	LP_GetChar
 571              		.thumb
 572              		.thumb_func
 573              		.type	LP_GetChar, %function
 574              	LP_GetChar:
 575              	.LFB9:
 501:.\Generated_Source\PSoC5/LP.c **** 
 502:.\Generated_Source\PSoC5/LP.c **** 
 503:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 504:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_GetChar
 505:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 506:.\Generated_Source\PSoC5/LP.c ****     *
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 20


 507:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 508:.\Generated_Source\PSoC5/LP.c ****     *  Returns the last received byte of data. LP_GetChar() is
 509:.\Generated_Source\PSoC5/LP.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:.\Generated_Source\PSoC5/LP.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:.\Generated_Source\PSoC5/LP.c ****     *
 512:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 513:.\Generated_Source\PSoC5/LP.c ****     *  None.
 514:.\Generated_Source\PSoC5/LP.c ****     *
 515:.\Generated_Source\PSoC5/LP.c ****     * Return:
 516:.\Generated_Source\PSoC5/LP.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:.\Generated_Source\PSoC5/LP.c ****     *  A returned zero signifies an error condition or no data available.
 518:.\Generated_Source\PSoC5/LP.c ****     *
 519:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 520:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBuffer - RAM buffer pointer for save received data.
 521:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferWrite - cyclic index for write to rxBuffer,
 522:.\Generated_Source\PSoC5/LP.c ****     *     checked to identify new data.
 523:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferRead - cyclic index for read from rxBuffer,
 524:.\Generated_Source\PSoC5/LP.c ****     *     incremented after each byte has been read from buffer.
 525:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferLoopDetect - cleared if loop condition was detected
 526:.\Generated_Source\PSoC5/LP.c ****     *     in RX ISR.
 527:.\Generated_Source\PSoC5/LP.c ****     *
 528:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 529:.\Generated_Source\PSoC5/LP.c ****     *  No.
 530:.\Generated_Source\PSoC5/LP.c ****     *
 531:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 532:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_GetChar(void) 
 533:.\Generated_Source\PSoC5/LP.c ****     {
 576              		.loc 1 533 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 8
 579              		@ frame_needed = 1, uses_anonymous_args = 0
 580              		@ link register save eliminated.
 581 0000 80B4     		push	{r7}
 582              		.cfi_def_cfa_offset 4
 583              		.cfi_offset 7, -4
 584 0002 83B0     		sub	sp, sp, #12
 585              		.cfi_def_cfa_offset 16
 586 0004 00AF     		add	r7, sp, #0
 587              		.cfi_def_cfa_register 7
 534:.\Generated_Source\PSoC5/LP.c ****         uint8 rxData = 0u;
 588              		.loc 1 534 0
 589 0006 0023     		movs	r3, #0
 590 0008 FB71     		strb	r3, [r7, #7]
 535:.\Generated_Source\PSoC5/LP.c ****         uint8 rxStatus;
 536:.\Generated_Source\PSoC5/LP.c **** 
 537:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 538:.\Generated_Source\PSoC5/LP.c ****         uint8 locRxBufferRead;
 539:.\Generated_Source\PSoC5/LP.c ****         uint8 locRxBufferWrite;
 540:.\Generated_Source\PSoC5/LP.c **** 
 541:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt */
 542:.\Generated_Source\PSoC5/LP.c ****         LP_DisableRxInt();
 591              		.loc 1 542 0
 592 000a 234B     		ldr	r3, .L41
 593 000c 0822     		movs	r2, #8
 594 000e 1A60     		str	r2, [r3]
 543:.\Generated_Source\PSoC5/LP.c **** 
 544:.\Generated_Source\PSoC5/LP.c ****         locRxBufferRead  = LP_rxBufferRead;
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 21


 595              		.loc 1 544 0
 596 0010 224B     		ldr	r3, .L41+4
 597 0012 1B78     		ldrb	r3, [r3]
 598 0014 BB71     		strb	r3, [r7, #6]
 545:.\Generated_Source\PSoC5/LP.c ****         locRxBufferWrite = LP_rxBufferWrite;
 599              		.loc 1 545 0
 600 0016 224B     		ldr	r3, .L41+8
 601 0018 1B78     		ldrb	r3, [r3]
 602 001a 7B71     		strb	r3, [r7, #5]
 546:.\Generated_Source\PSoC5/LP.c **** 
 547:.\Generated_Source\PSoC5/LP.c ****         if( (LP_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 603              		.loc 1 547 0
 604 001c 214B     		ldr	r3, .L41+12
 605 001e 1B78     		ldrb	r3, [r3]
 606 0020 DBB2     		uxtb	r3, r3
 607 0022 002B     		cmp	r3, #0
 608 0024 03D1     		bne	.L35
 609              		.loc 1 547 0 is_stmt 0 discriminator 1
 610 0026 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 611 0028 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 612 002a 9A42     		cmp	r2, r3
 613 002c 18D0     		beq	.L36
 614              	.L35:
 548:.\Generated_Source\PSoC5/LP.c ****         {
 549:.\Generated_Source\PSoC5/LP.c ****             rxData = LP_rxBuffer[locRxBufferRead];
 615              		.loc 1 549 0 is_stmt 1
 616 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 617 0030 1D4A     		ldr	r2, .L41+16
 618 0032 D35C     		ldrb	r3, [r2, r3]
 619 0034 FB71     		strb	r3, [r7, #7]
 550:.\Generated_Source\PSoC5/LP.c ****             locRxBufferRead++;
 620              		.loc 1 550 0
 621 0036 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 622 0038 0133     		adds	r3, r3, #1
 623 003a BB71     		strb	r3, [r7, #6]
 551:.\Generated_Source\PSoC5/LP.c ****             if(locRxBufferRead >= LP_RX_BUFFER_SIZE)
 624              		.loc 1 551 0
 625 003c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 626 003e C72B     		cmp	r3, #199
 627 0040 01D9     		bls	.L37
 552:.\Generated_Source\PSoC5/LP.c ****             {
 553:.\Generated_Source\PSoC5/LP.c ****                 locRxBufferRead = 0u;
 628              		.loc 1 553 0
 629 0042 0023     		movs	r3, #0
 630 0044 BB71     		strb	r3, [r7, #6]
 631              	.L37:
 554:.\Generated_Source\PSoC5/LP.c ****             }
 555:.\Generated_Source\PSoC5/LP.c ****             /* Update the real pointer */
 556:.\Generated_Source\PSoC5/LP.c ****             LP_rxBufferRead = locRxBufferRead;
 632              		.loc 1 556 0
 633 0046 154B     		ldr	r3, .L41+4
 634 0048 BA79     		ldrb	r2, [r7, #6]
 635 004a 1A70     		strb	r2, [r3]
 557:.\Generated_Source\PSoC5/LP.c **** 
 558:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 636              		.loc 1 558 0
 637 004c 154B     		ldr	r3, .L41+12
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 22


 638 004e 1B78     		ldrb	r3, [r3]
 639 0050 DBB2     		uxtb	r3, r3
 640 0052 002B     		cmp	r3, #0
 641 0054 03D0     		beq	.L38
 559:.\Generated_Source\PSoC5/LP.c ****             {
 560:.\Generated_Source\PSoC5/LP.c ****                 LP_rxBufferLoopDetect = 0u;
 642              		.loc 1 560 0
 643 0056 134B     		ldr	r3, .L41+12
 644 0058 0022     		movs	r2, #0
 645 005a 1A70     		strb	r2, [r3]
 558:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 646              		.loc 1 558 0
 647 005c 12E0     		b	.L39
 648              	.L38:
 558:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 649              		.loc 1 558 0 is_stmt 0 discriminator 1
 650 005e 11E0     		b	.L39
 651              	.L36:
 561:.\Generated_Source\PSoC5/LP.c ****                 #if( (LP_RX_INTERRUPT_ENABLED) && (LP_FLOW_CONTROL != 0u) )
 562:.\Generated_Source\PSoC5/LP.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:.\Generated_Source\PSoC5/LP.c ****                     #if( LP_HD_ENABLED )
 564:.\Generated_Source\PSoC5/LP.c ****                         if((LP_CONTROL_REG & LP_CTRL_HD_SEND) == 0u)
 565:.\Generated_Source\PSoC5/LP.c ****                         {   /* In Half duplex mode return RX mask only if
 566:.\Generated_Source\PSoC5/LP.c ****                             *  RX configuration set, otherwise
 567:.\Generated_Source\PSoC5/LP.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:.\Generated_Source\PSoC5/LP.c ****                             */
 569:.\Generated_Source\PSoC5/LP.c ****                             LP_RXSTATUS_MASK_REG |= LP_RX_STS_FIFO_NOTEMPTY;
 570:.\Generated_Source\PSoC5/LP.c ****                         }
 571:.\Generated_Source\PSoC5/LP.c ****                     #else
 572:.\Generated_Source\PSoC5/LP.c ****                         LP_RXSTATUS_MASK_REG |= LP_RX_STS_FIFO_NOTEMPTY;
 573:.\Generated_Source\PSoC5/LP.c ****                     #endif /* end LP_HD_ENABLED */
 574:.\Generated_Source\PSoC5/LP.c ****                 #endif /* LP_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:.\Generated_Source\PSoC5/LP.c ****             }
 576:.\Generated_Source\PSoC5/LP.c **** 
 577:.\Generated_Source\PSoC5/LP.c ****         }
 578:.\Generated_Source\PSoC5/LP.c ****         else
 579:.\Generated_Source\PSoC5/LP.c ****         {   rxStatus = LP_RXSTATUS_REG;
 652              		.loc 1 579 0 is_stmt 1
 653 0060 124B     		ldr	r3, .L41+20
 654 0062 1B78     		ldrb	r3, [r3]
 655 0064 3B71     		strb	r3, [r7, #4]
 580:.\Generated_Source\PSoC5/LP.c ****             if((rxStatus & LP_RX_STS_FIFO_NOTEMPTY) != 0u)
 656              		.loc 1 580 0
 657 0066 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 658 0068 03F02003 		and	r3, r3, #32
 659 006c 002B     		cmp	r3, #0
 660 006e 09D0     		beq	.L39
 581:.\Generated_Source\PSoC5/LP.c ****             {   /* Read received data from FIFO */
 582:.\Generated_Source\PSoC5/LP.c ****                 rxData = LP_RXDATA_REG;
 661              		.loc 1 582 0
 662 0070 0F4B     		ldr	r3, .L41+24
 663 0072 1B78     		ldrb	r3, [r3]
 664 0074 FB71     		strb	r3, [r7, #7]
 583:.\Generated_Source\PSoC5/LP.c ****                 /*Check status on error*/
 584:.\Generated_Source\PSoC5/LP.c ****                 if((rxStatus & (LP_RX_STS_BREAK | LP_RX_STS_PAR_ERROR |
 585:.\Generated_Source\PSoC5/LP.c ****                                 LP_RX_STS_STOP_ERROR | LP_RX_STS_OVERRUN)) != 0u)
 665              		.loc 1 585 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 23


 666 0076 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 667 0078 03F01E03 		and	r3, r3, #30
 584:.\Generated_Source\PSoC5/LP.c ****                 if((rxStatus & (LP_RX_STS_BREAK | LP_RX_STS_PAR_ERROR |
 668              		.loc 1 584 0
 669 007c 002B     		cmp	r3, #0
 670 007e 01D0     		beq	.L39
 586:.\Generated_Source\PSoC5/LP.c ****                 {
 587:.\Generated_Source\PSoC5/LP.c ****                     rxData = 0u;
 671              		.loc 1 587 0
 672 0080 0023     		movs	r3, #0
 673 0082 FB71     		strb	r3, [r7, #7]
 674              	.L39:
 588:.\Generated_Source\PSoC5/LP.c ****                 }
 589:.\Generated_Source\PSoC5/LP.c ****             }
 590:.\Generated_Source\PSoC5/LP.c ****         }
 591:.\Generated_Source\PSoC5/LP.c **** 
 592:.\Generated_Source\PSoC5/LP.c ****         LP_EnableRxInt();
 675              		.loc 1 592 0
 676 0084 0B4B     		ldr	r3, .L41+28
 677 0086 0822     		movs	r2, #8
 678 0088 1A60     		str	r2, [r3]
 593:.\Generated_Source\PSoC5/LP.c **** 
 594:.\Generated_Source\PSoC5/LP.c ****     #else
 595:.\Generated_Source\PSoC5/LP.c **** 
 596:.\Generated_Source\PSoC5/LP.c ****         rxStatus =LP_RXSTATUS_REG;
 597:.\Generated_Source\PSoC5/LP.c ****         if((rxStatus & LP_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:.\Generated_Source\PSoC5/LP.c ****         {
 599:.\Generated_Source\PSoC5/LP.c ****             /* Read received data from FIFO */
 600:.\Generated_Source\PSoC5/LP.c ****             rxData = LP_RXDATA_REG;
 601:.\Generated_Source\PSoC5/LP.c **** 
 602:.\Generated_Source\PSoC5/LP.c ****             /*Check status on error*/
 603:.\Generated_Source\PSoC5/LP.c ****             if((rxStatus & (LP_RX_STS_BREAK | LP_RX_STS_PAR_ERROR |
 604:.\Generated_Source\PSoC5/LP.c ****                             LP_RX_STS_STOP_ERROR | LP_RX_STS_OVERRUN)) != 0u)
 605:.\Generated_Source\PSoC5/LP.c ****             {
 606:.\Generated_Source\PSoC5/LP.c ****                 rxData = 0u;
 607:.\Generated_Source\PSoC5/LP.c ****             }
 608:.\Generated_Source\PSoC5/LP.c ****         }
 609:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_INTERRUPT_ENABLED) */
 610:.\Generated_Source\PSoC5/LP.c **** 
 611:.\Generated_Source\PSoC5/LP.c ****         return(rxData);
 679              		.loc 1 611 0
 680 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 612:.\Generated_Source\PSoC5/LP.c ****     }
 681              		.loc 1 612 0
 682 008c 1846     		mov	r0, r3
 683 008e 0C37     		adds	r7, r7, #12
 684 0090 BD46     		mov	sp, r7
 685              		@ sp needed
 686 0092 5DF8047B 		ldr	r7, [sp], #4
 687 0096 7047     		bx	lr
 688              	.L42:
 689              		.align	2
 690              	.L41:
 691 0098 80E100E0 		.word	-536813184
 692 009c 00000000 		.word	LP_rxBufferRead
 693 00a0 00000000 		.word	LP_rxBufferWrite
 694 00a4 00000000 		.word	LP_rxBufferLoopDetect
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 24


 695 00a8 00000000 		.word	LP_rxBuffer
 696 00ac 6A640040 		.word	1073767530
 697 00b0 49650040 		.word	1073767753
 698 00b4 00E100E0 		.word	-536813312
 699              		.cfi_endproc
 700              	.LFE9:
 701              		.size	LP_GetChar, .-LP_GetChar
 702              		.section	.text.LP_GetByte,"ax",%progbits
 703              		.align	2
 704              		.global	LP_GetByte
 705              		.thumb
 706              		.thumb_func
 707              		.type	LP_GetByte, %function
 708              	LP_GetByte:
 709              	.LFB10:
 613:.\Generated_Source\PSoC5/LP.c **** 
 614:.\Generated_Source\PSoC5/LP.c **** 
 615:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 616:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_GetByte
 617:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 618:.\Generated_Source\PSoC5/LP.c ****     *
 619:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 620:.\Generated_Source\PSoC5/LP.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:.\Generated_Source\PSoC5/LP.c ****     *  condition.
 622:.\Generated_Source\PSoC5/LP.c ****     *
 623:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 624:.\Generated_Source\PSoC5/LP.c ****     *  None.
 625:.\Generated_Source\PSoC5/LP.c ****     *
 626:.\Generated_Source\PSoC5/LP.c ****     * Return:
 627:.\Generated_Source\PSoC5/LP.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:.\Generated_Source\PSoC5/LP.c ****     *  an error has occurred.
 629:.\Generated_Source\PSoC5/LP.c ****     *
 630:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 631:.\Generated_Source\PSoC5/LP.c ****     *  No.
 632:.\Generated_Source\PSoC5/LP.c ****     *
 633:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 634:.\Generated_Source\PSoC5/LP.c ****     uint16 LP_GetByte(void) 
 635:.\Generated_Source\PSoC5/LP.c ****     {
 710              		.loc 1 635 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0000 90B5     		push	{r4, r7, lr}
 715              		.cfi_def_cfa_offset 12
 716              		.cfi_offset 4, -12
 717              		.cfi_offset 7, -8
 718              		.cfi_offset 14, -4
 719 0002 83B0     		sub	sp, sp, #12
 720              		.cfi_def_cfa_offset 24
 721 0004 00AF     		add	r7, sp, #0
 722              		.cfi_def_cfa_register 7
 636:.\Generated_Source\PSoC5/LP.c ****         
 637:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 638:.\Generated_Source\PSoC5/LP.c ****         uint16 locErrorStatus;
 639:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt */
 640:.\Generated_Source\PSoC5/LP.c ****         LP_DisableRxInt();
 723              		.loc 1 640 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 25


 724 0006 0C4B     		ldr	r3, .L45
 725 0008 0822     		movs	r2, #8
 726 000a 1A60     		str	r2, [r3]
 641:.\Generated_Source\PSoC5/LP.c ****         locErrorStatus = (uint16)LP_errorStatus;
 727              		.loc 1 641 0
 728 000c 0B4B     		ldr	r3, .L45+4
 729 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 730 0010 FB80     		strh	r3, [r7, #6]	@ movhi
 642:.\Generated_Source\PSoC5/LP.c ****         LP_errorStatus = 0u;
 731              		.loc 1 642 0
 732 0012 0A4B     		ldr	r3, .L45+4
 733 0014 0022     		movs	r2, #0
 734 0016 1A70     		strb	r2, [r3]
 643:.\Generated_Source\PSoC5/LP.c ****         LP_EnableRxInt();
 735              		.loc 1 643 0
 736 0018 094B     		ldr	r3, .L45+8
 737 001a 0822     		movs	r2, #8
 738 001c 1A60     		str	r2, [r3]
 644:.\Generated_Source\PSoC5/LP.c ****         return ( (uint16)(locErrorStatus << 8u) | LP_ReadRxData() );
 739              		.loc 1 644 0
 740 001e FB88     		ldrh	r3, [r7, #6]	@ movhi
 741 0020 1B02     		lsls	r3, r3, #8
 742 0022 9CB2     		uxth	r4, r3
 743 0024 FFF7FEFF 		bl	LP_ReadRxData
 744 0028 0346     		mov	r3, r0
 745 002a 2343     		orrs	r3, r3, r4
 746 002c 9BB2     		uxth	r3, r3
 645:.\Generated_Source\PSoC5/LP.c ****     #else
 646:.\Generated_Source\PSoC5/LP.c ****         return ( ((uint16)LP_ReadRxStatus() << 8u) | LP_ReadRxData() );
 647:.\Generated_Source\PSoC5/LP.c ****     #endif /* LP_RX_INTERRUPT_ENABLED */
 648:.\Generated_Source\PSoC5/LP.c ****         
 649:.\Generated_Source\PSoC5/LP.c ****     }
 747              		.loc 1 649 0
 748 002e 1846     		mov	r0, r3
 749 0030 0C37     		adds	r7, r7, #12
 750 0032 BD46     		mov	sp, r7
 751              		@ sp needed
 752 0034 90BD     		pop	{r4, r7, pc}
 753              	.L46:
 754 0036 00BF     		.align	2
 755              	.L45:
 756 0038 80E100E0 		.word	-536813184
 757 003c 00000000 		.word	LP_errorStatus
 758 0040 00E100E0 		.word	-536813312
 759              		.cfi_endproc
 760              	.LFE10:
 761              		.size	LP_GetByte, .-LP_GetByte
 762              		.section	.text.LP_GetRxBufferSize,"ax",%progbits
 763              		.align	2
 764              		.global	LP_GetRxBufferSize
 765              		.thumb
 766              		.thumb_func
 767              		.type	LP_GetRxBufferSize, %function
 768              	LP_GetRxBufferSize:
 769              	.LFB11:
 650:.\Generated_Source\PSoC5/LP.c **** 
 651:.\Generated_Source\PSoC5/LP.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 26


 652:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 653:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_GetRxBufferSize
 654:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 655:.\Generated_Source\PSoC5/LP.c ****     *
 656:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 657:.\Generated_Source\PSoC5/LP.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:.\Generated_Source\PSoC5/LP.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:.\Generated_Source\PSoC5/LP.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:.\Generated_Source\PSoC5/LP.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:.\Generated_Source\PSoC5/LP.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:.\Generated_Source\PSoC5/LP.c ****     *    account.
 663:.\Generated_Source\PSoC5/LP.c ****     *
 664:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 665:.\Generated_Source\PSoC5/LP.c ****     *  None.
 666:.\Generated_Source\PSoC5/LP.c ****     *
 667:.\Generated_Source\PSoC5/LP.c ****     * Return:
 668:.\Generated_Source\PSoC5/LP.c ****     *  uint8: Number of bytes in the RX buffer. 
 669:.\Generated_Source\PSoC5/LP.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:.\Generated_Source\PSoC5/LP.c ****     *
 671:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 672:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferWrite - used to calculate left bytes.
 673:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferRead - used to calculate left bytes.
 674:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferLoopDetect - checked to decide left bytes amount.
 675:.\Generated_Source\PSoC5/LP.c ****     *
 676:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 677:.\Generated_Source\PSoC5/LP.c ****     *  No.
 678:.\Generated_Source\PSoC5/LP.c ****     *
 679:.\Generated_Source\PSoC5/LP.c ****     * Theory:
 680:.\Generated_Source\PSoC5/LP.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:.\Generated_Source\PSoC5/LP.c ****     *
 682:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 683:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_GetRxBufferSize(void)
 684:.\Generated_Source\PSoC5/LP.c ****                                                             
 685:.\Generated_Source\PSoC5/LP.c ****     {
 770              		.loc 1 685 0
 771              		.cfi_startproc
 772              		@ args = 0, pretend = 0, frame = 8
 773              		@ frame_needed = 1, uses_anonymous_args = 0
 774              		@ link register save eliminated.
 775 0000 80B4     		push	{r7}
 776              		.cfi_def_cfa_offset 4
 777              		.cfi_offset 7, -4
 778 0002 83B0     		sub	sp, sp, #12
 779              		.cfi_def_cfa_offset 16
 780 0004 00AF     		add	r7, sp, #0
 781              		.cfi_def_cfa_register 7
 686:.\Generated_Source\PSoC5/LP.c ****         uint8 size;
 687:.\Generated_Source\PSoC5/LP.c **** 
 688:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 689:.\Generated_Source\PSoC5/LP.c **** 
 690:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt */
 691:.\Generated_Source\PSoC5/LP.c ****         LP_DisableRxInt();
 782              		.loc 1 691 0
 783 0006 1D4B     		ldr	r3, .L54
 784 0008 0822     		movs	r2, #8
 785 000a 1A60     		str	r2, [r3]
 692:.\Generated_Source\PSoC5/LP.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 27


 693:.\Generated_Source\PSoC5/LP.c ****         if(LP_rxBufferRead == LP_rxBufferWrite)
 786              		.loc 1 693 0
 787 000c 1C4B     		ldr	r3, .L54+4
 788 000e 1B78     		ldrb	r3, [r3]
 789 0010 DAB2     		uxtb	r2, r3
 790 0012 1C4B     		ldr	r3, .L54+8
 791 0014 1B78     		ldrb	r3, [r3]
 792 0016 DBB2     		uxtb	r3, r3
 793 0018 9A42     		cmp	r2, r3
 794 001a 0AD1     		bne	.L48
 694:.\Generated_Source\PSoC5/LP.c ****         {
 695:.\Generated_Source\PSoC5/LP.c ****             if(LP_rxBufferLoopDetect != 0u)
 795              		.loc 1 695 0
 796 001c 1A4B     		ldr	r3, .L54+12
 797 001e 1B78     		ldrb	r3, [r3]
 798 0020 DBB2     		uxtb	r3, r3
 799 0022 002B     		cmp	r3, #0
 800 0024 02D0     		beq	.L49
 696:.\Generated_Source\PSoC5/LP.c ****             {
 697:.\Generated_Source\PSoC5/LP.c ****                 size = LP_RX_BUFFER_SIZE;
 801              		.loc 1 697 0
 802 0026 C823     		movs	r3, #200
 803 0028 FB71     		strb	r3, [r7, #7]
 804 002a 1DE0     		b	.L51
 805              	.L49:
 698:.\Generated_Source\PSoC5/LP.c ****             }
 699:.\Generated_Source\PSoC5/LP.c ****             else
 700:.\Generated_Source\PSoC5/LP.c ****             {
 701:.\Generated_Source\PSoC5/LP.c ****                 size = 0u;
 806              		.loc 1 701 0
 807 002c 0023     		movs	r3, #0
 808 002e FB71     		strb	r3, [r7, #7]
 809 0030 1AE0     		b	.L51
 810              	.L48:
 702:.\Generated_Source\PSoC5/LP.c ****             }
 703:.\Generated_Source\PSoC5/LP.c ****         }
 704:.\Generated_Source\PSoC5/LP.c ****         else if(LP_rxBufferRead < LP_rxBufferWrite)
 811              		.loc 1 704 0
 812 0032 134B     		ldr	r3, .L54+4
 813 0034 1B78     		ldrb	r3, [r3]
 814 0036 DAB2     		uxtb	r2, r3
 815 0038 124B     		ldr	r3, .L54+8
 816 003a 1B78     		ldrb	r3, [r3]
 817 003c DBB2     		uxtb	r3, r3
 818 003e 9A42     		cmp	r2, r3
 819 0040 08D2     		bcs	.L52
 705:.\Generated_Source\PSoC5/LP.c ****         {
 706:.\Generated_Source\PSoC5/LP.c ****             size = (LP_rxBufferWrite - LP_rxBufferRead);
 820              		.loc 1 706 0
 821 0042 104B     		ldr	r3, .L54+8
 822 0044 1B78     		ldrb	r3, [r3]
 823 0046 DAB2     		uxtb	r2, r3
 824 0048 0D4B     		ldr	r3, .L54+4
 825 004a 1B78     		ldrb	r3, [r3]
 826 004c DBB2     		uxtb	r3, r3
 827 004e D31A     		subs	r3, r2, r3
 828 0050 FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 28


 829 0052 09E0     		b	.L51
 830              	.L52:
 707:.\Generated_Source\PSoC5/LP.c ****         }
 708:.\Generated_Source\PSoC5/LP.c ****         else
 709:.\Generated_Source\PSoC5/LP.c ****         {
 710:.\Generated_Source\PSoC5/LP.c ****             size = (LP_RX_BUFFER_SIZE - LP_rxBufferRead) + LP_rxBufferWrite;
 831              		.loc 1 710 0
 832 0054 0B4B     		ldr	r3, .L54+8
 833 0056 1B78     		ldrb	r3, [r3]
 834 0058 DAB2     		uxtb	r2, r3
 835 005a 094B     		ldr	r3, .L54+4
 836 005c 1B78     		ldrb	r3, [r3]
 837 005e DBB2     		uxtb	r3, r3
 838 0060 D31A     		subs	r3, r2, r3
 839 0062 DBB2     		uxtb	r3, r3
 840 0064 383B     		subs	r3, r3, #56
 841 0066 FB71     		strb	r3, [r7, #7]
 842              	.L51:
 711:.\Generated_Source\PSoC5/LP.c ****         }
 712:.\Generated_Source\PSoC5/LP.c **** 
 713:.\Generated_Source\PSoC5/LP.c ****         LP_EnableRxInt();
 843              		.loc 1 713 0
 844 0068 084B     		ldr	r3, .L54+16
 845 006a 0822     		movs	r2, #8
 846 006c 1A60     		str	r2, [r3]
 714:.\Generated_Source\PSoC5/LP.c **** 
 715:.\Generated_Source\PSoC5/LP.c ****     #else
 716:.\Generated_Source\PSoC5/LP.c **** 
 717:.\Generated_Source\PSoC5/LP.c ****         /* We can only know if there is data in the fifo. */
 718:.\Generated_Source\PSoC5/LP.c ****         size = ((LP_RXSTATUS_REG & LP_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:.\Generated_Source\PSoC5/LP.c **** 
 720:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_INTERRUPT_ENABLED) */
 721:.\Generated_Source\PSoC5/LP.c **** 
 722:.\Generated_Source\PSoC5/LP.c ****         return(size);
 847              		.loc 1 722 0
 848 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 723:.\Generated_Source\PSoC5/LP.c ****     }
 849              		.loc 1 723 0
 850 0070 1846     		mov	r0, r3
 851 0072 0C37     		adds	r7, r7, #12
 852 0074 BD46     		mov	sp, r7
 853              		@ sp needed
 854 0076 5DF8047B 		ldr	r7, [sp], #4
 855 007a 7047     		bx	lr
 856              	.L55:
 857              		.align	2
 858              	.L54:
 859 007c 80E100E0 		.word	-536813184
 860 0080 00000000 		.word	LP_rxBufferRead
 861 0084 00000000 		.word	LP_rxBufferWrite
 862 0088 00000000 		.word	LP_rxBufferLoopDetect
 863 008c 00E100E0 		.word	-536813312
 864              		.cfi_endproc
 865              	.LFE11:
 866              		.size	LP_GetRxBufferSize, .-LP_GetRxBufferSize
 867              		.section	.text.LP_ClearRxBuffer,"ax",%progbits
 868              		.align	2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 29


 869              		.global	LP_ClearRxBuffer
 870              		.thumb
 871              		.thumb_func
 872              		.type	LP_ClearRxBuffer, %function
 873              	LP_ClearRxBuffer:
 874              	.LFB12:
 724:.\Generated_Source\PSoC5/LP.c **** 
 725:.\Generated_Source\PSoC5/LP.c **** 
 726:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 727:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_ClearRxBuffer
 728:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 729:.\Generated_Source\PSoC5/LP.c ****     *
 730:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 731:.\Generated_Source\PSoC5/LP.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:.\Generated_Source\PSoC5/LP.c ****     *
 733:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 734:.\Generated_Source\PSoC5/LP.c ****     *  None.
 735:.\Generated_Source\PSoC5/LP.c ****     *
 736:.\Generated_Source\PSoC5/LP.c ****     * Return:
 737:.\Generated_Source\PSoC5/LP.c ****     *  None.
 738:.\Generated_Source\PSoC5/LP.c ****     *
 739:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 740:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferWrite - cleared to zero.
 741:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferRead - cleared to zero.
 742:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferLoopDetect - cleared to zero.
 743:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxBufferOverflow - cleared to zero.
 744:.\Generated_Source\PSoC5/LP.c ****     *
 745:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 746:.\Generated_Source\PSoC5/LP.c ****     *  No.
 747:.\Generated_Source\PSoC5/LP.c ****     *
 748:.\Generated_Source\PSoC5/LP.c ****     * Theory:
 749:.\Generated_Source\PSoC5/LP.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:.\Generated_Source\PSoC5/LP.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:.\Generated_Source\PSoC5/LP.c ****     *  have remained in the RAM.
 752:.\Generated_Source\PSoC5/LP.c ****     *
 753:.\Generated_Source\PSoC5/LP.c ****     * Side Effects:
 754:.\Generated_Source\PSoC5/LP.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:.\Generated_Source\PSoC5/LP.c ****     *
 756:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 757:.\Generated_Source\PSoC5/LP.c ****     void LP_ClearRxBuffer(void) 
 758:.\Generated_Source\PSoC5/LP.c ****     {
 875              		.loc 1 758 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 8
 878              		@ frame_needed = 1, uses_anonymous_args = 0
 879 0000 80B5     		push	{r7, lr}
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 82B0     		sub	sp, sp, #8
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 759:.\Generated_Source\PSoC5/LP.c ****         uint8 enableInterrupts;
 760:.\Generated_Source\PSoC5/LP.c **** 
 761:.\Generated_Source\PSoC5/LP.c ****         /* Clear the HW FIFO */
 762:.\Generated_Source\PSoC5/LP.c ****         enableInterrupts = CyEnterCriticalSection();
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 30


 887              		.loc 1 762 0
 888 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 889 000a 0346     		mov	r3, r0
 890 000c FB71     		strb	r3, [r7, #7]
 763:.\Generated_Source\PSoC5/LP.c ****         LP_RXDATA_AUX_CTL_REG |= (uint8)  LP_RX_FIFO_CLR;
 891              		.loc 1 763 0
 892 000e 144B     		ldr	r3, .L57
 893 0010 134A     		ldr	r2, .L57
 894 0012 1278     		ldrb	r2, [r2]
 895 0014 D2B2     		uxtb	r2, r2
 896 0016 42F00102 		orr	r2, r2, #1
 897 001a D2B2     		uxtb	r2, r2
 898 001c 1A70     		strb	r2, [r3]
 764:.\Generated_Source\PSoC5/LP.c ****         LP_RXDATA_AUX_CTL_REG &= (uint8) ~LP_RX_FIFO_CLR;
 899              		.loc 1 764 0
 900 001e 104B     		ldr	r3, .L57
 901 0020 0F4A     		ldr	r2, .L57
 902 0022 1278     		ldrb	r2, [r2]
 903 0024 D2B2     		uxtb	r2, r2
 904 0026 22F00102 		bic	r2, r2, #1
 905 002a D2B2     		uxtb	r2, r2
 906 002c 1A70     		strb	r2, [r3]
 765:.\Generated_Source\PSoC5/LP.c ****         CyExitCriticalSection(enableInterrupts);
 907              		.loc 1 765 0
 908 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 909 0030 1846     		mov	r0, r3
 910 0032 FFF7FEFF 		bl	CyExitCriticalSection
 766:.\Generated_Source\PSoC5/LP.c **** 
 767:.\Generated_Source\PSoC5/LP.c ****     #if (LP_RX_INTERRUPT_ENABLED)
 768:.\Generated_Source\PSoC5/LP.c **** 
 769:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt. */
 770:.\Generated_Source\PSoC5/LP.c ****         LP_DisableRxInt();
 911              		.loc 1 770 0
 912 0036 0B4B     		ldr	r3, .L57+4
 913 0038 0822     		movs	r2, #8
 914 003a 1A60     		str	r2, [r3]
 771:.\Generated_Source\PSoC5/LP.c **** 
 772:.\Generated_Source\PSoC5/LP.c ****         LP_rxBufferRead = 0u;
 915              		.loc 1 772 0
 916 003c 0A4B     		ldr	r3, .L57+8
 917 003e 0022     		movs	r2, #0
 918 0040 1A70     		strb	r2, [r3]
 773:.\Generated_Source\PSoC5/LP.c ****         LP_rxBufferWrite = 0u;
 919              		.loc 1 773 0
 920 0042 0A4B     		ldr	r3, .L57+12
 921 0044 0022     		movs	r2, #0
 922 0046 1A70     		strb	r2, [r3]
 774:.\Generated_Source\PSoC5/LP.c ****         LP_rxBufferLoopDetect = 0u;
 923              		.loc 1 774 0
 924 0048 094B     		ldr	r3, .L57+16
 925 004a 0022     		movs	r2, #0
 926 004c 1A70     		strb	r2, [r3]
 775:.\Generated_Source\PSoC5/LP.c ****         LP_rxBufferOverflow = 0u;
 927              		.loc 1 775 0
 928 004e 094B     		ldr	r3, .L57+20
 929 0050 0022     		movs	r2, #0
 930 0052 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 31


 776:.\Generated_Source\PSoC5/LP.c **** 
 777:.\Generated_Source\PSoC5/LP.c ****         LP_EnableRxInt();
 931              		.loc 1 777 0
 932 0054 084B     		ldr	r3, .L57+24
 933 0056 0822     		movs	r2, #8
 934 0058 1A60     		str	r2, [r3]
 778:.\Generated_Source\PSoC5/LP.c **** 
 779:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_RX_INTERRUPT_ENABLED) */
 780:.\Generated_Source\PSoC5/LP.c **** 
 781:.\Generated_Source\PSoC5/LP.c ****     }
 935              		.loc 1 781 0
 936 005a 0837     		adds	r7, r7, #8
 937 005c BD46     		mov	sp, r7
 938              		@ sp needed
 939 005e 80BD     		pop	{r7, pc}
 940              	.L58:
 941              		.align	2
 942              	.L57:
 943 0060 99650040 		.word	1073767833
 944 0064 80E100E0 		.word	-536813184
 945 0068 00000000 		.word	LP_rxBufferRead
 946 006c 00000000 		.word	LP_rxBufferWrite
 947 0070 00000000 		.word	LP_rxBufferLoopDetect
 948 0074 00000000 		.word	LP_rxBufferOverflow
 949 0078 00E100E0 		.word	-536813312
 950              		.cfi_endproc
 951              	.LFE12:
 952              		.size	LP_ClearRxBuffer, .-LP_ClearRxBuffer
 953              		.section	.text.LP_SetRxAddressMode,"ax",%progbits
 954              		.align	2
 955              		.global	LP_SetRxAddressMode
 956              		.thumb
 957              		.thumb_func
 958              		.type	LP_SetRxAddressMode, %function
 959              	LP_SetRxAddressMode:
 960              	.LFB13:
 782:.\Generated_Source\PSoC5/LP.c **** 
 783:.\Generated_Source\PSoC5/LP.c **** 
 784:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 785:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetRxAddressMode
 786:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 787:.\Generated_Source\PSoC5/LP.c ****     *
 788:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 789:.\Generated_Source\PSoC5/LP.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:.\Generated_Source\PSoC5/LP.c ****     *  UART.
 791:.\Generated_Source\PSoC5/LP.c ****     *
 792:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 793:.\Generated_Source\PSoC5/LP.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:.\Generated_Source\PSoC5/LP.c ****     *  LP__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:.\Generated_Source\PSoC5/LP.c ****     *                                               detection
 796:.\Generated_Source\PSoC5/LP.c ****     *  LP__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:.\Generated_Source\PSoC5/LP.c ****     *                                               address detection
 798:.\Generated_Source\PSoC5/LP.c ****     *  LP__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:.\Generated_Source\PSoC5/LP.c ****     *                                               detection
 800:.\Generated_Source\PSoC5/LP.c ****     *  LP__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:.\Generated_Source\PSoC5/LP.c ****     *                                               address detection
 802:.\Generated_Source\PSoC5/LP.c ****     *  LP__B_UART__AM_NONE - No address detection
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 32


 803:.\Generated_Source\PSoC5/LP.c ****     *
 804:.\Generated_Source\PSoC5/LP.c ****     * Return:
 805:.\Generated_Source\PSoC5/LP.c ****     *  None.
 806:.\Generated_Source\PSoC5/LP.c ****     *
 807:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 808:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxAddressMode - the parameter stored in this variable for
 809:.\Generated_Source\PSoC5/LP.c ****     *   the farther usage in RX ISR.
 810:.\Generated_Source\PSoC5/LP.c ****     *  LP_rxAddressDetected - set to initial state (0).
 811:.\Generated_Source\PSoC5/LP.c ****     *
 812:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 813:.\Generated_Source\PSoC5/LP.c ****     void LP_SetRxAddressMode(uint8 addressMode)
 814:.\Generated_Source\PSoC5/LP.c ****                                                         
 815:.\Generated_Source\PSoC5/LP.c ****     {
 961              		.loc 1 815 0
 962              		.cfi_startproc
 963              		@ args = 0, pretend = 0, frame = 8
 964              		@ frame_needed = 1, uses_anonymous_args = 0
 965              		@ link register save eliminated.
 966 0000 80B4     		push	{r7}
 967              		.cfi_def_cfa_offset 4
 968              		.cfi_offset 7, -4
 969 0002 83B0     		sub	sp, sp, #12
 970              		.cfi_def_cfa_offset 16
 971 0004 00AF     		add	r7, sp, #0
 972              		.cfi_def_cfa_register 7
 973 0006 0346     		mov	r3, r0
 974 0008 FB71     		strb	r3, [r7, #7]
 816:.\Generated_Source\PSoC5/LP.c ****         #if(LP_RXHW_ADDRESS_ENABLED)
 817:.\Generated_Source\PSoC5/LP.c ****             #if(LP_CONTROL_REG_REMOVED)
 818:.\Generated_Source\PSoC5/LP.c ****                 if(0u != addressMode)
 819:.\Generated_Source\PSoC5/LP.c ****                 {
 820:.\Generated_Source\PSoC5/LP.c ****                     /* Suppress compiler warning */
 821:.\Generated_Source\PSoC5/LP.c ****                 }
 822:.\Generated_Source\PSoC5/LP.c ****             #else /* LP_CONTROL_REG_REMOVED */
 823:.\Generated_Source\PSoC5/LP.c ****                 uint8 tmpCtrl;
 824:.\Generated_Source\PSoC5/LP.c ****                 tmpCtrl = LP_CONTROL_REG & (uint8)~LP_CTRL_RXADDR_MODE_MASK;
 825:.\Generated_Source\PSoC5/LP.c ****                 tmpCtrl |= (uint8)(addressMode << LP_CTRL_RXADDR_MODE0_SHIFT);
 826:.\Generated_Source\PSoC5/LP.c ****                 LP_CONTROL_REG = tmpCtrl;
 827:.\Generated_Source\PSoC5/LP.c **** 
 828:.\Generated_Source\PSoC5/LP.c ****                 #if(LP_RX_INTERRUPT_ENABLED && \
 829:.\Generated_Source\PSoC5/LP.c ****                    (LP_RXBUFFERSIZE > LP_FIFO_LENGTH) )
 830:.\Generated_Source\PSoC5/LP.c ****                     LP_rxAddressMode = addressMode;
 831:.\Generated_Source\PSoC5/LP.c ****                     LP_rxAddressDetected = 0u;
 832:.\Generated_Source\PSoC5/LP.c ****                 #endif /* End LP_RXBUFFERSIZE > LP_FIFO_LENGTH*/
 833:.\Generated_Source\PSoC5/LP.c ****             #endif /* End LP_CONTROL_REG_REMOVED */
 834:.\Generated_Source\PSoC5/LP.c ****         #else /* LP_RXHW_ADDRESS_ENABLED */
 835:.\Generated_Source\PSoC5/LP.c ****             if(0u != addressMode)
 836:.\Generated_Source\PSoC5/LP.c ****             {
 837:.\Generated_Source\PSoC5/LP.c ****                 /* Suppress compiler warning */
 838:.\Generated_Source\PSoC5/LP.c ****             }
 839:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_RXHW_ADDRESS_ENABLED */
 840:.\Generated_Source\PSoC5/LP.c ****     }
 975              		.loc 1 840 0
 976 000a 0C37     		adds	r7, r7, #12
 977 000c BD46     		mov	sp, r7
 978              		@ sp needed
 979 000e 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 33


 980 0012 7047     		bx	lr
 981              		.cfi_endproc
 982              	.LFE13:
 983              		.size	LP_SetRxAddressMode, .-LP_SetRxAddressMode
 984              		.section	.text.LP_SetRxAddress1,"ax",%progbits
 985              		.align	2
 986              		.global	LP_SetRxAddress1
 987              		.thumb
 988              		.thumb_func
 989              		.type	LP_SetRxAddress1, %function
 990              	LP_SetRxAddress1:
 991              	.LFB14:
 841:.\Generated_Source\PSoC5/LP.c **** 
 842:.\Generated_Source\PSoC5/LP.c **** 
 843:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 844:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetRxAddress1
 845:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 846:.\Generated_Source\PSoC5/LP.c ****     *
 847:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 848:.\Generated_Source\PSoC5/LP.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:.\Generated_Source\PSoC5/LP.c ****     *
 850:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 851:.\Generated_Source\PSoC5/LP.c ****     *  address: Address #1 for hardware address detection.
 852:.\Generated_Source\PSoC5/LP.c ****     *
 853:.\Generated_Source\PSoC5/LP.c ****     * Return:
 854:.\Generated_Source\PSoC5/LP.c ****     *  None.
 855:.\Generated_Source\PSoC5/LP.c ****     *
 856:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 857:.\Generated_Source\PSoC5/LP.c ****     void LP_SetRxAddress1(uint8 address) 
 858:.\Generated_Source\PSoC5/LP.c ****     {
 992              		.loc 1 858 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 1, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 997 0000 80B4     		push	{r7}
 998              		.cfi_def_cfa_offset 4
 999              		.cfi_offset 7, -4
 1000 0002 83B0     		sub	sp, sp, #12
 1001              		.cfi_def_cfa_offset 16
 1002 0004 00AF     		add	r7, sp, #0
 1003              		.cfi_def_cfa_register 7
 1004 0006 0346     		mov	r3, r0
 1005 0008 FB71     		strb	r3, [r7, #7]
 859:.\Generated_Source\PSoC5/LP.c ****         LP_RXADDRESS1_REG = address;
 1006              		.loc 1 859 0
 1007 000a 044B     		ldr	r3, .L61
 1008 000c FA79     		ldrb	r2, [r7, #7]
 1009 000e 1A70     		strb	r2, [r3]
 860:.\Generated_Source\PSoC5/LP.c ****     }
 1010              		.loc 1 860 0
 1011 0010 0C37     		adds	r7, r7, #12
 1012 0012 BD46     		mov	sp, r7
 1013              		@ sp needed
 1014 0014 5DF8047B 		ldr	r7, [sp], #4
 1015 0018 7047     		bx	lr
 1016              	.L62:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 34


 1017 001a 00BF     		.align	2
 1018              	.L61:
 1019 001c 29650040 		.word	1073767721
 1020              		.cfi_endproc
 1021              	.LFE14:
 1022              		.size	LP_SetRxAddress1, .-LP_SetRxAddress1
 1023              		.section	.text.LP_SetRxAddress2,"ax",%progbits
 1024              		.align	2
 1025              		.global	LP_SetRxAddress2
 1026              		.thumb
 1027              		.thumb_func
 1028              		.type	LP_SetRxAddress2, %function
 1029              	LP_SetRxAddress2:
 1030              	.LFB15:
 861:.\Generated_Source\PSoC5/LP.c **** 
 862:.\Generated_Source\PSoC5/LP.c **** 
 863:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 864:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetRxAddress2
 865:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 866:.\Generated_Source\PSoC5/LP.c ****     *
 867:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 868:.\Generated_Source\PSoC5/LP.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:.\Generated_Source\PSoC5/LP.c ****     *
 870:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 871:.\Generated_Source\PSoC5/LP.c ****     *  address: Address #2 for hardware address detection.
 872:.\Generated_Source\PSoC5/LP.c ****     *
 873:.\Generated_Source\PSoC5/LP.c ****     * Return:
 874:.\Generated_Source\PSoC5/LP.c ****     *  None.
 875:.\Generated_Source\PSoC5/LP.c ****     *
 876:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 877:.\Generated_Source\PSoC5/LP.c ****     void LP_SetRxAddress2(uint8 address) 
 878:.\Generated_Source\PSoC5/LP.c ****     {
 1031              		.loc 1 878 0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 8
 1034              		@ frame_needed = 1, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 1036 0000 80B4     		push	{r7}
 1037              		.cfi_def_cfa_offset 4
 1038              		.cfi_offset 7, -4
 1039 0002 83B0     		sub	sp, sp, #12
 1040              		.cfi_def_cfa_offset 16
 1041 0004 00AF     		add	r7, sp, #0
 1042              		.cfi_def_cfa_register 7
 1043 0006 0346     		mov	r3, r0
 1044 0008 FB71     		strb	r3, [r7, #7]
 879:.\Generated_Source\PSoC5/LP.c ****         LP_RXADDRESS2_REG = address;
 1045              		.loc 1 879 0
 1046 000a 044B     		ldr	r3, .L64
 1047 000c FA79     		ldrb	r2, [r7, #7]
 1048 000e 1A70     		strb	r2, [r3]
 880:.\Generated_Source\PSoC5/LP.c ****     }
 1049              		.loc 1 880 0
 1050 0010 0C37     		adds	r7, r7, #12
 1051 0012 BD46     		mov	sp, r7
 1052              		@ sp needed
 1053 0014 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 35


 1054 0018 7047     		bx	lr
 1055              	.L65:
 1056 001a 00BF     		.align	2
 1057              	.L64:
 1058 001c 39650040 		.word	1073767737
 1059              		.cfi_endproc
 1060              	.LFE15:
 1061              		.size	LP_SetRxAddress2, .-LP_SetRxAddress2
 1062              		.section	.text.LP_SetTxInterruptMode,"ax",%progbits
 1063              		.align	2
 1064              		.global	LP_SetTxInterruptMode
 1065              		.thumb
 1066              		.thumb_func
 1067              		.type	LP_SetTxInterruptMode, %function
 1068              	LP_SetTxInterruptMode:
 1069              	.LFB16:
 881:.\Generated_Source\PSoC5/LP.c **** 
 882:.\Generated_Source\PSoC5/LP.c **** #endif  /* LP_RX_ENABLED || LP_HD_ENABLED*/
 883:.\Generated_Source\PSoC5/LP.c **** 
 884:.\Generated_Source\PSoC5/LP.c **** 
 885:.\Generated_Source\PSoC5/LP.c **** #if( (LP_TX_ENABLED) || (LP_HD_ENABLED) )
 886:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 887:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetTxInterruptMode
 888:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 889:.\Generated_Source\PSoC5/LP.c ****     *
 890:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 891:.\Generated_Source\PSoC5/LP.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:.\Generated_Source\PSoC5/LP.c ****     *  interrupt.
 893:.\Generated_Source\PSoC5/LP.c ****     *
 894:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 895:.\Generated_Source\PSoC5/LP.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:.\Generated_Source\PSoC5/LP.c ****     *   LP_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:.\Generated_Source\PSoC5/LP.c ****     *   LP_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:.\Generated_Source\PSoC5/LP.c ****     *   LP_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:.\Generated_Source\PSoC5/LP.c ****     *   LP_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:.\Generated_Source\PSoC5/LP.c ****     *
 901:.\Generated_Source\PSoC5/LP.c ****     * Return:
 902:.\Generated_Source\PSoC5/LP.c ****     *  None.
 903:.\Generated_Source\PSoC5/LP.c ****     *
 904:.\Generated_Source\PSoC5/LP.c ****     * Theory:
 905:.\Generated_Source\PSoC5/LP.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:.\Generated_Source\PSoC5/LP.c ****     *
 907:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 908:.\Generated_Source\PSoC5/LP.c ****     void LP_SetTxInterruptMode(uint8 intSrc) 
 909:.\Generated_Source\PSoC5/LP.c ****     {
 1070              		.loc 1 909 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              		.cfi_def_cfa_offset 4
 1077              		.cfi_offset 7, -4
 1078 0002 83B0     		sub	sp, sp, #12
 1079              		.cfi_def_cfa_offset 16
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 36


 1082 0006 0346     		mov	r3, r0
 1083 0008 FB71     		strb	r3, [r7, #7]
 910:.\Generated_Source\PSoC5/LP.c ****         LP_TXSTATUS_MASK_REG = intSrc;
 1084              		.loc 1 910 0
 1085 000a 044B     		ldr	r3, .L67
 1086 000c FA79     		ldrb	r2, [r7, #7]
 1087 000e 1A70     		strb	r2, [r3]
 911:.\Generated_Source\PSoC5/LP.c ****     }
 1088              		.loc 1 911 0
 1089 0010 0C37     		adds	r7, r7, #12
 1090 0012 BD46     		mov	sp, r7
 1091              		@ sp needed
 1092 0014 5DF8047B 		ldr	r7, [sp], #4
 1093 0018 7047     		bx	lr
 1094              	.L68:
 1095 001a 00BF     		.align	2
 1096              	.L67:
 1097 001c 8B640040 		.word	1073767563
 1098              		.cfi_endproc
 1099              	.LFE16:
 1100              		.size	LP_SetTxInterruptMode, .-LP_SetTxInterruptMode
 1101              		.section	.text.LP_WriteTxData,"ax",%progbits
 1102              		.align	2
 1103              		.global	LP_WriteTxData
 1104              		.thumb
 1105              		.thumb_func
 1106              		.type	LP_WriteTxData, %function
 1107              	LP_WriteTxData:
 1108              	.LFB17:
 912:.\Generated_Source\PSoC5/LP.c **** 
 913:.\Generated_Source\PSoC5/LP.c **** 
 914:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 915:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_WriteTxData
 916:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 917:.\Generated_Source\PSoC5/LP.c ****     *
 918:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 919:.\Generated_Source\PSoC5/LP.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:.\Generated_Source\PSoC5/LP.c ****     *  available without checking the TX status register. You must check status
 921:.\Generated_Source\PSoC5/LP.c ****     *  separately.
 922:.\Generated_Source\PSoC5/LP.c ****     *
 923:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 924:.\Generated_Source\PSoC5/LP.c ****     *  txDataByte: data byte
 925:.\Generated_Source\PSoC5/LP.c ****     *
 926:.\Generated_Source\PSoC5/LP.c ****     * Return:
 927:.\Generated_Source\PSoC5/LP.c ****     * None.
 928:.\Generated_Source\PSoC5/LP.c ****     *
 929:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
 930:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBuffer - RAM buffer pointer for save data for transmission
 931:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferWrite - cyclic index for write to txBuffer,
 932:.\Generated_Source\PSoC5/LP.c ****     *    incremented after each byte saved to buffer.
 933:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferRead - cyclic index for read from txBuffer,
 934:.\Generated_Source\PSoC5/LP.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 935:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
 936:.\Generated_Source\PSoC5/LP.c ****     *    initialized.
 937:.\Generated_Source\PSoC5/LP.c ****     *
 938:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
 939:.\Generated_Source\PSoC5/LP.c ****     *  No.
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 37


 940:.\Generated_Source\PSoC5/LP.c ****     *
 941:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
 942:.\Generated_Source\PSoC5/LP.c ****     void LP_WriteTxData(uint8 txDataByte) 
 943:.\Generated_Source\PSoC5/LP.c ****     {
 1109              		.loc 1 943 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 8
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113              		@ link register save eliminated.
 1114 0000 80B4     		push	{r7}
 1115              		.cfi_def_cfa_offset 4
 1116              		.cfi_offset 7, -4
 1117 0002 83B0     		sub	sp, sp, #12
 1118              		.cfi_def_cfa_offset 16
 1119 0004 00AF     		add	r7, sp, #0
 1120              		.cfi_def_cfa_register 7
 1121 0006 0346     		mov	r3, r0
 1122 0008 FB71     		strb	r3, [r7, #7]
 944:.\Generated_Source\PSoC5/LP.c ****         /* If not Initialized then skip this function*/
 945:.\Generated_Source\PSoC5/LP.c ****         if(LP_initVar != 0u)
 1123              		.loc 1 945 0
 1124 000a 064B     		ldr	r3, .L71
 1125 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1126 000e 002B     		cmp	r3, #0
 1127 0010 02D0     		beq	.L69
 946:.\Generated_Source\PSoC5/LP.c ****         {
 947:.\Generated_Source\PSoC5/LP.c ****         #if (LP_TX_INTERRUPT_ENABLED)
 948:.\Generated_Source\PSoC5/LP.c **** 
 949:.\Generated_Source\PSoC5/LP.c ****             /* Protect variables that could change on interrupt. */
 950:.\Generated_Source\PSoC5/LP.c ****             LP_DisableTxInt();
 951:.\Generated_Source\PSoC5/LP.c **** 
 952:.\Generated_Source\PSoC5/LP.c ****             if( (LP_txBufferRead == LP_txBufferWrite) &&
 953:.\Generated_Source\PSoC5/LP.c ****                 ((LP_TXSTATUS_REG & LP_TX_STS_FIFO_FULL) == 0u) )
 954:.\Generated_Source\PSoC5/LP.c ****             {
 955:.\Generated_Source\PSoC5/LP.c ****                 /* Add directly to the FIFO. */
 956:.\Generated_Source\PSoC5/LP.c ****                 LP_TXDATA_REG = txDataByte;
 957:.\Generated_Source\PSoC5/LP.c ****             }
 958:.\Generated_Source\PSoC5/LP.c ****             else
 959:.\Generated_Source\PSoC5/LP.c ****             {
 960:.\Generated_Source\PSoC5/LP.c ****                 if(LP_txBufferWrite >= LP_TX_BUFFER_SIZE)
 961:.\Generated_Source\PSoC5/LP.c ****                 {
 962:.\Generated_Source\PSoC5/LP.c ****                     LP_txBufferWrite = 0u;
 963:.\Generated_Source\PSoC5/LP.c ****                 }
 964:.\Generated_Source\PSoC5/LP.c **** 
 965:.\Generated_Source\PSoC5/LP.c ****                 LP_txBuffer[LP_txBufferWrite] = txDataByte;
 966:.\Generated_Source\PSoC5/LP.c **** 
 967:.\Generated_Source\PSoC5/LP.c ****                 /* Add to the software buffer. */
 968:.\Generated_Source\PSoC5/LP.c ****                 LP_txBufferWrite++;
 969:.\Generated_Source\PSoC5/LP.c ****             }
 970:.\Generated_Source\PSoC5/LP.c **** 
 971:.\Generated_Source\PSoC5/LP.c ****             LP_EnableTxInt();
 972:.\Generated_Source\PSoC5/LP.c **** 
 973:.\Generated_Source\PSoC5/LP.c ****         #else
 974:.\Generated_Source\PSoC5/LP.c **** 
 975:.\Generated_Source\PSoC5/LP.c ****             /* Add directly to the FIFO. */
 976:.\Generated_Source\PSoC5/LP.c ****             LP_TXDATA_REG = txDataByte;
 1128              		.loc 1 976 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 38


 1129 0012 054B     		ldr	r3, .L71+4
 1130 0014 FA79     		ldrb	r2, [r7, #7]
 1131 0016 1A70     		strb	r2, [r3]
 1132              	.L69:
 977:.\Generated_Source\PSoC5/LP.c **** 
 978:.\Generated_Source\PSoC5/LP.c ****         #endif /*(LP_TX_INTERRUPT_ENABLED) */
 979:.\Generated_Source\PSoC5/LP.c ****         }
 980:.\Generated_Source\PSoC5/LP.c ****     }
 1133              		.loc 1 980 0
 1134 0018 0C37     		adds	r7, r7, #12
 1135 001a BD46     		mov	sp, r7
 1136              		@ sp needed
 1137 001c 5DF8047B 		ldr	r7, [sp], #4
 1138 0020 7047     		bx	lr
 1139              	.L72:
 1140 0022 00BF     		.align	2
 1141              	.L71:
 1142 0024 00000000 		.word	LP_initVar
 1143 0028 4B640040 		.word	1073767499
 1144              		.cfi_endproc
 1145              	.LFE17:
 1146              		.size	LP_WriteTxData, .-LP_WriteTxData
 1147              		.section	.text.LP_ReadTxStatus,"ax",%progbits
 1148              		.align	2
 1149              		.global	LP_ReadTxStatus
 1150              		.thumb
 1151              		.thumb_func
 1152              		.type	LP_ReadTxStatus, %function
 1153              	LP_ReadTxStatus:
 1154              	.LFB18:
 981:.\Generated_Source\PSoC5/LP.c **** 
 982:.\Generated_Source\PSoC5/LP.c **** 
 983:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
 984:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_ReadTxStatus
 985:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
 986:.\Generated_Source\PSoC5/LP.c ****     *
 987:.\Generated_Source\PSoC5/LP.c ****     * Summary:
 988:.\Generated_Source\PSoC5/LP.c ****     *  Reads the status register for the TX portion of the UART.
 989:.\Generated_Source\PSoC5/LP.c ****     *
 990:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
 991:.\Generated_Source\PSoC5/LP.c ****     *  None.
 992:.\Generated_Source\PSoC5/LP.c ****     *
 993:.\Generated_Source\PSoC5/LP.c ****     * Return:
 994:.\Generated_Source\PSoC5/LP.c ****     *  Contents of the status register
 995:.\Generated_Source\PSoC5/LP.c ****     *
 996:.\Generated_Source\PSoC5/LP.c ****     * Theory:
 997:.\Generated_Source\PSoC5/LP.c ****     *  This function reads the TX status register, which is cleared on read.
 998:.\Generated_Source\PSoC5/LP.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:.\Generated_Source\PSoC5/LP.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:.\Generated_Source\PSoC5/LP.c ****     *  and must be handled accordingly.
1001:.\Generated_Source\PSoC5/LP.c ****     *
1002:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1003:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_ReadTxStatus(void) 
1004:.\Generated_Source\PSoC5/LP.c ****     {
 1155              		.loc 1 1004 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 39


 1158              		@ frame_needed = 1, uses_anonymous_args = 0
 1159              		@ link register save eliminated.
 1160 0000 80B4     		push	{r7}
 1161              		.cfi_def_cfa_offset 4
 1162              		.cfi_offset 7, -4
 1163 0002 00AF     		add	r7, sp, #0
 1164              		.cfi_def_cfa_register 7
1005:.\Generated_Source\PSoC5/LP.c ****         return(LP_TXSTATUS_REG);
 1165              		.loc 1 1005 0
 1166 0004 034B     		ldr	r3, .L75
 1167 0006 1B78     		ldrb	r3, [r3]
 1168 0008 DBB2     		uxtb	r3, r3
1006:.\Generated_Source\PSoC5/LP.c ****     }
 1169              		.loc 1 1006 0
 1170 000a 1846     		mov	r0, r3
 1171 000c BD46     		mov	sp, r7
 1172              		@ sp needed
 1173 000e 5DF8047B 		ldr	r7, [sp], #4
 1174 0012 7047     		bx	lr
 1175              	.L76:
 1176              		.align	2
 1177              	.L75:
 1178 0014 6B640040 		.word	1073767531
 1179              		.cfi_endproc
 1180              	.LFE18:
 1181              		.size	LP_ReadTxStatus, .-LP_ReadTxStatus
 1182              		.section	.text.LP_PutChar,"ax",%progbits
 1183              		.align	2
 1184              		.global	LP_PutChar
 1185              		.thumb
 1186              		.thumb_func
 1187              		.type	LP_PutChar, %function
 1188              	LP_PutChar:
 1189              	.LFB19:
1007:.\Generated_Source\PSoC5/LP.c **** 
1008:.\Generated_Source\PSoC5/LP.c **** 
1009:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1010:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_PutChar
1011:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1012:.\Generated_Source\PSoC5/LP.c ****     *
1013:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1014:.\Generated_Source\PSoC5/LP.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:.\Generated_Source\PSoC5/LP.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:.\Generated_Source\PSoC5/LP.c ****     *  hold the data.
1017:.\Generated_Source\PSoC5/LP.c ****     *
1018:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1019:.\Generated_Source\PSoC5/LP.c ****     *  txDataByte: Byte containing the data to transmit
1020:.\Generated_Source\PSoC5/LP.c ****     *
1021:.\Generated_Source\PSoC5/LP.c ****     * Return:
1022:.\Generated_Source\PSoC5/LP.c ****     *  None.
1023:.\Generated_Source\PSoC5/LP.c ****     *
1024:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1025:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBuffer - RAM buffer pointer for save data for transmission
1026:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferWrite - cyclic index for write to txBuffer,
1027:.\Generated_Source\PSoC5/LP.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:.\Generated_Source\PSoC5/LP.c ****     *     saved to buffer.
1029:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferRead - cyclic index for read from txBuffer,
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 40


1030:.\Generated_Source\PSoC5/LP.c ****     *     checked to identify free space in txBuffer.
1031:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
1032:.\Generated_Source\PSoC5/LP.c ****     *     initialized.
1033:.\Generated_Source\PSoC5/LP.c ****     *
1034:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1035:.\Generated_Source\PSoC5/LP.c ****     *  No.
1036:.\Generated_Source\PSoC5/LP.c ****     *
1037:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1038:.\Generated_Source\PSoC5/LP.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:.\Generated_Source\PSoC5/LP.c ****     *
1040:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1041:.\Generated_Source\PSoC5/LP.c ****     void LP_PutChar(uint8 txDataByte) 
1042:.\Generated_Source\PSoC5/LP.c ****     {
 1190              		.loc 1 1042 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 8
 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194              		@ link register save eliminated.
 1195 0000 80B4     		push	{r7}
 1196              		.cfi_def_cfa_offset 4
 1197              		.cfi_offset 7, -4
 1198 0002 83B0     		sub	sp, sp, #12
 1199              		.cfi_def_cfa_offset 16
 1200 0004 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 1202 0006 0346     		mov	r3, r0
 1203 0008 FB71     		strb	r3, [r7, #7]
1043:.\Generated_Source\PSoC5/LP.c ****     #if (LP_TX_INTERRUPT_ENABLED)
1044:.\Generated_Source\PSoC5/LP.c ****         /* The temporary output pointer is used since it takes two instructions
1045:.\Generated_Source\PSoC5/LP.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:.\Generated_Source\PSoC5/LP.c ****         *  pointer and getting an interrupt in between instructions.
1047:.\Generated_Source\PSoC5/LP.c ****         */
1048:.\Generated_Source\PSoC5/LP.c ****         uint8 locTxBufferWrite;
1049:.\Generated_Source\PSoC5/LP.c ****         uint8 locTxBufferRead;
1050:.\Generated_Source\PSoC5/LP.c **** 
1051:.\Generated_Source\PSoC5/LP.c ****         do
1052:.\Generated_Source\PSoC5/LP.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:.\Generated_Source\PSoC5/LP.c **** 
1054:.\Generated_Source\PSoC5/LP.c ****         #if ((LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:.\Generated_Source\PSoC5/LP.c ****             /* Disable TX interrupt to protect variables from modification */
1056:.\Generated_Source\PSoC5/LP.c ****             LP_DisableTxInt();
1057:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:.\Generated_Source\PSoC5/LP.c **** 
1059:.\Generated_Source\PSoC5/LP.c ****             locTxBufferWrite = LP_txBufferWrite;
1060:.\Generated_Source\PSoC5/LP.c ****             locTxBufferRead  = LP_txBufferRead;
1061:.\Generated_Source\PSoC5/LP.c **** 
1062:.\Generated_Source\PSoC5/LP.c ****         #if ((LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:.\Generated_Source\PSoC5/LP.c ****             /* Enable interrupt to continue transmission */
1064:.\Generated_Source\PSoC5/LP.c ****             LP_EnableTxInt();
1065:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:.\Generated_Source\PSoC5/LP.c ****         }
1067:.\Generated_Source\PSoC5/LP.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:.\Generated_Source\PSoC5/LP.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:.\Generated_Source\PSoC5/LP.c ****                                 (uint8)(LP_TX_BUFFER_SIZE - 1u)) );
1070:.\Generated_Source\PSoC5/LP.c **** 
1071:.\Generated_Source\PSoC5/LP.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:.\Generated_Source\PSoC5/LP.c ****             ((LP_TXSTATUS_REG & LP_TX_STS_FIFO_FULL) == 0u) )
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 41


1073:.\Generated_Source\PSoC5/LP.c ****         {
1074:.\Generated_Source\PSoC5/LP.c ****             /* Add directly to the FIFO */
1075:.\Generated_Source\PSoC5/LP.c ****             LP_TXDATA_REG = txDataByte;
1076:.\Generated_Source\PSoC5/LP.c ****         }
1077:.\Generated_Source\PSoC5/LP.c ****         else
1078:.\Generated_Source\PSoC5/LP.c ****         {
1079:.\Generated_Source\PSoC5/LP.c ****             if(locTxBufferWrite >= LP_TX_BUFFER_SIZE)
1080:.\Generated_Source\PSoC5/LP.c ****             {
1081:.\Generated_Source\PSoC5/LP.c ****                 locTxBufferWrite = 0u;
1082:.\Generated_Source\PSoC5/LP.c ****             }
1083:.\Generated_Source\PSoC5/LP.c ****             /* Add to the software buffer. */
1084:.\Generated_Source\PSoC5/LP.c ****             LP_txBuffer[locTxBufferWrite] = txDataByte;
1085:.\Generated_Source\PSoC5/LP.c ****             locTxBufferWrite++;
1086:.\Generated_Source\PSoC5/LP.c **** 
1087:.\Generated_Source\PSoC5/LP.c ****             /* Finally, update the real output pointer */
1088:.\Generated_Source\PSoC5/LP.c ****         #if ((LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:.\Generated_Source\PSoC5/LP.c ****             LP_DisableTxInt();
1090:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:.\Generated_Source\PSoC5/LP.c **** 
1092:.\Generated_Source\PSoC5/LP.c ****             LP_txBufferWrite = locTxBufferWrite;
1093:.\Generated_Source\PSoC5/LP.c **** 
1094:.\Generated_Source\PSoC5/LP.c ****         #if ((LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:.\Generated_Source\PSoC5/LP.c ****             LP_EnableTxInt();
1096:.\Generated_Source\PSoC5/LP.c ****         #endif /* (LP_TX_BUFFER_SIZE > LP_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:.\Generated_Source\PSoC5/LP.c **** 
1098:.\Generated_Source\PSoC5/LP.c ****             if(0u != (LP_TXSTATUS_REG & LP_TX_STS_FIFO_EMPTY))
1099:.\Generated_Source\PSoC5/LP.c ****             {
1100:.\Generated_Source\PSoC5/LP.c ****                 /* Trigger TX interrupt to send software buffer */
1101:.\Generated_Source\PSoC5/LP.c ****                 LP_SetPendingTxInt();
1102:.\Generated_Source\PSoC5/LP.c ****             }
1103:.\Generated_Source\PSoC5/LP.c ****         }
1104:.\Generated_Source\PSoC5/LP.c **** 
1105:.\Generated_Source\PSoC5/LP.c ****     #else
1106:.\Generated_Source\PSoC5/LP.c **** 
1107:.\Generated_Source\PSoC5/LP.c ****         while((LP_TXSTATUS_REG & LP_TX_STS_FIFO_FULL) != 0u)
 1204              		.loc 1 1107 0
 1205 000a 00BF     		nop
 1206              	.L78:
 1207              		.loc 1 1107 0 is_stmt 0 discriminator 1
 1208 000c 074B     		ldr	r3, .L79
 1209 000e 1B78     		ldrb	r3, [r3]
 1210 0010 DBB2     		uxtb	r3, r3
 1211 0012 03F00403 		and	r3, r3, #4
 1212 0016 002B     		cmp	r3, #0
 1213 0018 F8D1     		bne	.L78
1108:.\Generated_Source\PSoC5/LP.c ****         {
1109:.\Generated_Source\PSoC5/LP.c ****             /* Wait for room in the FIFO */
1110:.\Generated_Source\PSoC5/LP.c ****         }
1111:.\Generated_Source\PSoC5/LP.c **** 
1112:.\Generated_Source\PSoC5/LP.c ****         /* Add directly to the FIFO */
1113:.\Generated_Source\PSoC5/LP.c ****         LP_TXDATA_REG = txDataByte;
 1214              		.loc 1 1113 0 is_stmt 1
 1215 001a 054B     		ldr	r3, .L79+4
 1216 001c FA79     		ldrb	r2, [r7, #7]
 1217 001e 1A70     		strb	r2, [r3]
1114:.\Generated_Source\PSoC5/LP.c **** 
1115:.\Generated_Source\PSoC5/LP.c ****     #endif /* LP_TX_INTERRUPT_ENABLED */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 42


1116:.\Generated_Source\PSoC5/LP.c ****     }
 1218              		.loc 1 1116 0
 1219 0020 0C37     		adds	r7, r7, #12
 1220 0022 BD46     		mov	sp, r7
 1221              		@ sp needed
 1222 0024 5DF8047B 		ldr	r7, [sp], #4
 1223 0028 7047     		bx	lr
 1224              	.L80:
 1225 002a 00BF     		.align	2
 1226              	.L79:
 1227 002c 6B640040 		.word	1073767531
 1228 0030 4B640040 		.word	1073767499
 1229              		.cfi_endproc
 1230              	.LFE19:
 1231              		.size	LP_PutChar, .-LP_PutChar
 1232              		.section	.text.LP_PutString,"ax",%progbits
 1233              		.align	2
 1234              		.global	LP_PutString
 1235              		.thumb
 1236              		.thumb_func
 1237              		.type	LP_PutString, %function
 1238              	LP_PutString:
 1239              	.LFB20:
1117:.\Generated_Source\PSoC5/LP.c **** 
1118:.\Generated_Source\PSoC5/LP.c **** 
1119:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1120:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_PutString
1121:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1122:.\Generated_Source\PSoC5/LP.c ****     *
1123:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1124:.\Generated_Source\PSoC5/LP.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:.\Generated_Source\PSoC5/LP.c ****     *
1126:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1127:.\Generated_Source\PSoC5/LP.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:.\Generated_Source\PSoC5/LP.c ****     *
1129:.\Generated_Source\PSoC5/LP.c ****     * Return:
1130:.\Generated_Source\PSoC5/LP.c ****     *  None.
1131:.\Generated_Source\PSoC5/LP.c ****     *
1132:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1133:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
1134:.\Generated_Source\PSoC5/LP.c ****     *     initialized.
1135:.\Generated_Source\PSoC5/LP.c ****     *
1136:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1137:.\Generated_Source\PSoC5/LP.c ****     *  No.
1138:.\Generated_Source\PSoC5/LP.c ****     *
1139:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1140:.\Generated_Source\PSoC5/LP.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:.\Generated_Source\PSoC5/LP.c ****     *  function blocks until the last character of the string is loaded into the
1142:.\Generated_Source\PSoC5/LP.c ****     *  TX buffer.
1143:.\Generated_Source\PSoC5/LP.c ****     *
1144:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1145:.\Generated_Source\PSoC5/LP.c ****     void LP_PutString(const char8 string[]) 
1146:.\Generated_Source\PSoC5/LP.c ****     {
 1240              		.loc 1 1146 0
 1241              		.cfi_startproc
 1242              		@ args = 0, pretend = 0, frame = 16
 1243              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 43


 1244 0000 80B5     		push	{r7, lr}
 1245              		.cfi_def_cfa_offset 8
 1246              		.cfi_offset 7, -8
 1247              		.cfi_offset 14, -4
 1248 0002 84B0     		sub	sp, sp, #16
 1249              		.cfi_def_cfa_offset 24
 1250 0004 00AF     		add	r7, sp, #0
 1251              		.cfi_def_cfa_register 7
 1252 0006 7860     		str	r0, [r7, #4]
1147:.\Generated_Source\PSoC5/LP.c ****         uint16 bufIndex = 0u;
 1253              		.loc 1 1147 0
 1254 0008 0023     		movs	r3, #0
 1255 000a FB81     		strh	r3, [r7, #14]	@ movhi
1148:.\Generated_Source\PSoC5/LP.c **** 
1149:.\Generated_Source\PSoC5/LP.c ****         /* If not Initialized then skip this function */
1150:.\Generated_Source\PSoC5/LP.c ****         if(LP_initVar != 0u)
 1256              		.loc 1 1150 0
 1257 000c 0B4B     		ldr	r3, .L85
 1258 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1259 0010 002B     		cmp	r3, #0
 1260 0012 10D0     		beq	.L81
1151:.\Generated_Source\PSoC5/LP.c ****         {
1152:.\Generated_Source\PSoC5/LP.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:.\Generated_Source\PSoC5/LP.c ****             while(string[bufIndex] != (char8) 0)
 1261              		.loc 1 1153 0
 1262 0014 09E0     		b	.L83
 1263              	.L84:
1154:.\Generated_Source\PSoC5/LP.c ****             {
1155:.\Generated_Source\PSoC5/LP.c ****                 LP_PutChar((uint8)string[bufIndex]);
 1264              		.loc 1 1155 0
 1265 0016 FB89     		ldrh	r3, [r7, #14]
 1266 0018 7A68     		ldr	r2, [r7, #4]
 1267 001a 1344     		add	r3, r3, r2
 1268 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1269 001e 1846     		mov	r0, r3
 1270 0020 FFF7FEFF 		bl	LP_PutChar
1156:.\Generated_Source\PSoC5/LP.c ****                 bufIndex++;
 1271              		.loc 1 1156 0
 1272 0024 FB89     		ldrh	r3, [r7, #14]
 1273 0026 0133     		adds	r3, r3, #1
 1274 0028 FB81     		strh	r3, [r7, #14]	@ movhi
 1275              	.L83:
1153:.\Generated_Source\PSoC5/LP.c ****             while(string[bufIndex] != (char8) 0)
 1276              		.loc 1 1153 0 discriminator 1
 1277 002a FB89     		ldrh	r3, [r7, #14]
 1278 002c 7A68     		ldr	r2, [r7, #4]
 1279 002e 1344     		add	r3, r3, r2
 1280 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1281 0032 002B     		cmp	r3, #0
 1282 0034 EFD1     		bne	.L84
 1283              	.L81:
1157:.\Generated_Source\PSoC5/LP.c ****             }
1158:.\Generated_Source\PSoC5/LP.c ****         }
1159:.\Generated_Source\PSoC5/LP.c ****     }
 1284              		.loc 1 1159 0
 1285 0036 1037     		adds	r7, r7, #16
 1286 0038 BD46     		mov	sp, r7
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 44


 1287              		@ sp needed
 1288 003a 80BD     		pop	{r7, pc}
 1289              	.L86:
 1290              		.align	2
 1291              	.L85:
 1292 003c 00000000 		.word	LP_initVar
 1293              		.cfi_endproc
 1294              	.LFE20:
 1295              		.size	LP_PutString, .-LP_PutString
 1296              		.section	.text.LP_PutArray,"ax",%progbits
 1297              		.align	2
 1298              		.global	LP_PutArray
 1299              		.thumb
 1300              		.thumb_func
 1301              		.type	LP_PutArray, %function
 1302              	LP_PutArray:
 1303              	.LFB21:
1160:.\Generated_Source\PSoC5/LP.c **** 
1161:.\Generated_Source\PSoC5/LP.c **** 
1162:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1163:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_PutArray
1164:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1165:.\Generated_Source\PSoC5/LP.c ****     *
1166:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1167:.\Generated_Source\PSoC5/LP.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:.\Generated_Source\PSoC5/LP.c ****     *  transmission.
1169:.\Generated_Source\PSoC5/LP.c ****     *
1170:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1171:.\Generated_Source\PSoC5/LP.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:.\Generated_Source\PSoC5/LP.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:.\Generated_Source\PSoC5/LP.c ****     *             Size parameter.
1174:.\Generated_Source\PSoC5/LP.c ****     *
1175:.\Generated_Source\PSoC5/LP.c ****     * Return:
1176:.\Generated_Source\PSoC5/LP.c ****     *  None.
1177:.\Generated_Source\PSoC5/LP.c ****     *
1178:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1179:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
1180:.\Generated_Source\PSoC5/LP.c ****     *     initialized.
1181:.\Generated_Source\PSoC5/LP.c ****     *
1182:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1183:.\Generated_Source\PSoC5/LP.c ****     *  No.
1184:.\Generated_Source\PSoC5/LP.c ****     *
1185:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1186:.\Generated_Source\PSoC5/LP.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:.\Generated_Source\PSoC5/LP.c ****     *  function blocks until the last character of the string is loaded into the
1188:.\Generated_Source\PSoC5/LP.c ****     *  TX buffer.
1189:.\Generated_Source\PSoC5/LP.c ****     *
1190:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1191:.\Generated_Source\PSoC5/LP.c ****     void LP_PutArray(const uint8 string[], uint8 byteCount)
1192:.\Generated_Source\PSoC5/LP.c ****                                                                     
1193:.\Generated_Source\PSoC5/LP.c ****     {
 1304              		.loc 1 1193 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 16
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308 0000 80B5     		push	{r7, lr}
 1309              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 45


 1310              		.cfi_offset 7, -8
 1311              		.cfi_offset 14, -4
 1312 0002 84B0     		sub	sp, sp, #16
 1313              		.cfi_def_cfa_offset 24
 1314 0004 00AF     		add	r7, sp, #0
 1315              		.cfi_def_cfa_register 7
 1316 0006 7860     		str	r0, [r7, #4]
 1317 0008 0B46     		mov	r3, r1
 1318 000a FB70     		strb	r3, [r7, #3]
1194:.\Generated_Source\PSoC5/LP.c ****         uint8 bufIndex = 0u;
 1319              		.loc 1 1194 0
 1320 000c 0023     		movs	r3, #0
 1321 000e FB73     		strb	r3, [r7, #15]
1195:.\Generated_Source\PSoC5/LP.c **** 
1196:.\Generated_Source\PSoC5/LP.c ****         /* If not Initialized then skip this function */
1197:.\Generated_Source\PSoC5/LP.c ****         if(LP_initVar != 0u)
 1322              		.loc 1 1197 0
 1323 0010 0A4B     		ldr	r3, .L91
 1324 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1325 0014 002B     		cmp	r3, #0
 1326 0016 0ED0     		beq	.L87
1198:.\Generated_Source\PSoC5/LP.c ****         {
1199:.\Generated_Source\PSoC5/LP.c ****             while(bufIndex < byteCount)
 1327              		.loc 1 1199 0
 1328 0018 09E0     		b	.L89
 1329              	.L90:
1200:.\Generated_Source\PSoC5/LP.c ****             {
1201:.\Generated_Source\PSoC5/LP.c ****                 LP_PutChar(string[bufIndex]);
 1330              		.loc 1 1201 0
 1331 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1332 001c 7A68     		ldr	r2, [r7, #4]
 1333 001e 1344     		add	r3, r3, r2
 1334 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1335 0022 1846     		mov	r0, r3
 1336 0024 FFF7FEFF 		bl	LP_PutChar
1202:.\Generated_Source\PSoC5/LP.c ****                 bufIndex++;
 1337              		.loc 1 1202 0
 1338 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1339 002a 0133     		adds	r3, r3, #1
 1340 002c FB73     		strb	r3, [r7, #15]
 1341              	.L89:
1199:.\Generated_Source\PSoC5/LP.c ****             while(bufIndex < byteCount)
 1342              		.loc 1 1199 0 discriminator 1
 1343 002e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1344 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1345 0032 9A42     		cmp	r2, r3
 1346 0034 F1D3     		bcc	.L90
 1347              	.L87:
1203:.\Generated_Source\PSoC5/LP.c ****             }
1204:.\Generated_Source\PSoC5/LP.c ****         }
1205:.\Generated_Source\PSoC5/LP.c ****     }
 1348              		.loc 1 1205 0
 1349 0036 1037     		adds	r7, r7, #16
 1350 0038 BD46     		mov	sp, r7
 1351              		@ sp needed
 1352 003a 80BD     		pop	{r7, pc}
 1353              	.L92:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 46


 1354              		.align	2
 1355              	.L91:
 1356 003c 00000000 		.word	LP_initVar
 1357              		.cfi_endproc
 1358              	.LFE21:
 1359              		.size	LP_PutArray, .-LP_PutArray
 1360              		.section	.text.LP_PutCRLF,"ax",%progbits
 1361              		.align	2
 1362              		.global	LP_PutCRLF
 1363              		.thumb
 1364              		.thumb_func
 1365              		.type	LP_PutCRLF, %function
 1366              	LP_PutCRLF:
 1367              	.LFB22:
1206:.\Generated_Source\PSoC5/LP.c **** 
1207:.\Generated_Source\PSoC5/LP.c **** 
1208:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1209:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_PutCRLF
1210:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1211:.\Generated_Source\PSoC5/LP.c ****     *
1212:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1213:.\Generated_Source\PSoC5/LP.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:.\Generated_Source\PSoC5/LP.c ****     *  (0x0A) to the transmit buffer.
1215:.\Generated_Source\PSoC5/LP.c ****     *
1216:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1217:.\Generated_Source\PSoC5/LP.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:.\Generated_Source\PSoC5/LP.c ****     *
1219:.\Generated_Source\PSoC5/LP.c ****     * Return:
1220:.\Generated_Source\PSoC5/LP.c ****     *  None.
1221:.\Generated_Source\PSoC5/LP.c ****     *
1222:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1223:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
1224:.\Generated_Source\PSoC5/LP.c ****     *     initialized.
1225:.\Generated_Source\PSoC5/LP.c ****     *
1226:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1227:.\Generated_Source\PSoC5/LP.c ****     *  No.
1228:.\Generated_Source\PSoC5/LP.c ****     *
1229:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1230:.\Generated_Source\PSoC5/LP.c ****     void LP_PutCRLF(uint8 txDataByte) 
1231:.\Generated_Source\PSoC5/LP.c ****     {
 1368              		.loc 1 1231 0
 1369              		.cfi_startproc
 1370              		@ args = 0, pretend = 0, frame = 8
 1371              		@ frame_needed = 1, uses_anonymous_args = 0
 1372 0000 80B5     		push	{r7, lr}
 1373              		.cfi_def_cfa_offset 8
 1374              		.cfi_offset 7, -8
 1375              		.cfi_offset 14, -4
 1376 0002 82B0     		sub	sp, sp, #8
 1377              		.cfi_def_cfa_offset 16
 1378 0004 00AF     		add	r7, sp, #0
 1379              		.cfi_def_cfa_register 7
 1380 0006 0346     		mov	r3, r0
 1381 0008 FB71     		strb	r3, [r7, #7]
1232:.\Generated_Source\PSoC5/LP.c ****         /* If not Initialized then skip this function */
1233:.\Generated_Source\PSoC5/LP.c ****         if(LP_initVar != 0u)
 1382              		.loc 1 1233 0
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 47


 1383 000a 084B     		ldr	r3, .L95
 1384 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1385 000e 002B     		cmp	r3, #0
 1386 0010 09D0     		beq	.L93
1234:.\Generated_Source\PSoC5/LP.c ****         {
1235:.\Generated_Source\PSoC5/LP.c ****             LP_PutChar(txDataByte);
 1387              		.loc 1 1235 0
 1388 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1389 0014 1846     		mov	r0, r3
 1390 0016 FFF7FEFF 		bl	LP_PutChar
1236:.\Generated_Source\PSoC5/LP.c ****             LP_PutChar(0x0Du);
 1391              		.loc 1 1236 0
 1392 001a 0D20     		movs	r0, #13
 1393 001c FFF7FEFF 		bl	LP_PutChar
1237:.\Generated_Source\PSoC5/LP.c ****             LP_PutChar(0x0Au);
 1394              		.loc 1 1237 0
 1395 0020 0A20     		movs	r0, #10
 1396 0022 FFF7FEFF 		bl	LP_PutChar
 1397              	.L93:
1238:.\Generated_Source\PSoC5/LP.c ****         }
1239:.\Generated_Source\PSoC5/LP.c ****     }
 1398              		.loc 1 1239 0
 1399 0026 0837     		adds	r7, r7, #8
 1400 0028 BD46     		mov	sp, r7
 1401              		@ sp needed
 1402 002a 80BD     		pop	{r7, pc}
 1403              	.L96:
 1404              		.align	2
 1405              	.L95:
 1406 002c 00000000 		.word	LP_initVar
 1407              		.cfi_endproc
 1408              	.LFE22:
 1409              		.size	LP_PutCRLF, .-LP_PutCRLF
 1410              		.section	.text.LP_GetTxBufferSize,"ax",%progbits
 1411              		.align	2
 1412              		.global	LP_GetTxBufferSize
 1413              		.thumb
 1414              		.thumb_func
 1415              		.type	LP_GetTxBufferSize, %function
 1416              	LP_GetTxBufferSize:
 1417              	.LFB23:
1240:.\Generated_Source\PSoC5/LP.c **** 
1241:.\Generated_Source\PSoC5/LP.c **** 
1242:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1243:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_GetTxBufferSize
1244:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1245:.\Generated_Source\PSoC5/LP.c ****     *
1246:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1247:.\Generated_Source\PSoC5/LP.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:.\Generated_Source\PSoC5/LP.c ****     *  transmitted.
1249:.\Generated_Source\PSoC5/LP.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:.\Generated_Source\PSoC5/LP.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:.\Generated_Source\PSoC5/LP.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:.\Generated_Source\PSoC5/LP.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:.\Generated_Source\PSoC5/LP.c ****     *    TX FIFO do not count.
1254:.\Generated_Source\PSoC5/LP.c ****     *
1255:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 48


1256:.\Generated_Source\PSoC5/LP.c ****     *  None.
1257:.\Generated_Source\PSoC5/LP.c ****     *
1258:.\Generated_Source\PSoC5/LP.c ****     * Return:
1259:.\Generated_Source\PSoC5/LP.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:.\Generated_Source\PSoC5/LP.c ****     *  Buffer Size parameter.
1261:.\Generated_Source\PSoC5/LP.c ****     *
1262:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1263:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferWrite - used to calculate left space.
1264:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferRead - used to calculate left space.
1265:.\Generated_Source\PSoC5/LP.c ****     *
1266:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1267:.\Generated_Source\PSoC5/LP.c ****     *  No.
1268:.\Generated_Source\PSoC5/LP.c ****     *
1269:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1270:.\Generated_Source\PSoC5/LP.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:.\Generated_Source\PSoC5/LP.c ****     *
1272:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC5/LP.c ****     uint8 LP_GetTxBufferSize(void)
1274:.\Generated_Source\PSoC5/LP.c ****                                                             
1275:.\Generated_Source\PSoC5/LP.c ****     {
 1418              		.loc 1 1275 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 8
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423 0000 80B4     		push	{r7}
 1424              		.cfi_def_cfa_offset 4
 1425              		.cfi_offset 7, -4
 1426 0002 83B0     		sub	sp, sp, #12
 1427              		.cfi_def_cfa_offset 16
 1428 0004 00AF     		add	r7, sp, #0
 1429              		.cfi_def_cfa_register 7
1276:.\Generated_Source\PSoC5/LP.c ****         uint8 size;
1277:.\Generated_Source\PSoC5/LP.c **** 
1278:.\Generated_Source\PSoC5/LP.c ****     #if (LP_TX_INTERRUPT_ENABLED)
1279:.\Generated_Source\PSoC5/LP.c **** 
1280:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt. */
1281:.\Generated_Source\PSoC5/LP.c ****         LP_DisableTxInt();
1282:.\Generated_Source\PSoC5/LP.c **** 
1283:.\Generated_Source\PSoC5/LP.c ****         if(LP_txBufferRead == LP_txBufferWrite)
1284:.\Generated_Source\PSoC5/LP.c ****         {
1285:.\Generated_Source\PSoC5/LP.c ****             size = 0u;
1286:.\Generated_Source\PSoC5/LP.c ****         }
1287:.\Generated_Source\PSoC5/LP.c ****         else if(LP_txBufferRead < LP_txBufferWrite)
1288:.\Generated_Source\PSoC5/LP.c ****         {
1289:.\Generated_Source\PSoC5/LP.c ****             size = (LP_txBufferWrite - LP_txBufferRead);
1290:.\Generated_Source\PSoC5/LP.c ****         }
1291:.\Generated_Source\PSoC5/LP.c ****         else
1292:.\Generated_Source\PSoC5/LP.c ****         {
1293:.\Generated_Source\PSoC5/LP.c ****             size = (LP_TX_BUFFER_SIZE - LP_txBufferRead) +
1294:.\Generated_Source\PSoC5/LP.c ****                     LP_txBufferWrite;
1295:.\Generated_Source\PSoC5/LP.c ****         }
1296:.\Generated_Source\PSoC5/LP.c **** 
1297:.\Generated_Source\PSoC5/LP.c ****         LP_EnableTxInt();
1298:.\Generated_Source\PSoC5/LP.c **** 
1299:.\Generated_Source\PSoC5/LP.c ****     #else
1300:.\Generated_Source\PSoC5/LP.c **** 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 49


1301:.\Generated_Source\PSoC5/LP.c ****         size = LP_TXSTATUS_REG;
 1430              		.loc 1 1301 0
 1431 0006 0E4B     		ldr	r3, .L102
 1432 0008 1B78     		ldrb	r3, [r3]
 1433 000a FB71     		strb	r3, [r7, #7]
1302:.\Generated_Source\PSoC5/LP.c **** 
1303:.\Generated_Source\PSoC5/LP.c ****         /* Is the fifo is full. */
1304:.\Generated_Source\PSoC5/LP.c ****         if((size & LP_TX_STS_FIFO_FULL) != 0u)
 1434              		.loc 1 1304 0
 1435 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1436 000e 03F00403 		and	r3, r3, #4
 1437 0012 002B     		cmp	r3, #0
 1438 0014 02D0     		beq	.L98
1305:.\Generated_Source\PSoC5/LP.c ****         {
1306:.\Generated_Source\PSoC5/LP.c ****             size = LP_FIFO_LENGTH;
 1439              		.loc 1 1306 0
 1440 0016 0423     		movs	r3, #4
 1441 0018 FB71     		strb	r3, [r7, #7]
 1442 001a 09E0     		b	.L99
 1443              	.L98:
1307:.\Generated_Source\PSoC5/LP.c ****         }
1308:.\Generated_Source\PSoC5/LP.c ****         else if((size & LP_TX_STS_FIFO_EMPTY) != 0u)
 1444              		.loc 1 1308 0
 1445 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1446 001e 03F00203 		and	r3, r3, #2
 1447 0022 002B     		cmp	r3, #0
 1448 0024 02D0     		beq	.L100
1309:.\Generated_Source\PSoC5/LP.c ****         {
1310:.\Generated_Source\PSoC5/LP.c ****             size = 0u;
 1449              		.loc 1 1310 0
 1450 0026 0023     		movs	r3, #0
 1451 0028 FB71     		strb	r3, [r7, #7]
 1452 002a 01E0     		b	.L99
 1453              	.L100:
1311:.\Generated_Source\PSoC5/LP.c ****         }
1312:.\Generated_Source\PSoC5/LP.c ****         else
1313:.\Generated_Source\PSoC5/LP.c ****         {
1314:.\Generated_Source\PSoC5/LP.c ****             /* We only know there is data in the fifo. */
1315:.\Generated_Source\PSoC5/LP.c ****             size = 1u;
 1454              		.loc 1 1315 0
 1455 002c 0123     		movs	r3, #1
 1456 002e FB71     		strb	r3, [r7, #7]
 1457              	.L99:
1316:.\Generated_Source\PSoC5/LP.c ****         }
1317:.\Generated_Source\PSoC5/LP.c **** 
1318:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_TX_INTERRUPT_ENABLED) */
1319:.\Generated_Source\PSoC5/LP.c **** 
1320:.\Generated_Source\PSoC5/LP.c ****     return(size);
 1458              		.loc 1 1320 0
 1459 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1321:.\Generated_Source\PSoC5/LP.c ****     }
 1460              		.loc 1 1321 0
 1461 0032 1846     		mov	r0, r3
 1462 0034 0C37     		adds	r7, r7, #12
 1463 0036 BD46     		mov	sp, r7
 1464              		@ sp needed
 1465 0038 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 50


 1466 003c 7047     		bx	lr
 1467              	.L103:
 1468 003e 00BF     		.align	2
 1469              	.L102:
 1470 0040 6B640040 		.word	1073767531
 1471              		.cfi_endproc
 1472              	.LFE23:
 1473              		.size	LP_GetTxBufferSize, .-LP_GetTxBufferSize
 1474              		.section	.text.LP_ClearTxBuffer,"ax",%progbits
 1475              		.align	2
 1476              		.global	LP_ClearTxBuffer
 1477              		.thumb
 1478              		.thumb_func
 1479              		.type	LP_ClearTxBuffer, %function
 1480              	LP_ClearTxBuffer:
 1481              	.LFB24:
1322:.\Generated_Source\PSoC5/LP.c **** 
1323:.\Generated_Source\PSoC5/LP.c **** 
1324:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1325:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_ClearTxBuffer
1326:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1327:.\Generated_Source\PSoC5/LP.c ****     *
1328:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1329:.\Generated_Source\PSoC5/LP.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:.\Generated_Source\PSoC5/LP.c ****     *
1331:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1332:.\Generated_Source\PSoC5/LP.c ****     *  None.
1333:.\Generated_Source\PSoC5/LP.c ****     *
1334:.\Generated_Source\PSoC5/LP.c ****     * Return:
1335:.\Generated_Source\PSoC5/LP.c ****     *  None.
1336:.\Generated_Source\PSoC5/LP.c ****     *
1337:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1338:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferWrite - cleared to zero.
1339:.\Generated_Source\PSoC5/LP.c ****     *  LP_txBufferRead - cleared to zero.
1340:.\Generated_Source\PSoC5/LP.c ****     *
1341:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1342:.\Generated_Source\PSoC5/LP.c ****     *  No.
1343:.\Generated_Source\PSoC5/LP.c ****     *
1344:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1345:.\Generated_Source\PSoC5/LP.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:.\Generated_Source\PSoC5/LP.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:.\Generated_Source\PSoC5/LP.c ****     *  remained in the RAM.
1348:.\Generated_Source\PSoC5/LP.c ****     *
1349:.\Generated_Source\PSoC5/LP.c ****     * Side Effects:
1350:.\Generated_Source\PSoC5/LP.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:.\Generated_Source\PSoC5/LP.c ****     *  transmitting finishes transmitting.
1352:.\Generated_Source\PSoC5/LP.c ****     *
1353:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1354:.\Generated_Source\PSoC5/LP.c ****     void LP_ClearTxBuffer(void) 
1355:.\Generated_Source\PSoC5/LP.c ****     {
 1482              		.loc 1 1355 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 8
 1485              		@ frame_needed = 1, uses_anonymous_args = 0
 1486 0000 80B5     		push	{r7, lr}
 1487              		.cfi_def_cfa_offset 8
 1488              		.cfi_offset 7, -8
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 51


 1489              		.cfi_offset 14, -4
 1490 0002 82B0     		sub	sp, sp, #8
 1491              		.cfi_def_cfa_offset 16
 1492 0004 00AF     		add	r7, sp, #0
 1493              		.cfi_def_cfa_register 7
1356:.\Generated_Source\PSoC5/LP.c ****         uint8 enableInterrupts;
1357:.\Generated_Source\PSoC5/LP.c **** 
1358:.\Generated_Source\PSoC5/LP.c ****         enableInterrupts = CyEnterCriticalSection();
 1494              		.loc 1 1358 0
 1495 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1496 000a 0346     		mov	r3, r0
 1497 000c FB71     		strb	r3, [r7, #7]
1359:.\Generated_Source\PSoC5/LP.c ****         /* Clear the HW FIFO */
1360:.\Generated_Source\PSoC5/LP.c ****         LP_TXDATA_AUX_CTL_REG |= (uint8)  LP_TX_FIFO_CLR;
 1498              		.loc 1 1360 0
 1499 000e 0B4B     		ldr	r3, .L105
 1500 0010 0A4A     		ldr	r2, .L105
 1501 0012 1278     		ldrb	r2, [r2]
 1502 0014 D2B2     		uxtb	r2, r2
 1503 0016 42F00102 		orr	r2, r2, #1
 1504 001a D2B2     		uxtb	r2, r2
 1505 001c 1A70     		strb	r2, [r3]
1361:.\Generated_Source\PSoC5/LP.c ****         LP_TXDATA_AUX_CTL_REG &= (uint8) ~LP_TX_FIFO_CLR;
 1506              		.loc 1 1361 0
 1507 001e 074B     		ldr	r3, .L105
 1508 0020 064A     		ldr	r2, .L105
 1509 0022 1278     		ldrb	r2, [r2]
 1510 0024 D2B2     		uxtb	r2, r2
 1511 0026 22F00102 		bic	r2, r2, #1
 1512 002a D2B2     		uxtb	r2, r2
 1513 002c 1A70     		strb	r2, [r3]
1362:.\Generated_Source\PSoC5/LP.c ****         CyExitCriticalSection(enableInterrupts);
 1514              		.loc 1 1362 0
 1515 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1516 0030 1846     		mov	r0, r3
 1517 0032 FFF7FEFF 		bl	CyExitCriticalSection
1363:.\Generated_Source\PSoC5/LP.c **** 
1364:.\Generated_Source\PSoC5/LP.c ****     #if (LP_TX_INTERRUPT_ENABLED)
1365:.\Generated_Source\PSoC5/LP.c **** 
1366:.\Generated_Source\PSoC5/LP.c ****         /* Protect variables that could change on interrupt. */
1367:.\Generated_Source\PSoC5/LP.c ****         LP_DisableTxInt();
1368:.\Generated_Source\PSoC5/LP.c **** 
1369:.\Generated_Source\PSoC5/LP.c ****         LP_txBufferRead = 0u;
1370:.\Generated_Source\PSoC5/LP.c ****         LP_txBufferWrite = 0u;
1371:.\Generated_Source\PSoC5/LP.c **** 
1372:.\Generated_Source\PSoC5/LP.c ****         /* Enable Tx interrupt. */
1373:.\Generated_Source\PSoC5/LP.c ****         LP_EnableTxInt();
1374:.\Generated_Source\PSoC5/LP.c **** 
1375:.\Generated_Source\PSoC5/LP.c ****     #endif /* (LP_TX_INTERRUPT_ENABLED) */
1376:.\Generated_Source\PSoC5/LP.c ****     }
 1518              		.loc 1 1376 0
 1519 0036 0837     		adds	r7, r7, #8
 1520 0038 BD46     		mov	sp, r7
 1521              		@ sp needed
 1522 003a 80BD     		pop	{r7, pc}
 1523              	.L106:
 1524              		.align	2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 52


 1525              	.L105:
 1526 003c 9B640040 		.word	1073767579
 1527              		.cfi_endproc
 1528              	.LFE24:
 1529              		.size	LP_ClearTxBuffer, .-LP_ClearTxBuffer
 1530              		.section	.text.LP_SendBreak,"ax",%progbits
 1531              		.align	2
 1532              		.global	LP_SendBreak
 1533              		.thumb
 1534              		.thumb_func
 1535              		.type	LP_SendBreak, %function
 1536              	LP_SendBreak:
 1537              	.LFB25:
1377:.\Generated_Source\PSoC5/LP.c **** 
1378:.\Generated_Source\PSoC5/LP.c **** 
1379:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1380:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SendBreak
1381:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1382:.\Generated_Source\PSoC5/LP.c ****     *
1383:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1384:.\Generated_Source\PSoC5/LP.c ****     *  Transmits a break signal on the bus.
1385:.\Generated_Source\PSoC5/LP.c ****     *
1386:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1387:.\Generated_Source\PSoC5/LP.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:.\Generated_Source\PSoC5/LP.c ****     *   LP_SEND_BREAK - Initialize registers for break, send the Break
1389:.\Generated_Source\PSoC5/LP.c ****     *       signal and return immediately.
1390:.\Generated_Source\PSoC5/LP.c ****     *   LP_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:.\Generated_Source\PSoC5/LP.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:.\Generated_Source\PSoC5/LP.c ****     *   LP_REINIT - Reinitialize registers to normal transmission mode
1393:.\Generated_Source\PSoC5/LP.c ****     *       then return.
1394:.\Generated_Source\PSoC5/LP.c ****     *   LP_SEND_WAIT_REINIT - Performs both options: 
1395:.\Generated_Source\PSoC5/LP.c ****     *      LP_SEND_BREAK and LP_WAIT_FOR_COMPLETE_REINIT.
1396:.\Generated_Source\PSoC5/LP.c ****     *      This option is recommended for most cases.
1397:.\Generated_Source\PSoC5/LP.c ****     *
1398:.\Generated_Source\PSoC5/LP.c ****     * Return:
1399:.\Generated_Source\PSoC5/LP.c ****     *  None.
1400:.\Generated_Source\PSoC5/LP.c ****     *
1401:.\Generated_Source\PSoC5/LP.c ****     * Global Variables:
1402:.\Generated_Source\PSoC5/LP.c ****     *  LP_initVar - checked to identify that the component has been
1403:.\Generated_Source\PSoC5/LP.c ****     *     initialized.
1404:.\Generated_Source\PSoC5/LP.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:.\Generated_Source\PSoC5/LP.c ****     *
1406:.\Generated_Source\PSoC5/LP.c ****     * Reentrant:
1407:.\Generated_Source\PSoC5/LP.c ****     *  No.
1408:.\Generated_Source\PSoC5/LP.c ****     *
1409:.\Generated_Source\PSoC5/LP.c ****     * Theory:
1410:.\Generated_Source\PSoC5/LP.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:.\Generated_Source\PSoC5/LP.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:.\Generated_Source\PSoC5/LP.c ****     *  operation.
1413:.\Generated_Source\PSoC5/LP.c ****     *  There are 3 variants for this API usage:
1414:.\Generated_Source\PSoC5/LP.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:.\Generated_Source\PSoC5/LP.c ****     *     configuration returning. Function will block CPU until transmission
1416:.\Generated_Source\PSoC5/LP.c ****     *     complete.
1417:.\Generated_Source\PSoC5/LP.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:.\Generated_Source\PSoC5/LP.c ****     *     operation
1419:.\Generated_Source\PSoC5/LP.c ****     *     Example for this case:
1420:.\Generated_Source\PSoC5/LP.c ****     *     SendBreak(0);     - initialize Break signal transmission
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 53


1421:.\Generated_Source\PSoC5/LP.c ****     *         Add your code here to use CPU time
1422:.\Generated_Source\PSoC5/LP.c ****     *     SendBreak(1);     - complete Break operation
1423:.\Generated_Source\PSoC5/LP.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:.\Generated_Source\PSoC5/LP.c ****     *     complete break operation.
1425:.\Generated_Source\PSoC5/LP.c ****     *     Example for this case:
1426:.\Generated_Source\PSoC5/LP.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:.\Generated_Source\PSoC5/LP.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:.\Generated_Source\PSoC5/LP.c ****     *         Add your code here to use CPU time
1429:.\Generated_Source\PSoC5/LP.c ****     *     When interrupt appear with LP_TX_STS_COMPLETE status:
1430:.\Generated_Source\PSoC5/LP.c ****     *     SendBreak(2);     - complete Break operation
1431:.\Generated_Source\PSoC5/LP.c ****     *
1432:.\Generated_Source\PSoC5/LP.c ****     * Side Effects:
1433:.\Generated_Source\PSoC5/LP.c ****     *  The LP_SendBreak() function initializes registers to send a
1434:.\Generated_Source\PSoC5/LP.c ****     *  break signal.
1435:.\Generated_Source\PSoC5/LP.c ****     *  Break signal length depends on the break signal bits configuration.
1436:.\Generated_Source\PSoC5/LP.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:.\Generated_Source\PSoC5/LP.c ****     *  communication can continue.
1438:.\Generated_Source\PSoC5/LP.c ****     *
1439:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1440:.\Generated_Source\PSoC5/LP.c ****     void LP_SendBreak(uint8 retMode) 
1441:.\Generated_Source\PSoC5/LP.c ****     {
 1538              		.loc 1 1441 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 16
 1541              		@ frame_needed = 1, uses_anonymous_args = 0
 1542 0000 80B5     		push	{r7, lr}
 1543              		.cfi_def_cfa_offset 8
 1544              		.cfi_offset 7, -8
 1545              		.cfi_offset 14, -4
 1546 0002 84B0     		sub	sp, sp, #16
 1547              		.cfi_def_cfa_offset 24
 1548 0004 00AF     		add	r7, sp, #0
 1549              		.cfi_def_cfa_register 7
 1550 0006 0346     		mov	r3, r0
 1551 0008 FB71     		strb	r3, [r7, #7]
1442:.\Generated_Source\PSoC5/LP.c **** 
1443:.\Generated_Source\PSoC5/LP.c ****         /* If not Initialized then skip this function*/
1444:.\Generated_Source\PSoC5/LP.c ****         if(LP_initVar != 0u)
 1552              		.loc 1 1444 0
 1553 000a 274B     		ldr	r3, .L115
 1554 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1555 000e 002B     		cmp	r3, #0
 1556 0010 47D0     		beq	.L107
 1557              	.LBB2:
1445:.\Generated_Source\PSoC5/LP.c ****         {
1446:.\Generated_Source\PSoC5/LP.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:.\Generated_Source\PSoC5/LP.c ****             /* When that is done then reset the counter value back */
1448:.\Generated_Source\PSoC5/LP.c ****             uint8 tmpStat;
1449:.\Generated_Source\PSoC5/LP.c **** 
1450:.\Generated_Source\PSoC5/LP.c ****         #if(LP_HD_ENABLED) /* Half Duplex mode*/
1451:.\Generated_Source\PSoC5/LP.c **** 
1452:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_SEND_BREAK) ||
1453:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT ) )
1454:.\Generated_Source\PSoC5/LP.c ****             {
1455:.\Generated_Source\PSoC5/LP.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:.\Generated_Source\PSoC5/LP.c ****                 LP_WriteControlRegister(LP_ReadControlRegister() |
1457:.\Generated_Source\PSoC5/LP.c ****                                                       LP_CTRL_HD_SEND_BREAK);
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 54


1458:.\Generated_Source\PSoC5/LP.c ****                 /* Send zeros */
1459:.\Generated_Source\PSoC5/LP.c ****                 LP_TXDATA_REG = 0u;
1460:.\Generated_Source\PSoC5/LP.c **** 
1461:.\Generated_Source\PSoC5/LP.c ****                 do /* Wait until transmit starts */
1462:.\Generated_Source\PSoC5/LP.c ****                 {
1463:.\Generated_Source\PSoC5/LP.c ****                     tmpStat = LP_TXSTATUS_REG;
1464:.\Generated_Source\PSoC5/LP.c ****                 }
1465:.\Generated_Source\PSoC5/LP.c ****                 while((tmpStat & LP_TX_STS_FIFO_EMPTY) != 0u);
1466:.\Generated_Source\PSoC5/LP.c ****             }
1467:.\Generated_Source\PSoC5/LP.c **** 
1468:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_WAIT_FOR_COMPLETE_REINIT) ||
1469:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT) )
1470:.\Generated_Source\PSoC5/LP.c ****             {
1471:.\Generated_Source\PSoC5/LP.c ****                 do /* Wait until transmit complete */
1472:.\Generated_Source\PSoC5/LP.c ****                 {
1473:.\Generated_Source\PSoC5/LP.c ****                     tmpStat = LP_TXSTATUS_REG;
1474:.\Generated_Source\PSoC5/LP.c ****                 }
1475:.\Generated_Source\PSoC5/LP.c ****                 while(((uint8)~tmpStat & LP_TX_STS_COMPLETE) != 0u);
1476:.\Generated_Source\PSoC5/LP.c ****             }
1477:.\Generated_Source\PSoC5/LP.c **** 
1478:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_WAIT_FOR_COMPLETE_REINIT) ||
1479:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_REINIT) ||
1480:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT) )
1481:.\Generated_Source\PSoC5/LP.c ****             {
1482:.\Generated_Source\PSoC5/LP.c ****                 LP_WriteControlRegister(LP_ReadControlRegister() &
1483:.\Generated_Source\PSoC5/LP.c ****                                               (uint8)~LP_CTRL_HD_SEND_BREAK);
1484:.\Generated_Source\PSoC5/LP.c ****             }
1485:.\Generated_Source\PSoC5/LP.c **** 
1486:.\Generated_Source\PSoC5/LP.c ****         #else /* LP_HD_ENABLED Full Duplex mode */
1487:.\Generated_Source\PSoC5/LP.c **** 
1488:.\Generated_Source\PSoC5/LP.c ****             static uint8 txPeriod;
1489:.\Generated_Source\PSoC5/LP.c **** 
1490:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_SEND_BREAK) ||
 1558              		.loc 1 1490 0
 1559 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1560 0014 002B     		cmp	r3, #0
 1561 0016 02D0     		beq	.L109
 1562              		.loc 1 1490 0 is_stmt 0 discriminator 1
 1563 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1564 001a 032B     		cmp	r3, #3
 1565 001c 1BD1     		bne	.L110
 1566              	.L109:
1491:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT) )
1492:.\Generated_Source\PSoC5/LP.c ****             {
1493:.\Generated_Source\PSoC5/LP.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:.\Generated_Source\PSoC5/LP.c ****                 #if( (LP_PARITY_TYPE != LP__B_UART__NONE_REVB) || \
1495:.\Generated_Source\PSoC5/LP.c ****                                     (LP_PARITY_TYPE_SW != 0u) )
1496:.\Generated_Source\PSoC5/LP.c ****                     LP_WriteControlRegister(LP_ReadControlRegister() |
 1567              		.loc 1 1496 0 is_stmt 1
 1568 001e FFF7FEFF 		bl	LP_ReadControlRegister
 1569 0022 0346     		mov	r3, r0
 1570 0024 43F00203 		orr	r3, r3, #2
 1571 0028 DBB2     		uxtb	r3, r3
 1572 002a 1846     		mov	r0, r3
 1573 002c FFF7FEFF 		bl	LP_WriteControlRegister
1497:.\Generated_Source\PSoC5/LP.c ****                                                           LP_CTRL_HD_SEND_BREAK);
1498:.\Generated_Source\PSoC5/LP.c ****                 #endif /* End LP_PARITY_TYPE != LP__B_UART__NONE_REVB  */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 55


1499:.\Generated_Source\PSoC5/LP.c **** 
1500:.\Generated_Source\PSoC5/LP.c ****                 #if(LP_TXCLKGEN_DP)
1501:.\Generated_Source\PSoC5/LP.c ****                     txPeriod = LP_TXBITCLKTX_COMPLETE_REG;
 1574              		.loc 1 1501 0
 1575 0030 1E4B     		ldr	r3, .L115+4
 1576 0032 1B78     		ldrb	r3, [r3]
 1577 0034 DAB2     		uxtb	r2, r3
 1578 0036 1E4B     		ldr	r3, .L115+8
 1579 0038 1A70     		strb	r2, [r3]
1502:.\Generated_Source\PSoC5/LP.c ****                     LP_TXBITCLKTX_COMPLETE_REG = LP_TXBITCTR_BREAKBITS;
 1580              		.loc 1 1502 0
 1581 003a 1C4B     		ldr	r3, .L115+4
 1582 003c 6722     		movs	r2, #103
 1583 003e 1A70     		strb	r2, [r3]
1503:.\Generated_Source\PSoC5/LP.c ****                 #else
1504:.\Generated_Source\PSoC5/LP.c ****                     txPeriod = LP_TXBITCTR_PERIOD_REG;
1505:.\Generated_Source\PSoC5/LP.c ****                     LP_TXBITCTR_PERIOD_REG = LP_TXBITCTR_BREAKBITS8X;
1506:.\Generated_Source\PSoC5/LP.c ****                 #endif /* End LP_TXCLKGEN_DP */
1507:.\Generated_Source\PSoC5/LP.c **** 
1508:.\Generated_Source\PSoC5/LP.c ****                 /* Send zeros */
1509:.\Generated_Source\PSoC5/LP.c ****                 LP_TXDATA_REG = 0u;
 1584              		.loc 1 1509 0
 1585 0040 1C4B     		ldr	r3, .L115+12
 1586 0042 0022     		movs	r2, #0
 1587 0044 1A70     		strb	r2, [r3]
 1588              	.L111:
1510:.\Generated_Source\PSoC5/LP.c **** 
1511:.\Generated_Source\PSoC5/LP.c ****                 do /* Wait until transmit starts */
1512:.\Generated_Source\PSoC5/LP.c ****                 {
1513:.\Generated_Source\PSoC5/LP.c ****                     tmpStat = LP_TXSTATUS_REG;
 1589              		.loc 1 1513 0 discriminator 1
 1590 0046 1C4B     		ldr	r3, .L115+16
 1591 0048 1B78     		ldrb	r3, [r3]
 1592 004a FB73     		strb	r3, [r7, #15]
1514:.\Generated_Source\PSoC5/LP.c ****                 }
1515:.\Generated_Source\PSoC5/LP.c ****                 while((tmpStat & LP_TX_STS_FIFO_EMPTY) != 0u);
 1593              		.loc 1 1515 0 discriminator 1
 1594 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1595 004e 03F00203 		and	r3, r3, #2
 1596 0052 002B     		cmp	r3, #0
 1597 0054 F7D1     		bne	.L111
 1598              	.L110:
1516:.\Generated_Source\PSoC5/LP.c ****             }
1517:.\Generated_Source\PSoC5/LP.c **** 
1518:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_WAIT_FOR_COMPLETE_REINIT) ||
 1599              		.loc 1 1518 0
 1600 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1601 0058 012B     		cmp	r3, #1
 1602 005a 02D0     		beq	.L112
 1603              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1604 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1605 005e 032B     		cmp	r3, #3
 1606 0060 09D1     		bne	.L113
 1607              	.L112:
1519:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT) )
1520:.\Generated_Source\PSoC5/LP.c ****             {
1521:.\Generated_Source\PSoC5/LP.c ****                 do /* Wait until transmit complete */
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 56


1522:.\Generated_Source\PSoC5/LP.c ****                 {
1523:.\Generated_Source\PSoC5/LP.c ****                     tmpStat = LP_TXSTATUS_REG;
 1608              		.loc 1 1523 0 is_stmt 1 discriminator 1
 1609 0062 154B     		ldr	r3, .L115+16
 1610 0064 1B78     		ldrb	r3, [r3]
 1611 0066 FB73     		strb	r3, [r7, #15]
1524:.\Generated_Source\PSoC5/LP.c ****                 }
1525:.\Generated_Source\PSoC5/LP.c ****                 while(((uint8)~tmpStat & LP_TX_STS_COMPLETE) != 0u);
 1612              		.loc 1 1525 0 discriminator 1
 1613 0068 FB7B     		ldrb	r3, [r7, #15]
 1614 006a DB43     		mvns	r3, r3
 1615 006c DBB2     		uxtb	r3, r3
 1616 006e 03F00103 		and	r3, r3, #1
 1617 0072 002B     		cmp	r3, #0
 1618 0074 F5D1     		bne	.L112
 1619              	.L113:
1526:.\Generated_Source\PSoC5/LP.c ****             }
1527:.\Generated_Source\PSoC5/LP.c **** 
1528:.\Generated_Source\PSoC5/LP.c ****             if( (retMode == LP_WAIT_FOR_COMPLETE_REINIT) ||
 1620              		.loc 1 1528 0
 1621 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1622 0078 012B     		cmp	r3, #1
 1623 007a 05D0     		beq	.L114
 1624              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1625 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1626 007e 022B     		cmp	r3, #2
 1627 0080 02D0     		beq	.L114
1529:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_REINIT) ||
 1628              		.loc 1 1529 0 is_stmt 1
 1629 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1630 0084 032B     		cmp	r3, #3
 1631 0086 0CD1     		bne	.L107
 1632              	.L114:
1530:.\Generated_Source\PSoC5/LP.c ****                 (retMode == LP_SEND_WAIT_REINIT) )
1531:.\Generated_Source\PSoC5/LP.c ****             {
1532:.\Generated_Source\PSoC5/LP.c **** 
1533:.\Generated_Source\PSoC5/LP.c ****             #if(LP_TXCLKGEN_DP)
1534:.\Generated_Source\PSoC5/LP.c ****                 LP_TXBITCLKTX_COMPLETE_REG = txPeriod;
 1633              		.loc 1 1534 0
 1634 0088 084B     		ldr	r3, .L115+4
 1635 008a 094A     		ldr	r2, .L115+8
 1636 008c 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1637 008e 1A70     		strb	r2, [r3]
1535:.\Generated_Source\PSoC5/LP.c ****             #else
1536:.\Generated_Source\PSoC5/LP.c ****                 LP_TXBITCTR_PERIOD_REG = txPeriod;
1537:.\Generated_Source\PSoC5/LP.c ****             #endif /* End LP_TXCLKGEN_DP */
1538:.\Generated_Source\PSoC5/LP.c **** 
1539:.\Generated_Source\PSoC5/LP.c ****             #if( (LP_PARITY_TYPE != LP__B_UART__NONE_REVB) || \
1540:.\Generated_Source\PSoC5/LP.c ****                  (LP_PARITY_TYPE_SW != 0u) )
1541:.\Generated_Source\PSoC5/LP.c ****                 LP_WriteControlRegister(LP_ReadControlRegister() &
 1638              		.loc 1 1541 0
 1639 0090 FFF7FEFF 		bl	LP_ReadControlRegister
 1640 0094 0346     		mov	r3, r0
 1641 0096 23F00203 		bic	r3, r3, #2
 1642 009a DBB2     		uxtb	r3, r3
 1643 009c 1846     		mov	r0, r3
 1644 009e FFF7FEFF 		bl	LP_WriteControlRegister
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 57


 1645              	.L107:
 1646              	.LBE2:
1542:.\Generated_Source\PSoC5/LP.c ****                                                       (uint8) ~LP_CTRL_HD_SEND_BREAK);
1543:.\Generated_Source\PSoC5/LP.c ****             #endif /* End LP_PARITY_TYPE != NONE */
1544:.\Generated_Source\PSoC5/LP.c ****             }
1545:.\Generated_Source\PSoC5/LP.c ****         #endif    /* End LP_HD_ENABLED */
1546:.\Generated_Source\PSoC5/LP.c ****         }
1547:.\Generated_Source\PSoC5/LP.c ****     }
 1647              		.loc 1 1547 0
 1648 00a2 1037     		adds	r7, r7, #16
 1649 00a4 BD46     		mov	sp, r7
 1650              		@ sp needed
 1651 00a6 80BD     		pop	{r7, pc}
 1652              	.L116:
 1653              		.align	2
 1654              	.L115:
 1655 00a8 00000000 		.word	LP_initVar
 1656 00ac 3A640040 		.word	1073767482
 1657 00b0 06000000 		.word	txPeriod.4988
 1658 00b4 4B640040 		.word	1073767499
 1659 00b8 6B640040 		.word	1073767531
 1660              		.cfi_endproc
 1661              	.LFE25:
 1662              		.size	LP_SendBreak, .-LP_SendBreak
 1663              		.section	.text.LP_SetTxAddressMode,"ax",%progbits
 1664              		.align	2
 1665              		.global	LP_SetTxAddressMode
 1666              		.thumb
 1667              		.thumb_func
 1668              		.type	LP_SetTxAddressMode, %function
 1669              	LP_SetTxAddressMode:
 1670              	.LFB26:
1548:.\Generated_Source\PSoC5/LP.c **** 
1549:.\Generated_Source\PSoC5/LP.c **** 
1550:.\Generated_Source\PSoC5/LP.c ****     /*******************************************************************************
1551:.\Generated_Source\PSoC5/LP.c ****     * Function Name: LP_SetTxAddressMode
1552:.\Generated_Source\PSoC5/LP.c ****     ********************************************************************************
1553:.\Generated_Source\PSoC5/LP.c ****     *
1554:.\Generated_Source\PSoC5/LP.c ****     * Summary:
1555:.\Generated_Source\PSoC5/LP.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:.\Generated_Source\PSoC5/LP.c ****     *
1557:.\Generated_Source\PSoC5/LP.c ****     * Parameters:
1558:.\Generated_Source\PSoC5/LP.c ****     *  addressMode: 
1559:.\Generated_Source\PSoC5/LP.c ****     *       LP_SET_SPACE - Configure the transmitter to send the next
1560:.\Generated_Source\PSoC5/LP.c ****     *                                    byte as a data.
1561:.\Generated_Source\PSoC5/LP.c ****     *       LP_SET_MARK  - Configure the transmitter to send the next
1562:.\Generated_Source\PSoC5/LP.c ****     *                                    byte as an address.
1563:.\Generated_Source\PSoC5/LP.c ****     *
1564:.\Generated_Source\PSoC5/LP.c ****     * Return:
1565:.\Generated_Source\PSoC5/LP.c ****     *  None.
1566:.\Generated_Source\PSoC5/LP.c ****     *
1567:.\Generated_Source\PSoC5/LP.c ****     * Side Effects:
1568:.\Generated_Source\PSoC5/LP.c ****     *  This function sets and clears LP_CTRL_MARK bit in the Control
1569:.\Generated_Source\PSoC5/LP.c ****     *  register.
1570:.\Generated_Source\PSoC5/LP.c ****     *
1571:.\Generated_Source\PSoC5/LP.c ****     *******************************************************************************/
1572:.\Generated_Source\PSoC5/LP.c ****     void LP_SetTxAddressMode(uint8 addressMode) 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 58


1573:.\Generated_Source\PSoC5/LP.c ****     {
 1671              		.loc 1 1573 0
 1672              		.cfi_startproc
 1673              		@ args = 0, pretend = 0, frame = 8
 1674              		@ frame_needed = 1, uses_anonymous_args = 0
 1675              		@ link register save eliminated.
 1676 0000 80B4     		push	{r7}
 1677              		.cfi_def_cfa_offset 4
 1678              		.cfi_offset 7, -4
 1679 0002 83B0     		sub	sp, sp, #12
 1680              		.cfi_def_cfa_offset 16
 1681 0004 00AF     		add	r7, sp, #0
 1682              		.cfi_def_cfa_register 7
 1683 0006 0346     		mov	r3, r0
 1684 0008 FB71     		strb	r3, [r7, #7]
1574:.\Generated_Source\PSoC5/LP.c ****         /* Mark/Space sending enable */
1575:.\Generated_Source\PSoC5/LP.c ****         if(addressMode != 0u)
1576:.\Generated_Source\PSoC5/LP.c ****         {
1577:.\Generated_Source\PSoC5/LP.c ****         #if( LP_CONTROL_REG_REMOVED == 0u )
1578:.\Generated_Source\PSoC5/LP.c ****             LP_WriteControlRegister(LP_ReadControlRegister() |
1579:.\Generated_Source\PSoC5/LP.c ****                                                   LP_CTRL_MARK);
1580:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_CONTROL_REG_REMOVED == 0u */
1581:.\Generated_Source\PSoC5/LP.c ****         }
1582:.\Generated_Source\PSoC5/LP.c ****         else
1583:.\Generated_Source\PSoC5/LP.c ****         {
1584:.\Generated_Source\PSoC5/LP.c ****         #if( LP_CONTROL_REG_REMOVED == 0u )
1585:.\Generated_Source\PSoC5/LP.c ****             LP_WriteControlRegister(LP_ReadControlRegister() &
1586:.\Generated_Source\PSoC5/LP.c ****                                                   (uint8) ~LP_CTRL_MARK);
1587:.\Generated_Source\PSoC5/LP.c ****         #endif /* End LP_CONTROL_REG_REMOVED == 0u */
1588:.\Generated_Source\PSoC5/LP.c ****         }
1589:.\Generated_Source\PSoC5/LP.c ****     }
 1685              		.loc 1 1589 0
 1686 000a 0C37     		adds	r7, r7, #12
 1687 000c BD46     		mov	sp, r7
 1688              		@ sp needed
 1689 000e 5DF8047B 		ldr	r7, [sp], #4
 1690 0012 7047     		bx	lr
 1691              		.cfi_endproc
 1692              	.LFE26:
 1693              		.size	LP_SetTxAddressMode, .-LP_SetTxAddressMode
 1694              		.bss
 1695              	txPeriod.4988:
 1696 0006 00       		.space	1
 1697              		.text
 1698              	.Letext0:
 1699              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 1700              		.section	.debug_info,"",%progbits
 1701              	.Ldebug_info0:
 1702 0000 E3050000 		.4byte	0x5e3
 1703 0004 0400     		.2byte	0x4
 1704 0006 00000000 		.4byte	.Ldebug_abbrev0
 1705 000a 04       		.byte	0x4
 1706 000b 01       		.uleb128 0x1
 1707 000c 04020000 		.4byte	.LASF72
 1708 0010 01       		.byte	0x1
 1709 0011 C5020000 		.4byte	.LASF73
 1710 0015 58030000 		.4byte	.LASF74
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 59


 1711 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1712 001d 00000000 		.4byte	0
 1713 0021 00000000 		.4byte	.Ldebug_line0
 1714 0025 02       		.uleb128 0x2
 1715 0026 01       		.byte	0x1
 1716 0027 06       		.byte	0x6
 1717 0028 A0000000 		.4byte	.LASF0
 1718 002c 02       		.uleb128 0x2
 1719 002d 01       		.byte	0x1
 1720 002e 08       		.byte	0x8
 1721 002f 1E030000 		.4byte	.LASF1
 1722 0033 02       		.uleb128 0x2
 1723 0034 02       		.byte	0x2
 1724 0035 05       		.byte	0x5
 1725 0036 2C030000 		.4byte	.LASF2
 1726 003a 02       		.uleb128 0x2
 1727 003b 02       		.byte	0x2
 1728 003c 07       		.byte	0x7
 1729 003d 95010000 		.4byte	.LASF3
 1730 0041 02       		.uleb128 0x2
 1731 0042 04       		.byte	0x4
 1732 0043 05       		.byte	0x5
 1733 0044 CA000000 		.4byte	.LASF4
 1734 0048 02       		.uleb128 0x2
 1735 0049 04       		.byte	0x4
 1736 004a 07       		.byte	0x7
 1737 004b 72010000 		.4byte	.LASF5
 1738 004f 02       		.uleb128 0x2
 1739 0050 08       		.byte	0x8
 1740 0051 05       		.byte	0x5
 1741 0052 92000000 		.4byte	.LASF6
 1742 0056 02       		.uleb128 0x2
 1743 0057 08       		.byte	0x8
 1744 0058 07       		.byte	0x7
 1745 0059 5C000000 		.4byte	.LASF7
 1746 005d 03       		.uleb128 0x3
 1747 005e 04       		.byte	0x4
 1748 005f 05       		.byte	0x5
 1749 0060 696E7400 		.ascii	"int\000"
 1750 0064 02       		.uleb128 0x2
 1751 0065 04       		.byte	0x4
 1752 0066 07       		.byte	0x7
 1753 0067 29010000 		.4byte	.LASF8
 1754 006b 04       		.uleb128 0x4
 1755 006c E3000000 		.4byte	.LASF9
 1756 0070 02       		.byte	0x2
 1757 0071 B4       		.byte	0xb4
 1758 0072 2C000000 		.4byte	0x2c
 1759 0076 04       		.uleb128 0x4
 1760 0077 0B000000 		.4byte	.LASF10
 1761 007b 02       		.byte	0x2
 1762 007c B5       		.byte	0xb5
 1763 007d 3A000000 		.4byte	0x3a
 1764 0081 04       		.uleb128 0x4
 1765 0082 12010000 		.4byte	.LASF11
 1766 0086 02       		.byte	0x2
 1767 0087 B6       		.byte	0xb6
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 60


 1768 0088 48000000 		.4byte	0x48
 1769 008c 02       		.uleb128 0x2
 1770 008d 04       		.byte	0x4
 1771 008e 04       		.byte	0x4
 1772 008f E3020000 		.4byte	.LASF12
 1773 0093 02       		.uleb128 0x2
 1774 0094 08       		.byte	0x8
 1775 0095 04       		.byte	0x4
 1776 0096 FF000000 		.4byte	.LASF13
 1777 009a 04       		.uleb128 0x4
 1778 009b CD030000 		.4byte	.LASF14
 1779 009f 02       		.byte	0x2
 1780 00a0 C5       		.byte	0xc5
 1781 00a1 A5000000 		.4byte	0xa5
 1782 00a5 02       		.uleb128 0x2
 1783 00a6 01       		.byte	0x1
 1784 00a7 08       		.byte	0x8
 1785 00a8 C8030000 		.4byte	.LASF15
 1786 00ac 05       		.uleb128 0x5
 1787 00ad 19030000 		.4byte	.LASF16
 1788 00b1 02       		.byte	0x2
 1789 00b2 5E01     		.2byte	0x15e
 1790 00b4 B8000000 		.4byte	0xb8
 1791 00b8 06       		.uleb128 0x6
 1792 00b9 6B000000 		.4byte	0x6b
 1793 00bd 05       		.uleb128 0x5
 1794 00be CE010000 		.4byte	.LASF17
 1795 00c2 02       		.byte	0x2
 1796 00c3 6001     		.2byte	0x160
 1797 00c5 C9000000 		.4byte	0xc9
 1798 00c9 06       		.uleb128 0x6
 1799 00ca 81000000 		.4byte	0x81
 1800 00ce 02       		.uleb128 0x2
 1801 00cf 04       		.byte	0x4
 1802 00d0 07       		.byte	0x7
 1803 00d1 DC010000 		.4byte	.LASF18
 1804 00d5 07       		.uleb128 0x7
 1805 00d6 26040000 		.4byte	.LASF19
 1806 00da 01       		.byte	0x1
 1807 00db 4C       		.byte	0x4c
 1808 00dc 00000000 		.4byte	.LFB0
 1809 00e0 20000000 		.4byte	.LFE0-.LFB0
 1810 00e4 01       		.uleb128 0x1
 1811 00e5 9C       		.byte	0x9c
 1812 00e6 07       		.uleb128 0x7
 1813 00e7 BD020000 		.4byte	.LASF20
 1814 00eb 01       		.byte	0x1
 1815 00ec 6A       		.byte	0x6a
 1816 00ed 00000000 		.4byte	.LFB1
 1817 00f1 58000000 		.4byte	.LFE1-.LFB1
 1818 00f5 01       		.uleb128 0x1
 1819 00f6 9C       		.byte	0x9c
 1820 00f7 08       		.uleb128 0x8
 1821 00f8 66040000 		.4byte	.LASF21
 1822 00fc 01       		.byte	0x1
 1823 00fd B7       		.byte	0xb7
 1824 00fe 00000000 		.4byte	.LFB2
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 61


 1825 0102 64000000 		.4byte	.LFE2-.LFB2
 1826 0106 01       		.uleb128 0x1
 1827 0107 9C       		.byte	0x9c
 1828 0108 1B010000 		.4byte	0x11b
 1829 010c 09       		.uleb128 0x9
 1830 010d EF030000 		.4byte	.LASF23
 1831 0111 01       		.byte	0x1
 1832 0112 B9       		.byte	0xb9
 1833 0113 6B000000 		.4byte	0x6b
 1834 0117 02       		.uleb128 0x2
 1835 0118 91       		.byte	0x91
 1836 0119 77       		.sleb128 -9
 1837 011a 00       		.byte	0
 1838 011b 08       		.uleb128 0x8
 1839 011c C2000000 		.4byte	.LASF22
 1840 0120 01       		.byte	0x1
 1841 0121 F0       		.byte	0xf0
 1842 0122 00000000 		.4byte	.LFB3
 1843 0126 64000000 		.4byte	.LFE3-.LFB3
 1844 012a 01       		.uleb128 0x1
 1845 012b 9C       		.byte	0x9c
 1846 012c 3F010000 		.4byte	0x13f
 1847 0130 09       		.uleb128 0x9
 1848 0131 EF030000 		.4byte	.LASF23
 1849 0135 01       		.byte	0x1
 1850 0136 F2       		.byte	0xf2
 1851 0137 6B000000 		.4byte	0x6b
 1852 013b 02       		.uleb128 0x2
 1853 013c 91       		.byte	0x91
 1854 013d 77       		.sleb128 -9
 1855 013e 00       		.byte	0
 1856 013f 0A       		.uleb128 0xa
 1857 0140 ED010000 		.4byte	.LASF49
 1858 0144 01       		.byte	0x1
 1859 0145 2701     		.2byte	0x127
 1860 0147 6B000000 		.4byte	0x6b
 1861 014b 00000000 		.4byte	.LFB4
 1862 014f 10000000 		.4byte	.LFE4-.LFB4
 1863 0153 01       		.uleb128 0x1
 1864 0154 9C       		.byte	0x9c
 1865 0155 0B       		.uleb128 0xb
 1866 0156 36030000 		.4byte	.LASF24
 1867 015a 01       		.byte	0x1
 1868 015b 3F01     		.2byte	0x13f
 1869 015d 00000000 		.4byte	.LFB5
 1870 0161 14000000 		.4byte	.LFE5-.LFB5
 1871 0165 01       		.uleb128 0x1
 1872 0166 9C       		.byte	0x9c
 1873 0167 7B010000 		.4byte	0x17b
 1874 016b 0C       		.uleb128 0xc
 1875 016c 19010000 		.4byte	.LASF26
 1876 0170 01       		.byte	0x1
 1877 0171 3F01     		.2byte	0x13f
 1878 0173 6B000000 		.4byte	0x6b
 1879 0177 02       		.uleb128 0x2
 1880 0178 91       		.byte	0x91
 1881 0179 77       		.sleb128 -9
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 62


 1882 017a 00       		.byte	0
 1883 017b 0B       		.uleb128 0xb
 1884 017c E9000000 		.4byte	.LASF25
 1885 0180 01       		.byte	0x1
 1886 0181 6701     		.2byte	0x167
 1887 0183 00000000 		.4byte	.LFB6
 1888 0187 20000000 		.4byte	.LFE6-.LFB6
 1889 018b 01       		.uleb128 0x1
 1890 018c 9C       		.byte	0x9c
 1891 018d A1010000 		.4byte	0x1a1
 1892 0191 0C       		.uleb128 0xc
 1893 0192 B1010000 		.4byte	.LASF27
 1894 0196 01       		.byte	0x1
 1895 0197 6701     		.2byte	0x167
 1896 0199 6B000000 		.4byte	0x6b
 1897 019d 02       		.uleb128 0x2
 1898 019e 91       		.byte	0x91
 1899 019f 77       		.sleb128 -9
 1900 01a0 00       		.byte	0
 1901 01a1 0D       		.uleb128 0xd
 1902 01a2 73000000 		.4byte	.LASF31
 1903 01a6 01       		.byte	0x1
 1904 01a7 8801     		.2byte	0x188
 1905 01a9 6B000000 		.4byte	0x6b
 1906 01ad 00000000 		.4byte	.LFB7
 1907 01b1 94000000 		.4byte	.LFE7-.LFB7
 1908 01b5 01       		.uleb128 0x1
 1909 01b6 9C       		.byte	0x9c
 1910 01b7 E9010000 		.4byte	0x1e9
 1911 01bb 0E       		.uleb128 0xe
 1912 01bc 9C030000 		.4byte	.LASF28
 1913 01c0 01       		.byte	0x1
 1914 01c1 8A01     		.2byte	0x18a
 1915 01c3 6B000000 		.4byte	0x6b
 1916 01c7 02       		.uleb128 0x2
 1917 01c8 91       		.byte	0x91
 1918 01c9 77       		.sleb128 -9
 1919 01ca 0E       		.uleb128 0xe
 1920 01cb DF030000 		.4byte	.LASF29
 1921 01cf 01       		.byte	0x1
 1922 01d0 8E01     		.2byte	0x18e
 1923 01d2 6B000000 		.4byte	0x6b
 1924 01d6 02       		.uleb128 0x2
 1925 01d7 91       		.byte	0x91
 1926 01d8 76       		.sleb128 -10
 1927 01d9 0E       		.uleb128 0xe
 1928 01da 80020000 		.4byte	.LASF30
 1929 01de 01       		.byte	0x1
 1930 01df 8F01     		.2byte	0x18f
 1931 01e1 6B000000 		.4byte	0x6b
 1932 01e5 02       		.uleb128 0x2
 1933 01e6 91       		.byte	0x91
 1934 01e7 75       		.sleb128 -11
 1935 01e8 00       		.byte	0
 1936 01e9 0D       		.uleb128 0xd
 1937 01ea D3000000 		.4byte	.LASF32
 1938 01ee 01       		.byte	0x1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 63


 1939 01ef E501     		.2byte	0x1e5
 1940 01f1 6B000000 		.4byte	0x6b
 1941 01f5 00000000 		.4byte	.LFB8
 1942 01f9 40000000 		.4byte	.LFE8-.LFB8
 1943 01fd 01       		.uleb128 0x1
 1944 01fe 9C       		.byte	0x9c
 1945 01ff 13020000 		.4byte	0x213
 1946 0203 0E       		.uleb128 0xe
 1947 0204 10040000 		.4byte	.LASF33
 1948 0208 01       		.byte	0x1
 1949 0209 E701     		.2byte	0x1e7
 1950 020b 6B000000 		.4byte	0x6b
 1951 020f 02       		.uleb128 0x2
 1952 0210 91       		.byte	0x91
 1953 0211 77       		.sleb128 -9
 1954 0212 00       		.byte	0
 1955 0213 0D       		.uleb128 0xd
 1956 0214 45040000 		.4byte	.LASF34
 1957 0218 01       		.byte	0x1
 1958 0219 1402     		.2byte	0x214
 1959 021b 6B000000 		.4byte	0x6b
 1960 021f 00000000 		.4byte	.LFB9
 1961 0223 B8000000 		.4byte	.LFE9-.LFB9
 1962 0227 01       		.uleb128 0x1
 1963 0228 9C       		.byte	0x9c
 1964 0229 6A020000 		.4byte	0x26a
 1965 022d 0E       		.uleb128 0xe
 1966 022e 9C030000 		.4byte	.LASF28
 1967 0232 01       		.byte	0x1
 1968 0233 1602     		.2byte	0x216
 1969 0235 6B000000 		.4byte	0x6b
 1970 0239 02       		.uleb128 0x2
 1971 023a 91       		.byte	0x91
 1972 023b 77       		.sleb128 -9
 1973 023c 0E       		.uleb128 0xe
 1974 023d 91020000 		.4byte	.LASF35
 1975 0241 01       		.byte	0x1
 1976 0242 1702     		.2byte	0x217
 1977 0244 6B000000 		.4byte	0x6b
 1978 0248 02       		.uleb128 0x2
 1979 0249 91       		.byte	0x91
 1980 024a 74       		.sleb128 -12
 1981 024b 0E       		.uleb128 0xe
 1982 024c DF030000 		.4byte	.LASF29
 1983 0250 01       		.byte	0x1
 1984 0251 1A02     		.2byte	0x21a
 1985 0253 6B000000 		.4byte	0x6b
 1986 0257 02       		.uleb128 0x2
 1987 0258 91       		.byte	0x91
 1988 0259 76       		.sleb128 -10
 1989 025a 0E       		.uleb128 0xe
 1990 025b 80020000 		.4byte	.LASF30
 1991 025f 01       		.byte	0x1
 1992 0260 1B02     		.2byte	0x21b
 1993 0262 6B000000 		.4byte	0x6b
 1994 0266 02       		.uleb128 0x2
 1995 0267 91       		.byte	0x91
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 64


 1996 0268 75       		.sleb128 -11
 1997 0269 00       		.byte	0
 1998 026a 0F       		.uleb128 0xf
 1999 026b B8010000 		.4byte	.LASF36
 2000 026f 01       		.byte	0x1
 2001 0270 7A02     		.2byte	0x27a
 2002 0272 76000000 		.4byte	0x76
 2003 0276 00000000 		.4byte	.LFB10
 2004 027a 44000000 		.4byte	.LFE10-.LFB10
 2005 027e 01       		.uleb128 0x1
 2006 027f 9C       		.byte	0x9c
 2007 0280 94020000 		.4byte	0x294
 2008 0284 0E       		.uleb128 0xe
 2009 0285 63010000 		.4byte	.LASF37
 2010 0289 01       		.byte	0x1
 2011 028a 7E02     		.2byte	0x27e
 2012 028c 76000000 		.4byte	0x76
 2013 0290 02       		.uleb128 0x2
 2014 0291 91       		.byte	0x91
 2015 0292 6E       		.sleb128 -18
 2016 0293 00       		.byte	0
 2017 0294 0D       		.uleb128 0xd
 2018 0295 F9020000 		.4byte	.LASF38
 2019 0299 01       		.byte	0x1
 2020 029a AB02     		.2byte	0x2ab
 2021 029c 6B000000 		.4byte	0x6b
 2022 02a0 00000000 		.4byte	.LFB11
 2023 02a4 90000000 		.4byte	.LFE11-.LFB11
 2024 02a8 01       		.uleb128 0x1
 2025 02a9 9C       		.byte	0x9c
 2026 02aa BE020000 		.4byte	0x2be
 2027 02ae 0E       		.uleb128 0xe
 2028 02af 90010000 		.4byte	.LASF39
 2029 02b3 01       		.byte	0x1
 2030 02b4 AE02     		.2byte	0x2ae
 2031 02b6 6B000000 		.4byte	0x6b
 2032 02ba 02       		.uleb128 0x2
 2033 02bb 91       		.byte	0x91
 2034 02bc 77       		.sleb128 -9
 2035 02bd 00       		.byte	0
 2036 02be 10       		.uleb128 0x10
 2037 02bf A3030000 		.4byte	.LASF40
 2038 02c3 01       		.byte	0x1
 2039 02c4 F502     		.2byte	0x2f5
 2040 02c6 00000000 		.4byte	.LFB12
 2041 02ca 7C000000 		.4byte	.LFE12-.LFB12
 2042 02ce 01       		.uleb128 0x1
 2043 02cf 9C       		.byte	0x9c
 2044 02d0 E4020000 		.4byte	0x2e4
 2045 02d4 0E       		.uleb128 0xe
 2046 02d5 EF030000 		.4byte	.LASF23
 2047 02d9 01       		.byte	0x1
 2048 02da F702     		.2byte	0x2f7
 2049 02dc 6B000000 		.4byte	0x6b
 2050 02e0 02       		.uleb128 0x2
 2051 02e1 91       		.byte	0x91
 2052 02e2 77       		.sleb128 -9
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 65


 2053 02e3 00       		.byte	0
 2054 02e4 0B       		.uleb128 0xb
 2055 02e5 48000000 		.4byte	.LASF41
 2056 02e9 01       		.byte	0x1
 2057 02ea 2D03     		.2byte	0x32d
 2058 02ec 00000000 		.4byte	.LFB13
 2059 02f0 14000000 		.4byte	.LFE13-.LFB13
 2060 02f4 01       		.uleb128 0x1
 2061 02f5 9C       		.byte	0x9c
 2062 02f6 0A030000 		.4byte	0x30a
 2063 02fa 0C       		.uleb128 0xc
 2064 02fb 06010000 		.4byte	.LASF42
 2065 02ff 01       		.byte	0x1
 2066 0300 2D03     		.2byte	0x32d
 2067 0302 6B000000 		.4byte	0x6b
 2068 0306 02       		.uleb128 0x2
 2069 0307 91       		.byte	0x91
 2070 0308 77       		.sleb128 -9
 2071 0309 00       		.byte	0
 2072 030a 0B       		.uleb128 0xb
 2073 030b 36010000 		.4byte	.LASF43
 2074 030f 01       		.byte	0x1
 2075 0310 5903     		.2byte	0x359
 2076 0312 00000000 		.4byte	.LFB14
 2077 0316 20000000 		.4byte	.LFE14-.LFB14
 2078 031a 01       		.uleb128 0x1
 2079 031b 9C       		.byte	0x9c
 2080 031c 30030000 		.4byte	0x330
 2081 0320 0C       		.uleb128 0xc
 2082 0321 E5010000 		.4byte	.LASF44
 2083 0325 01       		.byte	0x1
 2084 0326 5903     		.2byte	0x359
 2085 0328 6B000000 		.4byte	0x6b
 2086 032c 02       		.uleb128 0x2
 2087 032d 91       		.byte	0x91
 2088 032e 77       		.sleb128 -9
 2089 032f 00       		.byte	0
 2090 0330 0B       		.uleb128 0xb
 2091 0331 47010000 		.4byte	.LASF45
 2092 0335 01       		.byte	0x1
 2093 0336 6D03     		.2byte	0x36d
 2094 0338 00000000 		.4byte	.LFB15
 2095 033c 20000000 		.4byte	.LFE15-.LFB15
 2096 0340 01       		.uleb128 0x1
 2097 0341 9C       		.byte	0x9c
 2098 0342 56030000 		.4byte	0x356
 2099 0346 0C       		.uleb128 0xc
 2100 0347 E5010000 		.4byte	.LASF44
 2101 034b 01       		.byte	0x1
 2102 034c 6D03     		.2byte	0x36d
 2103 034e 6B000000 		.4byte	0x6b
 2104 0352 02       		.uleb128 0x2
 2105 0353 91       		.byte	0x91
 2106 0354 77       		.sleb128 -9
 2107 0355 00       		.byte	0
 2108 0356 0B       		.uleb128 0xb
 2109 0357 50040000 		.4byte	.LASF46
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 66


 2110 035b 01       		.byte	0x1
 2111 035c 8C03     		.2byte	0x38c
 2112 035e 00000000 		.4byte	.LFB16
 2113 0362 20000000 		.4byte	.LFE16-.LFB16
 2114 0366 01       		.uleb128 0x1
 2115 0367 9C       		.byte	0x9c
 2116 0368 7C030000 		.4byte	0x37c
 2117 036c 0C       		.uleb128 0xc
 2118 036d B1010000 		.4byte	.LASF27
 2119 0371 01       		.byte	0x1
 2120 0372 8C03     		.2byte	0x38c
 2121 0374 6B000000 		.4byte	0x6b
 2122 0378 02       		.uleb128 0x2
 2123 0379 91       		.byte	0x91
 2124 037a 77       		.sleb128 -9
 2125 037b 00       		.byte	0
 2126 037c 0B       		.uleb128 0xb
 2127 037d 17040000 		.4byte	.LASF47
 2128 0381 01       		.byte	0x1
 2129 0382 AE03     		.2byte	0x3ae
 2130 0384 00000000 		.4byte	.LFB17
 2131 0388 2C000000 		.4byte	.LFE17-.LFB17
 2132 038c 01       		.uleb128 0x1
 2133 038d 9C       		.byte	0x9c
 2134 038e A2030000 		.4byte	0x3a2
 2135 0392 0C       		.uleb128 0xc
 2136 0393 12000000 		.4byte	.LASF48
 2137 0397 01       		.byte	0x1
 2138 0398 AE03     		.2byte	0x3ae
 2139 039a 6B000000 		.4byte	0x6b
 2140 039e 02       		.uleb128 0x2
 2141 039f 91       		.byte	0x91
 2142 03a0 77       		.sleb128 -9
 2143 03a1 00       		.byte	0
 2144 03a2 0A       		.uleb128 0xa
 2145 03a3 E9020000 		.4byte	.LASF50
 2146 03a7 01       		.byte	0x1
 2147 03a8 EB03     		.2byte	0x3eb
 2148 03aa 6B000000 		.4byte	0x6b
 2149 03ae 00000000 		.4byte	.LFB18
 2150 03b2 18000000 		.4byte	.LFE18-.LFB18
 2151 03b6 01       		.uleb128 0x1
 2152 03b7 9C       		.byte	0x9c
 2153 03b8 0B       		.uleb128 0xb
 2154 03b9 58010000 		.4byte	.LASF51
 2155 03bd 01       		.byte	0x1
 2156 03be 1104     		.2byte	0x411
 2157 03c0 00000000 		.4byte	.LFB19
 2158 03c4 34000000 		.4byte	.LFE19-.LFB19
 2159 03c8 01       		.uleb128 0x1
 2160 03c9 9C       		.byte	0x9c
 2161 03ca DE030000 		.4byte	0x3de
 2162 03ce 0C       		.uleb128 0xc
 2163 03cf 12000000 		.4byte	.LASF48
 2164 03d3 01       		.byte	0x1
 2165 03d4 1104     		.2byte	0x411
 2166 03d6 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 67


 2167 03da 02       		.uleb128 0x2
 2168 03db 91       		.byte	0x91
 2169 03dc 77       		.sleb128 -9
 2170 03dd 00       		.byte	0
 2171 03de 10       		.uleb128 0x10
 2172 03df B5000000 		.4byte	.LASF52
 2173 03e3 01       		.byte	0x1
 2174 03e4 7904     		.2byte	0x479
 2175 03e6 00000000 		.4byte	.LFB20
 2176 03ea 40000000 		.4byte	.LFE20-.LFB20
 2177 03ee 01       		.uleb128 0x1
 2178 03ef 9C       		.byte	0x9c
 2179 03f0 13040000 		.4byte	0x413
 2180 03f4 0C       		.uleb128 0xc
 2181 03f5 30000000 		.4byte	.LASF53
 2182 03f9 01       		.byte	0x1
 2183 03fa 7904     		.2byte	0x479
 2184 03fc 13040000 		.4byte	0x413
 2185 0400 02       		.uleb128 0x2
 2186 0401 91       		.byte	0x91
 2187 0402 6C       		.sleb128 -20
 2188 0403 0E       		.uleb128 0xe
 2189 0404 A8010000 		.4byte	.LASF54
 2190 0408 01       		.byte	0x1
 2191 0409 7B04     		.2byte	0x47b
 2192 040b 76000000 		.4byte	0x76
 2193 040f 02       		.uleb128 0x2
 2194 0410 91       		.byte	0x91
 2195 0411 76       		.sleb128 -10
 2196 0412 00       		.byte	0
 2197 0413 11       		.uleb128 0x11
 2198 0414 04       		.byte	0x4
 2199 0415 19040000 		.4byte	0x419
 2200 0419 12       		.uleb128 0x12
 2201 041a 9A000000 		.4byte	0x9a
 2202 041e 10       		.uleb128 0x10
 2203 041f D3030000 		.4byte	.LASF55
 2204 0423 01       		.byte	0x1
 2205 0424 A704     		.2byte	0x4a7
 2206 0426 00000000 		.4byte	.LFB21
 2207 042a 40000000 		.4byte	.LFE21-.LFB21
 2208 042e 01       		.uleb128 0x1
 2209 042f 9C       		.byte	0x9c
 2210 0430 62040000 		.4byte	0x462
 2211 0434 0C       		.uleb128 0xc
 2212 0435 30000000 		.4byte	.LASF53
 2213 0439 01       		.byte	0x1
 2214 043a A704     		.2byte	0x4a7
 2215 043c 62040000 		.4byte	0x462
 2216 0440 02       		.uleb128 0x2
 2217 0441 91       		.byte	0x91
 2218 0442 6C       		.sleb128 -20
 2219 0443 0C       		.uleb128 0xc
 2220 0444 4E030000 		.4byte	.LASF56
 2221 0448 01       		.byte	0x1
 2222 0449 A704     		.2byte	0x4a7
 2223 044b 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 68


 2224 044f 02       		.uleb128 0x2
 2225 0450 91       		.byte	0x91
 2226 0451 6B       		.sleb128 -21
 2227 0452 0E       		.uleb128 0xe
 2228 0453 A8010000 		.4byte	.LASF54
 2229 0457 01       		.byte	0x1
 2230 0458 AA04     		.2byte	0x4aa
 2231 045a 6B000000 		.4byte	0x6b
 2232 045e 02       		.uleb128 0x2
 2233 045f 91       		.byte	0x91
 2234 0460 77       		.sleb128 -9
 2235 0461 00       		.byte	0
 2236 0462 11       		.uleb128 0x11
 2237 0463 04       		.byte	0x4
 2238 0464 68040000 		.4byte	0x468
 2239 0468 12       		.uleb128 0x12
 2240 0469 6B000000 		.4byte	0x6b
 2241 046d 10       		.uleb128 0x10
 2242 046e C3010000 		.4byte	.LASF57
 2243 0472 01       		.byte	0x1
 2244 0473 CE04     		.2byte	0x4ce
 2245 0475 00000000 		.4byte	.LFB22
 2246 0479 30000000 		.4byte	.LFE22-.LFB22
 2247 047d 01       		.uleb128 0x1
 2248 047e 9C       		.byte	0x9c
 2249 047f 93040000 		.4byte	0x493
 2250 0483 0C       		.uleb128 0xc
 2251 0484 12000000 		.4byte	.LASF48
 2252 0488 01       		.byte	0x1
 2253 0489 CE04     		.2byte	0x4ce
 2254 048b 6B000000 		.4byte	0x6b
 2255 048f 02       		.uleb128 0x2
 2256 0490 91       		.byte	0x91
 2257 0491 77       		.sleb128 -9
 2258 0492 00       		.byte	0
 2259 0493 0D       		.uleb128 0xd
 2260 0494 1D000000 		.4byte	.LASF58
 2261 0498 01       		.byte	0x1
 2262 0499 F904     		.2byte	0x4f9
 2263 049b 6B000000 		.4byte	0x6b
 2264 049f 00000000 		.4byte	.LFB23
 2265 04a3 44000000 		.4byte	.LFE23-.LFB23
 2266 04a7 01       		.uleb128 0x1
 2267 04a8 9C       		.byte	0x9c
 2268 04a9 BD040000 		.4byte	0x4bd
 2269 04ad 0E       		.uleb128 0xe
 2270 04ae 90010000 		.4byte	.LASF39
 2271 04b2 01       		.byte	0x1
 2272 04b3 FC04     		.2byte	0x4fc
 2273 04b5 6B000000 		.4byte	0x6b
 2274 04b9 02       		.uleb128 0x2
 2275 04ba 91       		.byte	0x91
 2276 04bb 77       		.sleb128 -9
 2277 04bc 00       		.byte	0
 2278 04bd 10       		.uleb128 0x10
 2279 04be 81000000 		.4byte	.LASF59
 2280 04c2 01       		.byte	0x1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 69


 2281 04c3 4A05     		.2byte	0x54a
 2282 04c5 00000000 		.4byte	.LFB24
 2283 04c9 40000000 		.4byte	.LFE24-.LFB24
 2284 04cd 01       		.uleb128 0x1
 2285 04ce 9C       		.byte	0x9c
 2286 04cf E3040000 		.4byte	0x4e3
 2287 04d3 0E       		.uleb128 0xe
 2288 04d4 EF030000 		.4byte	.LASF23
 2289 04d8 01       		.byte	0x1
 2290 04d9 4C05     		.2byte	0x54c
 2291 04db 6B000000 		.4byte	0x6b
 2292 04df 02       		.uleb128 0x2
 2293 04e0 91       		.byte	0x91
 2294 04e1 77       		.sleb128 -9
 2295 04e2 00       		.byte	0
 2296 04e3 10       		.uleb128 0x10
 2297 04e4 0C030000 		.4byte	.LASF60
 2298 04e8 01       		.byte	0x1
 2299 04e9 A005     		.2byte	0x5a0
 2300 04eb 00000000 		.4byte	.LFB25
 2301 04ef BC000000 		.4byte	.LFE25-.LFB25
 2302 04f3 01       		.uleb128 0x1
 2303 04f4 9C       		.byte	0x9c
 2304 04f5 34050000 		.4byte	0x534
 2305 04f9 0C       		.uleb128 0xc
 2306 04fa 21010000 		.4byte	.LASF61
 2307 04fe 01       		.byte	0x1
 2308 04ff A005     		.2byte	0x5a0
 2309 0501 6B000000 		.4byte	0x6b
 2310 0505 02       		.uleb128 0x2
 2311 0506 91       		.byte	0x91
 2312 0507 6F       		.sleb128 -17
 2313 0508 13       		.uleb128 0x13
 2314 0509 12000000 		.4byte	.LBB2
 2315 050d 90000000 		.4byte	.LBE2-.LBB2
 2316 0511 0E       		.uleb128 0xe
 2317 0512 D4010000 		.4byte	.LASF62
 2318 0516 01       		.byte	0x1
 2319 0517 A805     		.2byte	0x5a8
 2320 0519 6B000000 		.4byte	0x6b
 2321 051d 02       		.uleb128 0x2
 2322 051e 91       		.byte	0x91
 2323 051f 77       		.sleb128 -9
 2324 0520 0E       		.uleb128 0xe
 2325 0521 AC000000 		.4byte	.LASF63
 2326 0525 01       		.byte	0x1
 2327 0526 D005     		.2byte	0x5d0
 2328 0528 6B000000 		.4byte	0x6b
 2329 052c 05       		.uleb128 0x5
 2330 052d 03       		.byte	0x3
 2331 052e 06000000 		.4byte	txPeriod.4988
 2332 0532 00       		.byte	0
 2333 0533 00       		.byte	0
 2334 0534 0B       		.uleb128 0xb
 2335 0535 A9020000 		.4byte	.LASF64
 2336 0539 01       		.byte	0x1
 2337 053a 2406     		.2byte	0x624
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 70


 2338 053c 00000000 		.4byte	.LFB26
 2339 0540 14000000 		.4byte	.LFE26-.LFB26
 2340 0544 01       		.uleb128 0x1
 2341 0545 9C       		.byte	0x9c
 2342 0546 5A050000 		.4byte	0x55a
 2343 054a 0C       		.uleb128 0xc
 2344 054b 06010000 		.4byte	.LASF42
 2345 054f 01       		.byte	0x1
 2346 0550 2406     		.2byte	0x624
 2347 0552 6B000000 		.4byte	0x6b
 2348 0556 02       		.uleb128 0x2
 2349 0557 91       		.byte	0x91
 2350 0558 77       		.sleb128 -9
 2351 0559 00       		.byte	0
 2352 055a 14       		.uleb128 0x14
 2353 055b 00000000 		.4byte	.LASF65
 2354 055f 01       		.byte	0x1
 2355 0560 1B       		.byte	0x1b
 2356 0561 6B000000 		.4byte	0x6b
 2357 0565 05       		.uleb128 0x5
 2358 0566 03       		.byte	0x3
 2359 0567 00000000 		.4byte	LP_initVar
 2360 056b 14       		.uleb128 0x14
 2361 056c 9A020000 		.4byte	.LASF66
 2362 0570 01       		.byte	0x1
 2363 0571 24       		.byte	0x24
 2364 0572 6B000000 		.4byte	0x6b
 2365 0576 05       		.uleb128 0x5
 2366 0577 03       		.byte	0x3
 2367 0578 00000000 		.4byte	LP_errorStatus
 2368 057c 15       		.uleb128 0x15
 2369 057d 6B000000 		.4byte	0x6b
 2370 0581 8C050000 		.4byte	0x58c
 2371 0585 16       		.uleb128 0x16
 2372 0586 CE000000 		.4byte	0xce
 2373 058a C7       		.byte	0xc7
 2374 058b 00       		.byte	0
 2375 058c 14       		.uleb128 0x14
 2376 058d 84010000 		.4byte	.LASF67
 2377 0591 01       		.byte	0x1
 2378 0592 25       		.byte	0x25
 2379 0593 9D050000 		.4byte	0x59d
 2380 0597 05       		.uleb128 0x5
 2381 0598 03       		.byte	0x3
 2382 0599 00000000 		.4byte	LP_rxBuffer
 2383 059d 06       		.uleb128 0x6
 2384 059e 7C050000 		.4byte	0x57c
 2385 05a2 14       		.uleb128 0x14
 2386 05a3 00040000 		.4byte	.LASF68
 2387 05a7 01       		.byte	0x1
 2388 05a8 26       		.byte	0x26
 2389 05a9 B8000000 		.4byte	0xb8
 2390 05ad 05       		.uleb128 0x5
 2391 05ae 03       		.byte	0x3
 2392 05af 00000000 		.4byte	LP_rxBufferRead
 2393 05b3 14       		.uleb128 0x14
 2394 05b4 37000000 		.4byte	.LASF69
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 71


 2395 05b8 01       		.byte	0x1
 2396 05b9 27       		.byte	0x27
 2397 05ba B8000000 		.4byte	0xb8
 2398 05be 05       		.uleb128 0x5
 2399 05bf 03       		.byte	0x3
 2400 05c0 00000000 		.4byte	LP_rxBufferWrite
 2401 05c4 14       		.uleb128 0x14
 2402 05c5 2F040000 		.4byte	.LASF70
 2403 05c9 01       		.byte	0x1
 2404 05ca 28       		.byte	0x28
 2405 05cb B8000000 		.4byte	0xb8
 2406 05cf 05       		.uleb128 0x5
 2407 05d0 03       		.byte	0x3
 2408 05d1 00000000 		.4byte	LP_rxBufferLoopDetect
 2409 05d5 14       		.uleb128 0x14
 2410 05d6 B4030000 		.4byte	.LASF71
 2411 05da 01       		.byte	0x1
 2412 05db 29       		.byte	0x29
 2413 05dc B8000000 		.4byte	0xb8
 2414 05e0 05       		.uleb128 0x5
 2415 05e1 03       		.byte	0x3
 2416 05e2 00000000 		.4byte	LP_rxBufferOverflow
 2417 05e6 00       		.byte	0
 2418              		.section	.debug_abbrev,"",%progbits
 2419              	.Ldebug_abbrev0:
 2420 0000 01       		.uleb128 0x1
 2421 0001 11       		.uleb128 0x11
 2422 0002 01       		.byte	0x1
 2423 0003 25       		.uleb128 0x25
 2424 0004 0E       		.uleb128 0xe
 2425 0005 13       		.uleb128 0x13
 2426 0006 0B       		.uleb128 0xb
 2427 0007 03       		.uleb128 0x3
 2428 0008 0E       		.uleb128 0xe
 2429 0009 1B       		.uleb128 0x1b
 2430 000a 0E       		.uleb128 0xe
 2431 000b 55       		.uleb128 0x55
 2432 000c 17       		.uleb128 0x17
 2433 000d 11       		.uleb128 0x11
 2434 000e 01       		.uleb128 0x1
 2435 000f 10       		.uleb128 0x10
 2436 0010 17       		.uleb128 0x17
 2437 0011 00       		.byte	0
 2438 0012 00       		.byte	0
 2439 0013 02       		.uleb128 0x2
 2440 0014 24       		.uleb128 0x24
 2441 0015 00       		.byte	0
 2442 0016 0B       		.uleb128 0xb
 2443 0017 0B       		.uleb128 0xb
 2444 0018 3E       		.uleb128 0x3e
 2445 0019 0B       		.uleb128 0xb
 2446 001a 03       		.uleb128 0x3
 2447 001b 0E       		.uleb128 0xe
 2448 001c 00       		.byte	0
 2449 001d 00       		.byte	0
 2450 001e 03       		.uleb128 0x3
 2451 001f 24       		.uleb128 0x24
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 72


 2452 0020 00       		.byte	0
 2453 0021 0B       		.uleb128 0xb
 2454 0022 0B       		.uleb128 0xb
 2455 0023 3E       		.uleb128 0x3e
 2456 0024 0B       		.uleb128 0xb
 2457 0025 03       		.uleb128 0x3
 2458 0026 08       		.uleb128 0x8
 2459 0027 00       		.byte	0
 2460 0028 00       		.byte	0
 2461 0029 04       		.uleb128 0x4
 2462 002a 16       		.uleb128 0x16
 2463 002b 00       		.byte	0
 2464 002c 03       		.uleb128 0x3
 2465 002d 0E       		.uleb128 0xe
 2466 002e 3A       		.uleb128 0x3a
 2467 002f 0B       		.uleb128 0xb
 2468 0030 3B       		.uleb128 0x3b
 2469 0031 0B       		.uleb128 0xb
 2470 0032 49       		.uleb128 0x49
 2471 0033 13       		.uleb128 0x13
 2472 0034 00       		.byte	0
 2473 0035 00       		.byte	0
 2474 0036 05       		.uleb128 0x5
 2475 0037 16       		.uleb128 0x16
 2476 0038 00       		.byte	0
 2477 0039 03       		.uleb128 0x3
 2478 003a 0E       		.uleb128 0xe
 2479 003b 3A       		.uleb128 0x3a
 2480 003c 0B       		.uleb128 0xb
 2481 003d 3B       		.uleb128 0x3b
 2482 003e 05       		.uleb128 0x5
 2483 003f 49       		.uleb128 0x49
 2484 0040 13       		.uleb128 0x13
 2485 0041 00       		.byte	0
 2486 0042 00       		.byte	0
 2487 0043 06       		.uleb128 0x6
 2488 0044 35       		.uleb128 0x35
 2489 0045 00       		.byte	0
 2490 0046 49       		.uleb128 0x49
 2491 0047 13       		.uleb128 0x13
 2492 0048 00       		.byte	0
 2493 0049 00       		.byte	0
 2494 004a 07       		.uleb128 0x7
 2495 004b 2E       		.uleb128 0x2e
 2496 004c 00       		.byte	0
 2497 004d 3F       		.uleb128 0x3f
 2498 004e 19       		.uleb128 0x19
 2499 004f 03       		.uleb128 0x3
 2500 0050 0E       		.uleb128 0xe
 2501 0051 3A       		.uleb128 0x3a
 2502 0052 0B       		.uleb128 0xb
 2503 0053 3B       		.uleb128 0x3b
 2504 0054 0B       		.uleb128 0xb
 2505 0055 27       		.uleb128 0x27
 2506 0056 19       		.uleb128 0x19
 2507 0057 11       		.uleb128 0x11
 2508 0058 01       		.uleb128 0x1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 73


 2509 0059 12       		.uleb128 0x12
 2510 005a 06       		.uleb128 0x6
 2511 005b 40       		.uleb128 0x40
 2512 005c 18       		.uleb128 0x18
 2513 005d 9642     		.uleb128 0x2116
 2514 005f 19       		.uleb128 0x19
 2515 0060 00       		.byte	0
 2516 0061 00       		.byte	0
 2517 0062 08       		.uleb128 0x8
 2518 0063 2E       		.uleb128 0x2e
 2519 0064 01       		.byte	0x1
 2520 0065 3F       		.uleb128 0x3f
 2521 0066 19       		.uleb128 0x19
 2522 0067 03       		.uleb128 0x3
 2523 0068 0E       		.uleb128 0xe
 2524 0069 3A       		.uleb128 0x3a
 2525 006a 0B       		.uleb128 0xb
 2526 006b 3B       		.uleb128 0x3b
 2527 006c 0B       		.uleb128 0xb
 2528 006d 27       		.uleb128 0x27
 2529 006e 19       		.uleb128 0x19
 2530 006f 11       		.uleb128 0x11
 2531 0070 01       		.uleb128 0x1
 2532 0071 12       		.uleb128 0x12
 2533 0072 06       		.uleb128 0x6
 2534 0073 40       		.uleb128 0x40
 2535 0074 18       		.uleb128 0x18
 2536 0075 9642     		.uleb128 0x2116
 2537 0077 19       		.uleb128 0x19
 2538 0078 01       		.uleb128 0x1
 2539 0079 13       		.uleb128 0x13
 2540 007a 00       		.byte	0
 2541 007b 00       		.byte	0
 2542 007c 09       		.uleb128 0x9
 2543 007d 34       		.uleb128 0x34
 2544 007e 00       		.byte	0
 2545 007f 03       		.uleb128 0x3
 2546 0080 0E       		.uleb128 0xe
 2547 0081 3A       		.uleb128 0x3a
 2548 0082 0B       		.uleb128 0xb
 2549 0083 3B       		.uleb128 0x3b
 2550 0084 0B       		.uleb128 0xb
 2551 0085 49       		.uleb128 0x49
 2552 0086 13       		.uleb128 0x13
 2553 0087 02       		.uleb128 0x2
 2554 0088 18       		.uleb128 0x18
 2555 0089 00       		.byte	0
 2556 008a 00       		.byte	0
 2557 008b 0A       		.uleb128 0xa
 2558 008c 2E       		.uleb128 0x2e
 2559 008d 00       		.byte	0
 2560 008e 3F       		.uleb128 0x3f
 2561 008f 19       		.uleb128 0x19
 2562 0090 03       		.uleb128 0x3
 2563 0091 0E       		.uleb128 0xe
 2564 0092 3A       		.uleb128 0x3a
 2565 0093 0B       		.uleb128 0xb
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 74


 2566 0094 3B       		.uleb128 0x3b
 2567 0095 05       		.uleb128 0x5
 2568 0096 27       		.uleb128 0x27
 2569 0097 19       		.uleb128 0x19
 2570 0098 49       		.uleb128 0x49
 2571 0099 13       		.uleb128 0x13
 2572 009a 11       		.uleb128 0x11
 2573 009b 01       		.uleb128 0x1
 2574 009c 12       		.uleb128 0x12
 2575 009d 06       		.uleb128 0x6
 2576 009e 40       		.uleb128 0x40
 2577 009f 18       		.uleb128 0x18
 2578 00a0 9742     		.uleb128 0x2117
 2579 00a2 19       		.uleb128 0x19
 2580 00a3 00       		.byte	0
 2581 00a4 00       		.byte	0
 2582 00a5 0B       		.uleb128 0xb
 2583 00a6 2E       		.uleb128 0x2e
 2584 00a7 01       		.byte	0x1
 2585 00a8 3F       		.uleb128 0x3f
 2586 00a9 19       		.uleb128 0x19
 2587 00aa 03       		.uleb128 0x3
 2588 00ab 0E       		.uleb128 0xe
 2589 00ac 3A       		.uleb128 0x3a
 2590 00ad 0B       		.uleb128 0xb
 2591 00ae 3B       		.uleb128 0x3b
 2592 00af 05       		.uleb128 0x5
 2593 00b0 27       		.uleb128 0x27
 2594 00b1 19       		.uleb128 0x19
 2595 00b2 11       		.uleb128 0x11
 2596 00b3 01       		.uleb128 0x1
 2597 00b4 12       		.uleb128 0x12
 2598 00b5 06       		.uleb128 0x6
 2599 00b6 40       		.uleb128 0x40
 2600 00b7 18       		.uleb128 0x18
 2601 00b8 9742     		.uleb128 0x2117
 2602 00ba 19       		.uleb128 0x19
 2603 00bb 01       		.uleb128 0x1
 2604 00bc 13       		.uleb128 0x13
 2605 00bd 00       		.byte	0
 2606 00be 00       		.byte	0
 2607 00bf 0C       		.uleb128 0xc
 2608 00c0 05       		.uleb128 0x5
 2609 00c1 00       		.byte	0
 2610 00c2 03       		.uleb128 0x3
 2611 00c3 0E       		.uleb128 0xe
 2612 00c4 3A       		.uleb128 0x3a
 2613 00c5 0B       		.uleb128 0xb
 2614 00c6 3B       		.uleb128 0x3b
 2615 00c7 05       		.uleb128 0x5
 2616 00c8 49       		.uleb128 0x49
 2617 00c9 13       		.uleb128 0x13
 2618 00ca 02       		.uleb128 0x2
 2619 00cb 18       		.uleb128 0x18
 2620 00cc 00       		.byte	0
 2621 00cd 00       		.byte	0
 2622 00ce 0D       		.uleb128 0xd
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 75


 2623 00cf 2E       		.uleb128 0x2e
 2624 00d0 01       		.byte	0x1
 2625 00d1 3F       		.uleb128 0x3f
 2626 00d2 19       		.uleb128 0x19
 2627 00d3 03       		.uleb128 0x3
 2628 00d4 0E       		.uleb128 0xe
 2629 00d5 3A       		.uleb128 0x3a
 2630 00d6 0B       		.uleb128 0xb
 2631 00d7 3B       		.uleb128 0x3b
 2632 00d8 05       		.uleb128 0x5
 2633 00d9 27       		.uleb128 0x27
 2634 00da 19       		.uleb128 0x19
 2635 00db 49       		.uleb128 0x49
 2636 00dc 13       		.uleb128 0x13
 2637 00dd 11       		.uleb128 0x11
 2638 00de 01       		.uleb128 0x1
 2639 00df 12       		.uleb128 0x12
 2640 00e0 06       		.uleb128 0x6
 2641 00e1 40       		.uleb128 0x40
 2642 00e2 18       		.uleb128 0x18
 2643 00e3 9742     		.uleb128 0x2117
 2644 00e5 19       		.uleb128 0x19
 2645 00e6 01       		.uleb128 0x1
 2646 00e7 13       		.uleb128 0x13
 2647 00e8 00       		.byte	0
 2648 00e9 00       		.byte	0
 2649 00ea 0E       		.uleb128 0xe
 2650 00eb 34       		.uleb128 0x34
 2651 00ec 00       		.byte	0
 2652 00ed 03       		.uleb128 0x3
 2653 00ee 0E       		.uleb128 0xe
 2654 00ef 3A       		.uleb128 0x3a
 2655 00f0 0B       		.uleb128 0xb
 2656 00f1 3B       		.uleb128 0x3b
 2657 00f2 05       		.uleb128 0x5
 2658 00f3 49       		.uleb128 0x49
 2659 00f4 13       		.uleb128 0x13
 2660 00f5 02       		.uleb128 0x2
 2661 00f6 18       		.uleb128 0x18
 2662 00f7 00       		.byte	0
 2663 00f8 00       		.byte	0
 2664 00f9 0F       		.uleb128 0xf
 2665 00fa 2E       		.uleb128 0x2e
 2666 00fb 01       		.byte	0x1
 2667 00fc 3F       		.uleb128 0x3f
 2668 00fd 19       		.uleb128 0x19
 2669 00fe 03       		.uleb128 0x3
 2670 00ff 0E       		.uleb128 0xe
 2671 0100 3A       		.uleb128 0x3a
 2672 0101 0B       		.uleb128 0xb
 2673 0102 3B       		.uleb128 0x3b
 2674 0103 05       		.uleb128 0x5
 2675 0104 27       		.uleb128 0x27
 2676 0105 19       		.uleb128 0x19
 2677 0106 49       		.uleb128 0x49
 2678 0107 13       		.uleb128 0x13
 2679 0108 11       		.uleb128 0x11
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 76


 2680 0109 01       		.uleb128 0x1
 2681 010a 12       		.uleb128 0x12
 2682 010b 06       		.uleb128 0x6
 2683 010c 40       		.uleb128 0x40
 2684 010d 18       		.uleb128 0x18
 2685 010e 9642     		.uleb128 0x2116
 2686 0110 19       		.uleb128 0x19
 2687 0111 01       		.uleb128 0x1
 2688 0112 13       		.uleb128 0x13
 2689 0113 00       		.byte	0
 2690 0114 00       		.byte	0
 2691 0115 10       		.uleb128 0x10
 2692 0116 2E       		.uleb128 0x2e
 2693 0117 01       		.byte	0x1
 2694 0118 3F       		.uleb128 0x3f
 2695 0119 19       		.uleb128 0x19
 2696 011a 03       		.uleb128 0x3
 2697 011b 0E       		.uleb128 0xe
 2698 011c 3A       		.uleb128 0x3a
 2699 011d 0B       		.uleb128 0xb
 2700 011e 3B       		.uleb128 0x3b
 2701 011f 05       		.uleb128 0x5
 2702 0120 27       		.uleb128 0x27
 2703 0121 19       		.uleb128 0x19
 2704 0122 11       		.uleb128 0x11
 2705 0123 01       		.uleb128 0x1
 2706 0124 12       		.uleb128 0x12
 2707 0125 06       		.uleb128 0x6
 2708 0126 40       		.uleb128 0x40
 2709 0127 18       		.uleb128 0x18
 2710 0128 9642     		.uleb128 0x2116
 2711 012a 19       		.uleb128 0x19
 2712 012b 01       		.uleb128 0x1
 2713 012c 13       		.uleb128 0x13
 2714 012d 00       		.byte	0
 2715 012e 00       		.byte	0
 2716 012f 11       		.uleb128 0x11
 2717 0130 0F       		.uleb128 0xf
 2718 0131 00       		.byte	0
 2719 0132 0B       		.uleb128 0xb
 2720 0133 0B       		.uleb128 0xb
 2721 0134 49       		.uleb128 0x49
 2722 0135 13       		.uleb128 0x13
 2723 0136 00       		.byte	0
 2724 0137 00       		.byte	0
 2725 0138 12       		.uleb128 0x12
 2726 0139 26       		.uleb128 0x26
 2727 013a 00       		.byte	0
 2728 013b 49       		.uleb128 0x49
 2729 013c 13       		.uleb128 0x13
 2730 013d 00       		.byte	0
 2731 013e 00       		.byte	0
 2732 013f 13       		.uleb128 0x13
 2733 0140 0B       		.uleb128 0xb
 2734 0141 01       		.byte	0x1
 2735 0142 11       		.uleb128 0x11
 2736 0143 01       		.uleb128 0x1
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 77


 2737 0144 12       		.uleb128 0x12
 2738 0145 06       		.uleb128 0x6
 2739 0146 00       		.byte	0
 2740 0147 00       		.byte	0
 2741 0148 14       		.uleb128 0x14
 2742 0149 34       		.uleb128 0x34
 2743 014a 00       		.byte	0
 2744 014b 03       		.uleb128 0x3
 2745 014c 0E       		.uleb128 0xe
 2746 014d 3A       		.uleb128 0x3a
 2747 014e 0B       		.uleb128 0xb
 2748 014f 3B       		.uleb128 0x3b
 2749 0150 0B       		.uleb128 0xb
 2750 0151 49       		.uleb128 0x49
 2751 0152 13       		.uleb128 0x13
 2752 0153 3F       		.uleb128 0x3f
 2753 0154 19       		.uleb128 0x19
 2754 0155 02       		.uleb128 0x2
 2755 0156 18       		.uleb128 0x18
 2756 0157 00       		.byte	0
 2757 0158 00       		.byte	0
 2758 0159 15       		.uleb128 0x15
 2759 015a 01       		.uleb128 0x1
 2760 015b 01       		.byte	0x1
 2761 015c 49       		.uleb128 0x49
 2762 015d 13       		.uleb128 0x13
 2763 015e 01       		.uleb128 0x1
 2764 015f 13       		.uleb128 0x13
 2765 0160 00       		.byte	0
 2766 0161 00       		.byte	0
 2767 0162 16       		.uleb128 0x16
 2768 0163 21       		.uleb128 0x21
 2769 0164 00       		.byte	0
 2770 0165 49       		.uleb128 0x49
 2771 0166 13       		.uleb128 0x13
 2772 0167 2F       		.uleb128 0x2f
 2773 0168 0B       		.uleb128 0xb
 2774 0169 00       		.byte	0
 2775 016a 00       		.byte	0
 2776 016b 00       		.byte	0
 2777              		.section	.debug_aranges,"",%progbits
 2778 0000 EC000000 		.4byte	0xec
 2779 0004 0200     		.2byte	0x2
 2780 0006 00000000 		.4byte	.Ldebug_info0
 2781 000a 04       		.byte	0x4
 2782 000b 00       		.byte	0
 2783 000c 0000     		.2byte	0
 2784 000e 0000     		.2byte	0
 2785 0010 00000000 		.4byte	.LFB0
 2786 0014 20000000 		.4byte	.LFE0-.LFB0
 2787 0018 00000000 		.4byte	.LFB1
 2788 001c 58000000 		.4byte	.LFE1-.LFB1
 2789 0020 00000000 		.4byte	.LFB2
 2790 0024 64000000 		.4byte	.LFE2-.LFB2
 2791 0028 00000000 		.4byte	.LFB3
 2792 002c 64000000 		.4byte	.LFE3-.LFB3
 2793 0030 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 78


 2794 0034 10000000 		.4byte	.LFE4-.LFB4
 2795 0038 00000000 		.4byte	.LFB5
 2796 003c 14000000 		.4byte	.LFE5-.LFB5
 2797 0040 00000000 		.4byte	.LFB6
 2798 0044 20000000 		.4byte	.LFE6-.LFB6
 2799 0048 00000000 		.4byte	.LFB7
 2800 004c 94000000 		.4byte	.LFE7-.LFB7
 2801 0050 00000000 		.4byte	.LFB8
 2802 0054 40000000 		.4byte	.LFE8-.LFB8
 2803 0058 00000000 		.4byte	.LFB9
 2804 005c B8000000 		.4byte	.LFE9-.LFB9
 2805 0060 00000000 		.4byte	.LFB10
 2806 0064 44000000 		.4byte	.LFE10-.LFB10
 2807 0068 00000000 		.4byte	.LFB11
 2808 006c 90000000 		.4byte	.LFE11-.LFB11
 2809 0070 00000000 		.4byte	.LFB12
 2810 0074 7C000000 		.4byte	.LFE12-.LFB12
 2811 0078 00000000 		.4byte	.LFB13
 2812 007c 14000000 		.4byte	.LFE13-.LFB13
 2813 0080 00000000 		.4byte	.LFB14
 2814 0084 20000000 		.4byte	.LFE14-.LFB14
 2815 0088 00000000 		.4byte	.LFB15
 2816 008c 20000000 		.4byte	.LFE15-.LFB15
 2817 0090 00000000 		.4byte	.LFB16
 2818 0094 20000000 		.4byte	.LFE16-.LFB16
 2819 0098 00000000 		.4byte	.LFB17
 2820 009c 2C000000 		.4byte	.LFE17-.LFB17
 2821 00a0 00000000 		.4byte	.LFB18
 2822 00a4 18000000 		.4byte	.LFE18-.LFB18
 2823 00a8 00000000 		.4byte	.LFB19
 2824 00ac 34000000 		.4byte	.LFE19-.LFB19
 2825 00b0 00000000 		.4byte	.LFB20
 2826 00b4 40000000 		.4byte	.LFE20-.LFB20
 2827 00b8 00000000 		.4byte	.LFB21
 2828 00bc 40000000 		.4byte	.LFE21-.LFB21
 2829 00c0 00000000 		.4byte	.LFB22
 2830 00c4 30000000 		.4byte	.LFE22-.LFB22
 2831 00c8 00000000 		.4byte	.LFB23
 2832 00cc 44000000 		.4byte	.LFE23-.LFB23
 2833 00d0 00000000 		.4byte	.LFB24
 2834 00d4 40000000 		.4byte	.LFE24-.LFB24
 2835 00d8 00000000 		.4byte	.LFB25
 2836 00dc BC000000 		.4byte	.LFE25-.LFB25
 2837 00e0 00000000 		.4byte	.LFB26
 2838 00e4 14000000 		.4byte	.LFE26-.LFB26
 2839 00e8 00000000 		.4byte	0
 2840 00ec 00000000 		.4byte	0
 2841              		.section	.debug_ranges,"",%progbits
 2842              	.Ldebug_ranges0:
 2843 0000 00000000 		.4byte	.LFB0
 2844 0004 20000000 		.4byte	.LFE0
 2845 0008 00000000 		.4byte	.LFB1
 2846 000c 58000000 		.4byte	.LFE1
 2847 0010 00000000 		.4byte	.LFB2
 2848 0014 64000000 		.4byte	.LFE2
 2849 0018 00000000 		.4byte	.LFB3
 2850 001c 64000000 		.4byte	.LFE3
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 79


 2851 0020 00000000 		.4byte	.LFB4
 2852 0024 10000000 		.4byte	.LFE4
 2853 0028 00000000 		.4byte	.LFB5
 2854 002c 14000000 		.4byte	.LFE5
 2855 0030 00000000 		.4byte	.LFB6
 2856 0034 20000000 		.4byte	.LFE6
 2857 0038 00000000 		.4byte	.LFB7
 2858 003c 94000000 		.4byte	.LFE7
 2859 0040 00000000 		.4byte	.LFB8
 2860 0044 40000000 		.4byte	.LFE8
 2861 0048 00000000 		.4byte	.LFB9
 2862 004c B8000000 		.4byte	.LFE9
 2863 0050 00000000 		.4byte	.LFB10
 2864 0054 44000000 		.4byte	.LFE10
 2865 0058 00000000 		.4byte	.LFB11
 2866 005c 90000000 		.4byte	.LFE11
 2867 0060 00000000 		.4byte	.LFB12
 2868 0064 7C000000 		.4byte	.LFE12
 2869 0068 00000000 		.4byte	.LFB13
 2870 006c 14000000 		.4byte	.LFE13
 2871 0070 00000000 		.4byte	.LFB14
 2872 0074 20000000 		.4byte	.LFE14
 2873 0078 00000000 		.4byte	.LFB15
 2874 007c 20000000 		.4byte	.LFE15
 2875 0080 00000000 		.4byte	.LFB16
 2876 0084 20000000 		.4byte	.LFE16
 2877 0088 00000000 		.4byte	.LFB17
 2878 008c 2C000000 		.4byte	.LFE17
 2879 0090 00000000 		.4byte	.LFB18
 2880 0094 18000000 		.4byte	.LFE18
 2881 0098 00000000 		.4byte	.LFB19
 2882 009c 34000000 		.4byte	.LFE19
 2883 00a0 00000000 		.4byte	.LFB20
 2884 00a4 40000000 		.4byte	.LFE20
 2885 00a8 00000000 		.4byte	.LFB21
 2886 00ac 40000000 		.4byte	.LFE21
 2887 00b0 00000000 		.4byte	.LFB22
 2888 00b4 30000000 		.4byte	.LFE22
 2889 00b8 00000000 		.4byte	.LFB23
 2890 00bc 44000000 		.4byte	.LFE23
 2891 00c0 00000000 		.4byte	.LFB24
 2892 00c4 40000000 		.4byte	.LFE24
 2893 00c8 00000000 		.4byte	.LFB25
 2894 00cc BC000000 		.4byte	.LFE25
 2895 00d0 00000000 		.4byte	.LFB26
 2896 00d4 14000000 		.4byte	.LFE26
 2897 00d8 00000000 		.4byte	0
 2898 00dc 00000000 		.4byte	0
 2899              		.section	.debug_line,"",%progbits
 2900              	.Ldebug_line0:
 2901 0000 1A030000 		.section	.debug_str,"MS",%progbits,1
 2901      02004100 
 2901      00000201 
 2901      FB0E0D00 
 2901      01010101 
 2902              	.LASF65:
 2903 0000 4C505F69 		.ascii	"LP_initVar\000"
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 80


 2903      6E697456 
 2903      617200
 2904              	.LASF10:
 2905 000b 75696E74 		.ascii	"uint16\000"
 2905      313600
 2906              	.LASF48:
 2907 0012 74784461 		.ascii	"txDataByte\000"
 2907      74614279 
 2907      746500
 2908              	.LASF58:
 2909 001d 4C505F47 		.ascii	"LP_GetTxBufferSize\000"
 2909      65745478 
 2909      42756666 
 2909      65725369 
 2909      7A6500
 2910              	.LASF53:
 2911 0030 73747269 		.ascii	"string\000"
 2911      6E6700
 2912              	.LASF69:
 2913 0037 4C505F72 		.ascii	"LP_rxBufferWrite\000"
 2913      78427566 
 2913      66657257 
 2913      72697465 
 2913      00
 2914              	.LASF41:
 2915 0048 4C505F53 		.ascii	"LP_SetRxAddressMode\000"
 2915      65745278 
 2915      41646472 
 2915      6573734D 
 2915      6F646500 
 2916              	.LASF7:
 2917 005c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2917      206C6F6E 
 2917      6720756E 
 2917      7369676E 
 2917      65642069 
 2918              	.LASF31:
 2919 0073 4C505F52 		.ascii	"LP_ReadRxData\000"
 2919      65616452 
 2919      78446174 
 2919      6100
 2920              	.LASF59:
 2921 0081 4C505F43 		.ascii	"LP_ClearTxBuffer\000"
 2921      6C656172 
 2921      54784275 
 2921      66666572 
 2921      00
 2922              	.LASF6:
 2923 0092 6C6F6E67 		.ascii	"long long int\000"
 2923      206C6F6E 
 2923      6720696E 
 2923      7400
 2924              	.LASF0:
 2925 00a0 7369676E 		.ascii	"signed char\000"
 2925      65642063 
 2925      68617200 
 2926              	.LASF63:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 81


 2927 00ac 74785065 		.ascii	"txPeriod\000"
 2927      72696F64 
 2927      00
 2928              	.LASF52:
 2929 00b5 4C505F50 		.ascii	"LP_PutString\000"
 2929      75745374 
 2929      72696E67 
 2929      00
 2930              	.LASF22:
 2931 00c2 4C505F53 		.ascii	"LP_Stop\000"
 2931      746F7000 
 2932              	.LASF4:
 2933 00ca 6C6F6E67 		.ascii	"long int\000"
 2933      20696E74 
 2933      00
 2934              	.LASF32:
 2935 00d3 4C505F52 		.ascii	"LP_ReadRxStatus\000"
 2935      65616452 
 2935      78537461 
 2935      74757300 
 2936              	.LASF9:
 2937 00e3 75696E74 		.ascii	"uint8\000"
 2937      3800
 2938              	.LASF25:
 2939 00e9 4C505F53 		.ascii	"LP_SetRxInterruptMode\000"
 2939      65745278 
 2939      496E7465 
 2939      72727570 
 2939      744D6F64 
 2940              	.LASF13:
 2941 00ff 646F7562 		.ascii	"double\000"
 2941      6C6500
 2942              	.LASF42:
 2943 0106 61646472 		.ascii	"addressMode\000"
 2943      6573734D 
 2943      6F646500 
 2944              	.LASF11:
 2945 0112 75696E74 		.ascii	"uint32\000"
 2945      333200
 2946              	.LASF26:
 2947 0119 636F6E74 		.ascii	"control\000"
 2947      726F6C00 
 2948              	.LASF61:
 2949 0121 7265744D 		.ascii	"retMode\000"
 2949      6F646500 
 2950              	.LASF8:
 2951 0129 756E7369 		.ascii	"unsigned int\000"
 2951      676E6564 
 2951      20696E74 
 2951      00
 2952              	.LASF43:
 2953 0136 4C505F53 		.ascii	"LP_SetRxAddress1\000"
 2953      65745278 
 2953      41646472 
 2953      65737331 
 2953      00
 2954              	.LASF45:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 82


 2955 0147 4C505F53 		.ascii	"LP_SetRxAddress2\000"
 2955      65745278 
 2955      41646472 
 2955      65737332 
 2955      00
 2956              	.LASF51:
 2957 0158 4C505F50 		.ascii	"LP_PutChar\000"
 2957      75744368 
 2957      617200
 2958              	.LASF37:
 2959 0163 6C6F6345 		.ascii	"locErrorStatus\000"
 2959      72726F72 
 2959      53746174 
 2959      757300
 2960              	.LASF5:
 2961 0172 6C6F6E67 		.ascii	"long unsigned int\000"
 2961      20756E73 
 2961      69676E65 
 2961      6420696E 
 2961      7400
 2962              	.LASF67:
 2963 0184 4C505F72 		.ascii	"LP_rxBuffer\000"
 2963      78427566 
 2963      66657200 
 2964              	.LASF39:
 2965 0190 73697A65 		.ascii	"size\000"
 2965      00
 2966              	.LASF3:
 2967 0195 73686F72 		.ascii	"short unsigned int\000"
 2967      7420756E 
 2967      7369676E 
 2967      65642069 
 2967      6E7400
 2968              	.LASF54:
 2969 01a8 62756649 		.ascii	"bufIndex\000"
 2969      6E646578 
 2969      00
 2970              	.LASF27:
 2971 01b1 696E7453 		.ascii	"intSrc\000"
 2971      726300
 2972              	.LASF36:
 2973 01b8 4C505F47 		.ascii	"LP_GetByte\000"
 2973      65744279 
 2973      746500
 2974              	.LASF57:
 2975 01c3 4C505F50 		.ascii	"LP_PutCRLF\000"
 2975      75744352 
 2975      4C4600
 2976              	.LASF17:
 2977 01ce 72656733 		.ascii	"reg32\000"
 2977      3200
 2978              	.LASF62:
 2979 01d4 746D7053 		.ascii	"tmpStat\000"
 2979      74617400 
 2980              	.LASF18:
 2981 01dc 73697A65 		.ascii	"sizetype\000"
 2981      74797065 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 83


 2981      00
 2982              	.LASF44:
 2983 01e5 61646472 		.ascii	"address\000"
 2983      65737300 
 2984              	.LASF49:
 2985 01ed 4C505F52 		.ascii	"LP_ReadControlRegister\000"
 2985      65616443 
 2985      6F6E7472 
 2985      6F6C5265 
 2985      67697374 
 2986              	.LASF72:
 2987 0204 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2987      4320342E 
 2987      382E3420 
 2987      32303134 
 2987      30353236 
 2988 0237 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m3 -mthumb -g -O"
 2988      20726576 
 2988      6973696F 
 2988      6E203231 
 2988      31333538 
 2989 026a 30202D66 		.ascii	"0 -ffunction-sections\000"
 2989      66756E63 
 2989      74696F6E 
 2989      2D736563 
 2989      74696F6E 
 2990              	.LASF30:
 2991 0280 6C6F6352 		.ascii	"locRxBufferWrite\000"
 2991      78427566 
 2991      66657257 
 2991      72697465 
 2991      00
 2992              	.LASF35:
 2993 0291 72785374 		.ascii	"rxStatus\000"
 2993      61747573 
 2993      00
 2994              	.LASF66:
 2995 029a 4C505F65 		.ascii	"LP_errorStatus\000"
 2995      72726F72 
 2995      53746174 
 2995      757300
 2996              	.LASF64:
 2997 02a9 4C505F53 		.ascii	"LP_SetTxAddressMode\000"
 2997      65745478 
 2997      41646472 
 2997      6573734D 
 2997      6F646500 
 2998              	.LASF20:
 2999 02bd 4C505F49 		.ascii	"LP_Init\000"
 2999      6E697400 
 3000              	.LASF73:
 3001 02c5 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\LP.c\000"
 3001      6E657261 
 3001      7465645F 
 3001      536F7572 
 3001      63655C50 
 3002              	.LASF12:
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 84


 3003 02e3 666C6F61 		.ascii	"float\000"
 3003      7400
 3004              	.LASF50:
 3005 02e9 4C505F52 		.ascii	"LP_ReadTxStatus\000"
 3005      65616454 
 3005      78537461 
 3005      74757300 
 3006              	.LASF38:
 3007 02f9 4C505F47 		.ascii	"LP_GetRxBufferSize\000"
 3007      65745278 
 3007      42756666 
 3007      65725369 
 3007      7A6500
 3008              	.LASF60:
 3009 030c 4C505F53 		.ascii	"LP_SendBreak\000"
 3009      656E6442 
 3009      7265616B 
 3009      00
 3010              	.LASF16:
 3011 0319 72656738 		.ascii	"reg8\000"
 3011      00
 3012              	.LASF1:
 3013 031e 756E7369 		.ascii	"unsigned char\000"
 3013      676E6564 
 3013      20636861 
 3013      7200
 3014              	.LASF2:
 3015 032c 73686F72 		.ascii	"short int\000"
 3015      7420696E 
 3015      7400
 3016              	.LASF24:
 3017 0336 4C505F57 		.ascii	"LP_WriteControlRegister\000"
 3017      72697465 
 3017      436F6E74 
 3017      726F6C52 
 3017      65676973 
 3018              	.LASF56:
 3019 034e 62797465 		.ascii	"byteCount\000"
 3019      436F756E 
 3019      7400
 3020              	.LASF74:
 3021 0358 433A5C55 		.ascii	"C:\\Users\\Recepcion\\Desktop\\BEAGLE\\Programa\\Pr"
 3021      73657273 
 3021      5C526563 
 3021      65706369 
 3021      6F6E5C44 
 3022 0385 75656261 		.ascii	"ueba_Autogas\\BBB.cydsn\000"
 3022      5F417574 
 3022      6F676173 
 3022      5C424242 
 3022      2E637964 
 3023              	.LASF28:
 3024 039c 72784461 		.ascii	"rxData\000"
 3024      746100
 3025              	.LASF40:
 3026 03a3 4C505F43 		.ascii	"LP_ClearRxBuffer\000"
 3026      6C656172 
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 85


 3026      52784275 
 3026      66666572 
 3026      00
 3027              	.LASF71:
 3028 03b4 4C505F72 		.ascii	"LP_rxBufferOverflow\000"
 3028      78427566 
 3028      6665724F 
 3028      76657266 
 3028      6C6F7700 
 3029              	.LASF15:
 3030 03c8 63686172 		.ascii	"char\000"
 3030      00
 3031              	.LASF14:
 3032 03cd 63686172 		.ascii	"char8\000"
 3032      3800
 3033              	.LASF55:
 3034 03d3 4C505F50 		.ascii	"LP_PutArray\000"
 3034      75744172 
 3034      72617900 
 3035              	.LASF29:
 3036 03df 6C6F6352 		.ascii	"locRxBufferRead\000"
 3036      78427566 
 3036      66657252 
 3036      65616400 
 3037              	.LASF23:
 3038 03ef 656E6162 		.ascii	"enableInterrupts\000"
 3038      6C65496E 
 3038      74657272 
 3038      75707473 
 3038      00
 3039              	.LASF68:
 3040 0400 4C505F72 		.ascii	"LP_rxBufferRead\000"
 3040      78427566 
 3040      66657252 
 3040      65616400 
 3041              	.LASF33:
 3042 0410 73746174 		.ascii	"status\000"
 3042      757300
 3043              	.LASF47:
 3044 0417 4C505F57 		.ascii	"LP_WriteTxData\000"
 3044      72697465 
 3044      54784461 
 3044      746100
 3045              	.LASF19:
 3046 0426 4C505F53 		.ascii	"LP_Start\000"
 3046      74617274 
 3046      00
 3047              	.LASF70:
 3048 042f 4C505F72 		.ascii	"LP_rxBufferLoopDetect\000"
 3048      78427566 
 3048      6665724C 
 3048      6F6F7044 
 3048      65746563 
 3049              	.LASF34:
 3050 0445 4C505F47 		.ascii	"LP_GetChar\000"
 3050      65744368 
 3050      617200
ARM GAS  C:\Users\RECEPC~1\AppData\Local\Temp\ccrZ7NBP.s 			page 86


 3051              	.LASF46:
 3052 0450 4C505F53 		.ascii	"LP_SetTxInterruptMode\000"
 3052      65745478 
 3052      496E7465 
 3052      72727570 
 3052      744D6F64 
 3053              	.LASF21:
 3054 0466 4C505F45 		.ascii	"LP_Enable\000"
 3054      6E61626C 
 3054      6500
 3055              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
